<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hadoop 机架感知]]></title>
      <url>http://binux.cn/2017/06/03/Hadoop-Perceived/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“Hadoop 配置机架感知”</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Hadoop在设计时考虑到数据的安全与高效，数据文件默认在HDFS上存放三份，存储策略为本地一份，同机架内其它某一节点上一份，不同机架的某一节点上一份。这样如果本地数据损坏，节点可以从同一机架内的相邻节点拿到数据，速度肯定比从跨机架节点上拿数据要快；同时，如果整个机架的网络出现异常，也能保证在其它机架的节点上找到数据。为了降低整体的带宽消耗和读取延时，HDFS会尽量让读取程序读取离它最近的副本。如果在读取程序的同一个机架上有一个副本，那么就读取该副本。如果一个HDFS集群跨越多个数据中心，那么客户端也将首先读本地数据中心的副本。那么Hadoop是如何确定任意两个节点是位于同一机架，还是跨机架的呢？答案就是机架感知。</p>
<p>默认情况下，hadoop的机架感知是没有被启用的。所以，在通常情况下，hadoop集群的HDFS在选机器的时候，是随机选择的，也就是说，很有可能在写数据时，hadoop将第一块数据block1写到了rack1上，然后随机的选择下将block2写入到了rack2下，此时两个rack之间产生了数据传输的流量，再接下来，在随机的情况下，又将block3重新又写回了rack1，此时，两个rack之间又产生了一次数据流量。在job处理的数据量非常的大，或者往hadoop推送的数据量非常大的时候，这种情况会造成rack之间的网络流量成倍的上升，成为性能的瓶颈，进而影响作业的性能以至于整个集群的服务</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>默认情况下，Namenode启动时候日志是这样的：</p>
<pre class=" language-bash"><code class="language-bash">2013-09-22 17:27:26,423 INFO org.apache.hadoop.net.NetworkTopology: Adding a new node:  /default-rack/ 192.168.147.92:50010
</code></pre>
<p>每个IP 对应的机架ID都是 <code>/default-rack</code> ，说明hadoop的机架感知没有被启用。<br>要将hadoop机架感知的功能启用，配置非常简单，在 NameNode所在节点的<code>/home/bigdata/apps/hadoop/etc/hadoop的core-site.xml</code>配置文件中配置一个选项:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>topology.scrIPt.file.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/bigdata/apps/hadoop/etc/hadoop/topology.sh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
</code></pre>
<p>这个配置选项的 value 指定为一个可执行程序，通常为一个脚本，该脚本接受一个参数，输出一个值。接受的参数通常为某台 datanode 机器的IP地址，而输出的值通常为该IP地址对应的 datanode 所在的 rack，例如 ”/rack1”。Namenode启动时，会判断该配置选项是否为空，如果非空，则表示已经启用机架感知的配置，此时 Namenode 会根据配置寻找该脚本，并在接收到每一个 datanode 的 heartbeat 时，将该 datanode 的 IP 地址作为参数传给该脚本运行，并将得到的输出作为该 datanode 所属的机架 id，保存到内存的一个 map 中.</p>
<p>至于脚本的编写，就需要将真实的网络拓朴和机架信息了解清楚后，通过该脚本能够将机器的 IP 地址和机器名正确的映射到相应的机架上去。一个简单的实现如下：</p>
<h3 id="topology-sh"><a href="#topology-sh" class="headerlink" title="topology.sh"></a>topology.sh</h3><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
HADOOP_CONF<span class="token operator">=</span>/home/bigdata/apps/hadoop/etc/hadoop
<span class="token keyword">while</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -gt 0 ] ; do</span>
  nodeArg<span class="token operator">=</span><span class="token variable">$1</span>
  exec<span class="token operator">&lt;</span><span class="token variable">${HADOOP_CONF}</span>/topology.data
  result<span class="token operator">=</span><span class="token string">""</span>
  <span class="token keyword">while</span> <span class="token function">read</span> line <span class="token punctuation">;</span> <span class="token keyword">do</span>
    ar<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token variable">$line</span> <span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${ar[0]}</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">$nodeArg</span>"</span> <span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${ar[1]}</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">$nodeArg</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
      result<span class="token operator">=</span><span class="token string">"<span class="token variable">${ar[2]}</span>"</span>
    <span class="token keyword">fi</span>
  <span class="token keyword">done</span>
  <span class="token function">shift</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$result</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">echo</span> -n <span class="token string">"/default-rack"</span>
  <span class="token keyword">else</span>
    <span class="token keyword">echo</span> -n <span class="token string">"<span class="token variable">$result</span>"</span>
  <span class="token keyword">fi</span>
  <span class="token keyword">done</span>
</code></pre>
<h3 id="topology-data"><a href="#topology-data" class="headerlink" title="topology.data"></a>topology.data</h3><p>topology.data,格式为：节点（IP或主机名） /交换机xx/机架xx</p>
<pre class=" language-bash"><code class="language-bash">192.168.147.91 tbe192168147091 /dc1/rack1
192.168.147.92 tbe192168147092 /dc1/rack1
192.168.147.93 tbe192168147093 /dc1/rack2
192.168.147.94 tbe192168147094 /dc1/rack3
192.168.147.95 tbe192168147095 /dc1/rack3
192.168.147.96 tbe192168147096 /dc1/rack3
</code></pre>
<blockquote>
<p>需要注意的是，在 Namenode 上，该文件中的节点必须使用 IP，使用主机名无效，而 Jobtracker 上，该文件中的节点必须使用主机名，使用 IP 无效,所以，最好 IP 和主机名都配上。<br>  这样配置后，Namenode启动时候日志是这样的：</p>
<p>INFO org.apache.hadoop.net.NetworkTopology: Adding a new node:  /dc1/rack3/  192.168.147.94:50010</p>
<p>说明hadoop的机架感知已经被启用了。</p>
</blockquote>
<h3 id="HADOOP机架信息命令"><a href="#HADOOP机架信息命令" class="headerlink" title="HADOOP机架信息命令:"></a>HADOOP机架信息命令:</h3><pre class=" language-bash"><code class="language-bash">./hadoop dfsadmin -printTopology 
Rack: /dc1/rack1
   192.168.147.91:50010 <span class="token punctuation">(</span>tbe192168147091<span class="token punctuation">)</span>
   192.168.147.92:50010 <span class="token punctuation">(</span>tbe192168147092<span class="token punctuation">)</span>

Rack: /dc1/rack2
   192.168.147.93:50010 <span class="token punctuation">(</span>tbe192168147093<span class="token punctuation">)</span>

Rack: /dc1/rack3
   192.168.147.94:50010 <span class="token punctuation">(</span>tbe192168147094<span class="token punctuation">)</span>
   192.168.147.95:50010 <span class="token punctuation">(</span>tbe192168147095<span class="token punctuation">)</span>
   192.168.147.96:50010 <span class="token punctuation">(</span>tbe192168147096<span class="token punctuation">)</span>
</code></pre>
<h3 id="增加数据节点，不重启NameNode"><a href="#增加数据节点，不重启NameNode" class="headerlink" title="增加数据节点，不重启NameNode"></a>增加数据节点，不重启NameNode</h3><p>假设Hadoop集群在192.168.147.68上部署了NameNode和DataNode,启用了机架感知，执行bin/hadoop dfsadmin -printTopology看到的结果：</p>
<pre class=" language-bash"><code class="language-bash">Rack: /dc1/rack1
   192.168.147.68:50010 <span class="token punctuation">(</span>dbj68<span class="token punctuation">)</span>
</code></pre>
<p>现在想增加一个物理位置在rack2的数据节点192.168.147.69到集群中，不重启NameNode。<br>首先，修改NameNode节点的topology.data的配置，加入:<code>192.168.147.69 dbj69 /dc1/rack2</code>,保存。</p>
<pre class=" language-bash"><code class="language-bash">192.168.147.68 dbj68 /dc1/rack1
192.168.147.69 dbj69 /dc1/rack2
</code></pre>
<p>然后，<code>sbin/hadoop-daemons.sh start datanode</code> 启动数据节点dbj69,任意节点执行<code>bin/hadoop dfsadmin -printTopology</code> 看到的结果：</p>
<pre class=" language-bash"><code class="language-bash">Rack: /dc1/rack1
   192.168.147.68:50010 <span class="token punctuation">(</span>dbj68<span class="token punctuation">)</span>

Rack: /dc1/rack2
   192.168.147.69:50010 <span class="token punctuation">(</span>dbj69<span class="token punctuation">)</span>
</code></pre>
<p>说明hadoop已经感知到了新加入的节点dbj69。 </p>
<blockquote>
<p>注意：如果不将 dbj69 的配置加入到 topology.data 中，执行 sbin/hadoop-daemons.sh start datanode 启动数据节点 dbj69，datanode 日志中会有异常发生，导致 dbj69 启动不成功。</p>
</blockquote>
<h3 id="节点间距离计算"><a href="#节点间距离计算" class="headerlink" title="节点间距离计算"></a>节点间距离计算</h3><p>有了机架感知，NameNode 就可以画出下图所示的 datanode 网络拓扑图。D1,R1 都是交换机，最底层是 datanode。则 H1 的 rackid=/D1/R1/H1，H1 的 parent 是 R1，R1 的是 D1。这些 rackid 信息可以通过 topology.script.file.name 配置。有了这些 rackid 信息就可以计算出任意两台 datanode 之间的距离，得到最优的存放策略，优化整个集群的网络带宽均衡以及数据最优分配。</p>
<pre class=" language-bash"><code class="language-bash">distance<span class="token punctuation">(</span>/D1/R1/H1,/D1/R1/H1<span class="token punctuation">)</span><span class="token operator">=</span>0  相同的datanode
distance<span class="token punctuation">(</span>/D1/R1/H1,/D1/R1/H2<span class="token punctuation">)</span><span class="token operator">=</span>2  同一rack下的不同datanode
distance<span class="token punctuation">(</span>/D1/R1/H1,/D1/R2/H4<span class="token punctuation">)</span><span class="token operator">=</span>4  同一IDC下的不同datanode
distance<span class="token punctuation">(</span>/D1/R1/H1,/D2/R3/H7<span class="token punctuation">)</span><span class="token operator">=</span>6  不同IDC下的datanode
</code></pre>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文来着网络文件 具体出处不清楚 如有侵权 请联系 <a href="Mailto:xu.binux@gmail.com?Subject=版权问题" target="_blank" rel="external">xu.binux@gmail.com</a></p>
]]></content>
      
        <categories>
            
            <category> Hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7下 Docker 安装]]></title>
      <url>http://binux.cn/2017/05/08/Docker-Instal/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“CentOS 7下 Docker安装”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1、安装CentOS-7"><a href="#1、安装CentOS-7" class="headerlink" title="1、安装CentOS 7"></a>1、安装CentOS 7</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>Ali-OSM</p>
<p><a href="http://mirrors.aliyun.com" target="_blank" rel="external">http://mirrors.aliyun.com</a></p>
<h4 id="安装-略"><a href="#安装-略" class="headerlink" title="安装 略"></a>安装 略</h4><h4 id="确认内核版本"><a href="#确认内核版本" class="headerlink" title="确认内核版本"></a>确认内核版本</h4><p>uname -r</p>
<p>3.10.0-514.16.1.el7.x86_64</p>
<blockquote>
<p>需大于3.10</p>
</blockquote>
<h3 id="2、获取docker国内加速连接"><a href="#2、获取docker国内加速连接" class="headerlink" title="2、获取docker国内加速连接"></a>2、获取docker国内加速连接</h3><p>这里使用阿里的</p>
<p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="external">https://cr.console.aliyun.com/#/accelerator</a></p>
<p><img src="http://on2bs9q7q.bkt.clouddn.com/20170508149422726525135.png" alt="20170508149422726525135.png"></p>
<h3 id="3、添加yum源"><a href="#3、添加yum源" class="headerlink" title="3、添加yum源"></a>3、添加yum源</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/yum.repos.d/docker.repo <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span>
<span class="token punctuation">[</span>dockerrepo<span class="token punctuation">]</span>
name<span class="token operator">=</span>Docker Repository
baseurl<span class="token operator">=</span>https://yum.dockerproject.org/repo/main/centos/7/
enabled<span class="token operator">=</span>1
gpgcheck<span class="token operator">=</span>1
gpgkey<span class="token operator">=</span>https://yum.dockerproject.org/gpg
EOF
</code></pre>
<h3 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h3><p>sudo yum install docker-engine</p>
<h3 id="5、使用加速连接"><a href="#5、使用加速连接" class="headerlink" title="5、使用加速连接"></a>5、使用加速连接</h3><p>新建 docker 文件</p>
<p>echo DOCKER_OPTS=”-H unix:///var/run/docker.sock -H 0.0.0.0:2375 –registry-mirror=国内仓库地址” &gt;&gt; /etc/sysconfig/docker</p>
<p>修改 docker.service 添加 DOCKER_OPTS</p>
<p>vim /lib/systemd/system/docker.service</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
Description<span class="token operator">=</span>Docker Application Container Engine
Documentation<span class="token operator">=</span>https://docs.docker.com
After<span class="token operator">=</span>network-online.target firewalld.service
Wants<span class="token operator">=</span>network-online.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
Type<span class="token operator">=</span>notify
<span class="token comment" spellcheck="true"># the default is not to use systemd for cgroups because the delegate issues still</span>
<span class="token comment" spellcheck="true"># exists and systemd currently does not support the cgroup feature set required</span>
<span class="token comment" spellcheck="true"># for containers run by docker</span>

EnvironmentFile<span class="token operator">=</span>-/etc/sysconfig/docker

ExecStart<span class="token operator">=</span>/usr/bin/dockerd <span class="token variable">$DOCKER_OPTS</span>
<span class="token punctuation">..</span>.
</code></pre>
<h3 id="6、启动"><a href="#6、启动" class="headerlink" title="6、启动"></a>6、启动</h3><p>sudo systemctl start docker</p>
<p>查看 是否启动成功</p>
<p>ps -ef | grep docker</p>
<p>看见参数 则启动成功</p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>接下来 开始愉快的 Docker 之旅吧！</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dcos.io/docs/1.7/administration/installing/custom/system-requirements/install-docker-centos/" target="_blank" rel="external">https://dcos.io/docs/1.7/administration/installing/custom/system-requirements/install-docker-centos/</a></p>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 xbin-store 的一些声明!]]></title>
      <url>http://binux.cn/2017/05/08/xbin-store/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“简单谈谈 xbin-store ”</p>
</blockquote>
<h2 id="项目起因"><a href="#项目起因" class="headerlink" title="项目起因"></a>项目起因</h2><p>项目开始于 2017-01-24 是我寒假闲着没事做的一个项目,当时是想着模仿 JD 写一个分布式商城,能把自己所学的全部知识运用进去。</p>
<p>一方面是我觉得动手实践肯定比单纯看书效果好,虽然过程中会出现很多错误,但在解决各种问题的时候也变相的锻炼了自己的能力。</p>
<p>另一方面我想做个完善的分布式商城 就像 JD 一样的商城 (理想很完美 现实很残酷 选择的目标太庞大)  </p>
<h2 id="为什么开源"><a href="#为什么开源" class="headerlink" title="为什么开源"></a>为什么开源</h2><p>上面说过这个项目起因是我自己做来锻炼自己能力的,但是做着做着我发现凭我一个人的精力是无法完成这么庞大的系统的,于是我选择开源到 Github、OSChina 希望可以找到一些志同道合的朋友一起开发 </p>
<p>还有就是帮助一些对分布式感兴趣的朋友,包括创建群、写运行教程、甚至录视频。</p>
<p>最后我发现Star 1000 OSChina 有奖杯 其实我还挺想要的 不过我也不着急 项目足够完善后 还怕拿不到嘛！</p>
<script src="//git.oschina.net/binu/xbin-store/star_widget_preview"></script>

<h2 id="关于项目进度"><a href="#关于项目进度" class="headerlink" title="关于项目进度"></a>关于项目进度</h2><ul>
<li>2017-01-24 项目开始</li>
<li>2017-02-26 从本地的 Gitblit 迁移到 Github</li>
<li>2017-04-03 发布到 OSChina</li>
<li>2017-04-08 修改为使用 Spring Boot</li>
<li>2017-05-05 新建 xbin-store-cloud 项目 使用 Spring Cloud 重构</li>
<li>…</li>
</ul>
<p>大家可能发现从4月3后 项目基本变化在于架构的变化 从Spring Boot 到 Spring Cloud 架构的变化也反应着我正在学习的内容 技术总是在不停变化着 </p>
<p>其实最主要的原因还是我比较喜欢研究架构方面的内容 兴趣驱使着我学习 也没什么特别爱好了 写代码算是唯一爱好了</p>
<p>所以 如果你是想找个完善的电子商城 那么这个项目不适合你 功能很不完善 这个我自己知道 但是这个不完善是由于没有时间写 整个项目真正写的时间其实2个月都没有 </p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>希望 xbin-store、xbin-store-cloud 可以一直完善下去 奔着 写个 JD 的目标 大步前进</p>
<p>最后祝大家 Enjoy Coding</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 随记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随记 </tag>
            
            <tag> xbin-store </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Lombok 减少 Java Bean 代码]]></title>
      <url>http://binux.cn/2017/04/16/Lombok/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何使用Lombok 来减少 Java Bean 的代码”</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>lombok 就是一款可以简化 get/set/toString/equals 等方法的工具!</p>
<ul>
<li><a href="https://projectlombok.org" target="_blank" rel="external">官网</a></li>
<li><a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="external">GitHub</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="IDE安装"><a href="#IDE安装" class="headerlink" title="IDE安装"></a>IDE安装</h3><ul>
<li>IDEA<br><img src="http://on2bs9q7q.bkt.clouddn.com/20170416149232607786005.png" alt="20170416149232607786005.png"></li>
</ul>
<p>设置<br><img src="http://on2bs9q7q.bkt.clouddn.com/20170418149248619455974.png" alt="20170418149248619455974.png"></p>
<p><strong>Enable annotation processing</strong>勾选</p>
<ul>
<li><p>eclipse / myeclipse 手动安装 lombok (没试过)</p>
<ul>
<li><p>将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下</p>
</li>
<li><p>打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：</p>
<ul>
<li>-Xbootclasspath/a:lombok.jar</li>
<li>-javaagent:lombok.jar</li>
</ul>
</li>
<li><p>重启 eclipse / myeclipse</p>
</li>
</ul>
</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul>
<li><p>Maven 地址</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>Gradle 地址</p>
<pre class=" language-xml"><code class="language-xml">provided "org.projectlombok:lombok:1.16.16"
</code></pre>
</li>
<li><p><a href="https://projectlombok.org/downloads/lombok.jar" target="_blank" rel="external">jar 下载</a>手动添加</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><img src="http://on2bs9q7q.bkt.clouddn.com/2017041614923263831722.png" alt="2017041614923263831722.png"></p>
<p>直接类上加<code>@Data</code>注解 自动生成 getXxx()/setXxx()/toString()/equals(Object)等方法</p>
<h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><h4 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h4><p>如果被注解属值为 <code>null</code> 将抛出 <code>NullPointerException</code></p>
<p>可以修饰的对象为: FIELD(域),METHOD(方法),PARAMETER(参数),LOCAL_VARIABLE(局部变量)</p>
<h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>修饰 Java IO 类，会自动对资源调用close()方法关闭.</p>
<p>可以修饰的对象为: LOCAL_VARIABLE(局部变量)</p>
<h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter / @Setter"></a>@Getter / @Setter</h4><p>自动生成 <code>getXxx()</code>/<code>setXxx()</code></p>
<h5 id="Getter-lazy-true"><a href="#Getter-lazy-true" class="headerlink" title="@Getter(lazy=true)"></a>@Getter(lazy=true)</h5><p>当需要使用<code>get</code>获取的值需要非常大资源计算 可以创建一个<code>private final 变量</code>使用<code>@Getter(lazy=true)</code>修饰 用这次计算的值对其进行赋值。</p>
<p>可以修饰的对象为: LOCAL_VARIABLE(局部变量)，TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>自动生成 <code>toString()</code></p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h4><p>自动生成 <code>equals()</code> 和 <code>hashCode()</code> 方法</p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor"><a href="#NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor" class="headerlink" title="@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor"></a>@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor</h4><p>自动生成 构造无参方法、构造非<code>final</code>或<code>@NonNull</code>修饰对象的有参构造方法、构造全部参数构造方法</p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>组合注解相当于:<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter(全部)</code>、<code>@Setter(非final字段)</code>、<code>@RequiredArgsConstructor</code></p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p>被修饰的会加<code>final</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@AllArgsConstructor</code>、<code>@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)</code>、<code>@Getter</code></p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h4><p>生成一个内部类<code>BuilderExampleBuilder</code>可以使用链式编程创建对象。</p>
<p>如:Person.builder().name(“Binux”).city(“NanJing.”).build();</p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum),CONSTRUCTOR(构造器),METHOD(方法)</p>
<h4 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h4><p>对修饰对象进行<code>try-catch</code> value为<code>Throwable&gt;[] value()</code> 可以声明异常类型</p>
<p>可以修饰的对象为: CONSTRUCTOR(构造器),METHOD(方法)</p>
<h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h4><p>对修饰方法内进行加锁 <code>value</code>值为锁名称 锁为<code>Object</code>类型 </p>
<p>如:<code>private final Object $lock = new Object[0];</code></p>
<p>可以修饰的对象为: METHOD(方法)</p>
<h4 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h4><p>当需要使用<code>get</code>获取的值需要非常大资源计算 可以创建一个<code>private final 变量</code> 用这次计算的值对其进行赋值。</p>
<ul>
<li><p>@CommonsLog</p>
<p>  <code>Creates private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</code></p>
</li>
<li><p>@JBossLog</p>
<p>  <code>Creates private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);</code></p>
</li>
<li><p>@Log</p>
<p>  <code>Creates private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());</code></p>
</li>
<li><p>@Log4j</p>
<p>  <code>Creates private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);</code></p>
</li>
<li><p>@Log4j2</p>
<p>  <code>Creates private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</code></p>
</li>
<li><p>@Slf4j</p>
<p>  <code>Creates private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</code></p>
</li>
<li><p>@XSlf4j</p>
<p>  <code>Creates private static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</code></p>
</li>
</ul>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)</p>
<h2 id="详情请查看"><a href="#详情请查看" class="headerlink" title="详情请查看"></a>详情请查看</h2><p><a href="https://projectlombok.org/features/index.html" target="_blank" rel="external">https://projectlombok.org/features/index.html</a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>lombok 解决了成员类型修改后 还需重新生成getXxx/setXxx()/toString()等方法的问题，还是很实用的。</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>http://binux.cn/2017/03/12/Hello-Hexo/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“Hello Hexo!!!”</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>花了一天的时间把Blog换了个主题 没办法第一眼看了这个主题就特别喜欢然后立马就换了</p>
<p>换主题倒不是太难,但是由于我之前使用的jekyll生成Blog,而这个主题是用Hexo生成Blog</p>
<p>他们的生成方式完全不同,个人感觉Hexo生成方便点,毕竟直接生成HTML静态页面,不用Github服务器在进行处理了</p>
<p>多亏了网上的大神们,没什么难度的完成了迁移,主要纠结我一天时间的是blog图片的选择上面,处女座加纠结狂,导致我看哪张图片都不顺眼</p>
<p>要找一个符合我个人审美的系列图得多难…</p>
<p>最后我实在不想找了,找了个还算可以的字体,操起我几百年没用过的PS,直接用文字作为Blog的背景图片</p>
<p>最后感觉效果还可以,至少看的过去了</p>
<p>就这样吧!</p>
<p>继续看我的源码去了</p>
<p>不想去BAT的程序猿都不是好程序猿 ^-^</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 随记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 RocketMQ集群安装(七)]]></title>
      <url>http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Solr集群,如何对Solr集群集群进行操作,以及使用Java客户端进行操作!”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><strong><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></strong></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="所用虚拟机"><a href="#所用虚拟机" class="headerlink" title="所用虚拟机"></a>所用虚拟机</h3><p>CentOS 6.5 * 4</p>
<p>RocketMQ 版本3.2.6</p>
<p>模式: 多Master多Slave模式，异步复制</p>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">用户名</th>
<th style="text-align:center">密码</th>
<th style="text-align:center">角色</th>
<th style="text-align:center">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">192.168.1.1</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer1,broker-a</td>
<td style="text-align:center">Master1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">192.168.1.2</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer2,broker-b</td>
<td style="text-align:center">Master2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">192.168.1.3</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer3,broker-a-s</td>
<td style="text-align:center">Slave1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">192.168.1.4</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer4,broker-b-s</td>
<td style="text-align:center">Slave2</td>
</tr>
</tbody>
</table>
<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><ul>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9773419" target="_blank" rel="external">alibaba-rocketmq-3.2.6.tar.gz</a></li>
<li><a href="https://github.com/JoeyFan/rocketmq-console" target="_blank" rel="external">rocketmq-console</a></li>
</ul>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装-4台同时"><a href="#安装-4台同时" class="headerlink" title="安装(4台同时)"></a>安装(4台同时)</h3><h4 id="安装JDK-略"><a href="#安装JDK-略" class="headerlink" title="安装JDK 略"></a>安装JDK 略</h4><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf alibaba-rocketmq-3.2.6.tar.gz -C /usr/local
<span class="token function">cd</span> /usr/local
<span class="token function">ln</span> -s alibaba-rocketmq rocketmq
</code></pre>
<h4 id="创建存储路径"><a href="#创建存储路径" class="headerlink" title="创建存储路径"></a>创建存储路径</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/local/rocketmq/store
<span class="token function">mkdir</span> /usr/local/rocketmq/store/commitlog
<span class="token function">mkdir</span> /usr/local/rocketmq/store/consumequeue
<span class="token function">mkdir</span> /usr/local/rocketmq/store/index
</code></pre>
<h4 id="配置RocketMQ配置文件"><a href="#配置RocketMQ配置文件" class="headerlink" title="配置RocketMQ配置文件"></a>配置RocketMQ配置文件</h4><pre class=" language-bash"><code class="language-bash">vim /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties
vim /usr/local/rocketmq/conf/2m-2s-async/broker-b.properties
vim /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties
vim /usr/local/rocketmq/conf/2m-2s-async/broker-b-s.properties
</code></pre>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#所属集群名字 （注意不要有空格）</span>
brokerClusterName<span class="token operator">=</span>rocketmq-cluster
<span class="token comment" spellcheck="true">#broker名字，注意此处不同的配置文件填写的不一样 192.168.1.1/192.168.1.3 填broker-a 192.168.1.2/192.168.1.4 填broker-b</span>
brokerName<span class="token operator">=</span><span class="token punctuation">(</span>broker-a<span class="token operator">|</span>broker-b<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#0 表示 Master，>0 表示 Slave  192.168.1.1/192.168.1.2 填0 192.168.1.3/192.168.1.4 填1</span>
brokerId<span class="token operator">=</span>0
<span class="token comment" spellcheck="true">#本机IP 默认识别 多块网卡会导致识别错误</span>
brokerIP1<span class="token operator">=</span>本机IP
<span class="token comment" spellcheck="true">#nameServer地址，分号分割</span>
namesrvAddr<span class="token operator">=</span>192.168.1.1:9876<span class="token punctuation">;</span>192.168.1.2:9876<span class="token punctuation">;</span>192.168.1.3:9876<span class="token punctuation">;</span>192.168.1.4:9876
<span class="token comment" spellcheck="true">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span>
defaultTopicQueueNums<span class="token operator">=</span>4
<span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span>
autoCreateTopicEnable<span class="token operator">=</span>true
<span class="token comment" spellcheck="true">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span>
autoCreateSubscriptionGroup<span class="token operator">=</span>true
<span class="token comment" spellcheck="true">#Broker 对外服务的监听端口</span>
listenPort<span class="token operator">=</span>10911
<span class="token comment" spellcheck="true">#删除文件时间点，默认凌晨 4点</span>
deleteWhen<span class="token operator">=</span>04
<span class="token comment" spellcheck="true">#文件保留时间，默认 48 小时</span>
fileReservedTime<span class="token operator">=</span>120
<span class="token comment" spellcheck="true">#commitLog每个文件的大小默认1G</span>
mapedFileSizeCommitLog<span class="token operator">=</span>1073741824
<span class="token comment" spellcheck="true">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span>
mapedFileSizeConsumeQueue<span class="token operator">=</span>300000
<span class="token comment" spellcheck="true">#destroyMapedFileIntervalForcibly=120000</span>
<span class="token comment" spellcheck="true">#redeleteHangedFileInterval=120000</span>
<span class="token comment" spellcheck="true">#检测物理文件磁盘空间</span>
diskMaxUsedSpaceRatio<span class="token operator">=</span>88

<span class="token comment" spellcheck="true">#存储路径</span>
storePathRootDir<span class="token operator">=</span>/usr/local/rocketmq/store
<span class="token comment" spellcheck="true">#commitLog 存储路径</span>
storePathCommitLog<span class="token operator">=</span>/usr/local/rocketmq/store/commitlog
<span class="token comment" spellcheck="true">#消费队列存储路径存储路径</span>
storePathConsumeQueue<span class="token operator">=</span>/usr/local/rocketmq/store/consumequeue
<span class="token comment" spellcheck="true">#消息索引存储路径</span>
storePathIndex<span class="token operator">=</span>/usr/local/rocketmq/store/index
<span class="token comment" spellcheck="true">#checkpoint 文件存储路径</span>
storeCheckpoint<span class="token operator">=</span>/usr/local/rocketmq/store/checkpoint
<span class="token comment" spellcheck="true">#abort 文件存储路径</span>
abortFile<span class="token operator">=</span>/usr/local/rocketmq/store/abort
<span class="token comment" spellcheck="true">#限制的消息大小</span>
maxMessageSize<span class="token operator">=</span>65536

<span class="token comment" spellcheck="true">#flushCommitLogLeastPages=4</span>
<span class="token comment" spellcheck="true">#flushConsumeQueueLeastPages=2</span>
<span class="token comment" spellcheck="true">#flushCommitLogThoroughInterval=10000</span>
<span class="token comment" spellcheck="true">#flushConsumeQueueThoroughInterval=60000</span>

<span class="token comment" spellcheck="true">#Broker 的角色  192.168.1.1/192.168.1.2 填ASYNC_MASTER 192.168.1.3/192.168.1.4 填SLAVE</span>
<span class="token comment" spellcheck="true">#- ASYNC_MASTER 异步复制Master</span>
<span class="token comment" spellcheck="true">#- SYNC_MASTER 同步双写Master</span>
<span class="token comment" spellcheck="true">#- SLAVE</span>
brokerRole<span class="token operator">=</span>ASYNC_MASTER

<span class="token comment" spellcheck="true">#刷盘方式</span>
<span class="token comment" spellcheck="true">#- ASYNC_FLUSH 异步刷盘</span>
<span class="token comment" spellcheck="true">#- SYNC_FLUSH 同步刷盘</span>
flushDiskType<span class="token operator">=</span>ASYNC_FLUSH

<span class="token comment" spellcheck="true">#checkTransactionMessageEnable=false</span>
<span class="token comment" spellcheck="true">#发消息线程池数量</span>
<span class="token comment" spellcheck="true">#sendMessageThreadPoolNums=128</span>
<span class="token comment" spellcheck="true">#拉消息线程池数量</span>
<span class="token comment" spellcheck="true">#pullMessageThreadPoolNums=128</span>
<span class="token comment" spellcheck="true">#filterNums</span>
<span class="token comment" spellcheck="true">#filterServerNums=1</span>
</code></pre>
<h4 id="修改日志配置文件"><a href="#修改日志配置文件" class="headerlink" title="修改日志配置文件"></a>修改日志配置文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/rocketmq/logs
<span class="token function">cd</span> /usr/local/rocketmq/conf <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> -i <span class="token string">'s#<span class="token variable">${user.home}</span>#/usr/local/rocketmq#g'</span> *.xml
</code></pre>
<h4 id="修改启动脚本参数（测试时虚拟机内存不够修改）"><a href="#修改启动脚本参数（测试时虚拟机内存不够修改）" class="headerlink" title="修改启动脚本参数（测试时虚拟机内存不够修改）"></a>修改启动脚本参数（测试时虚拟机内存不够修改）</h4><pre class=" language-bash"><code class="language-bash">vim /usr/local/rocketmq/bin/runbroker.sh
JAVA_OPT<span class="token operator">=</span><span class="token string">"<span class="token variable">${JAVA_OPT}</span> -server -Xms1g -Xmx1g -Xmn512m - XX:PermSize=128m -XX:MaxPermSize=320m"</span>

vim /usr/local/rocketmq/bin/runserver.sh
JAVA_OPT<span class="token operator">=</span><span class="token string">"<span class="token variable">${JAVA_OPT}</span> -server -Xms1g -Xmx1g -Xmn512m - XX:PermSize=128m -XX:MaxPermSize=320m"</span>
</code></pre>
<h4 id="启动NameServer"><a href="#启动NameServer" class="headerlink" title="启动NameServer"></a>启动NameServer</h4><p>nohup sh /usr/local/rocketmq/bin/mqnamesrv &amp;</p>
<h5 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h5><p>tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log</p>
<h4 id="启动BrokerServer-多Master多Slave模式，异步复制"><a href="#启动BrokerServer-多Master多Slave模式，异步复制" class="headerlink" title="启动BrokerServer 多Master多Slave模式，异步复制"></a>启动BrokerServer 多Master多Slave模式，异步复制</h4><blockquote>
<p>A -192.168.1.1|B-192.168.1.2|C-192.168.1.3|B-192.168.1.4</p>
</blockquote>
<p>启动命令:</p>
<pre class=" language-bash"><code class="language-bash">A:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log

B:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-b.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log

C:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log

D:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-b-s.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log
</code></pre>
<h4 id="安装Tomcat配置RocketMQ-Console"><a href="#安装Tomcat配置RocketMQ-Console" class="headerlink" title="安装Tomcat配置RocketMQ Console"></a>安装Tomcat配置RocketMQ Console</h4><p>复制rocketmq-console.war到192.168.1.1机器的/usr/local/tomcat/webapps/下</p>
<p>vim /usr/local/tomcat/webapps/rocketmq-console/WEB-INF/classes/config.properties</p>
<p>rocketmq.namesrv.addr=192.168.1.1:9876;192.168.1.2:9876;192.168.1.3:9876;192.168.1.4:9876</p>
<h5 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h5><p>/usr/local/tomcat/bin/startup.sh</p>
<h4 id="防火墙配置："><a href="#防火墙配置：" class="headerlink" title="防火墙配置："></a>防火墙配置：</h4><p>vim /etc/sysconfig/iptables</p>
<pre class=" language-bash"><code class="language-bash">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 9876 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 10911 -j ACCEPT
</code></pre>
<p>重启防火墙</p>
<p>service iptables restart</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然RocketMQ开源的是被阉割版 但是现在项目已经捐献给Apache了 现在已经发布了4.0 相信这款消息中间件以后一定会大放光彩</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> XBin-Store </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Solr集群安装(六)]]></title>
      <url>http://binux.cn/2017/03/06/Solr-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Solr集群,如何对Solr集群集群进行操作,以及使用Java客户端进行操作!”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><strong><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></strong></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="所用虚拟机"><a href="#所用虚拟机" class="headerlink" title="所用虚拟机"></a>所用虚拟机</h3><p>CentOS 6.5</p>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Linux-Solr-img1.png" alt="IP"></center><br><center>IP</center>

<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><ul>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9772212" target="_blank" rel="external">apache-tomcat-7.0.47.tar.gz</a></li>
<li><a href="http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">zookeeper-3.4.6</a></li>
<li><a href="https://archive.apache.org/dist/lucene/solr/4.10.3/solr-4.10.3.tgz" target="_blank" rel="external">solr-4.10.3.tgz</a></li>
<li><a href="http://download.csdn.net/detail/zhuzhenlong/9733932" target="_blank" rel="external">IK Analyzer 2012FF_hf1.zip</a></li>
</ul>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装JDK-略"><a href="#安装JDK-略" class="headerlink" title="安装JDK 略"></a>安装JDK 略</h4><h4 id="Zookeeper集群安装"><a href="#Zookeeper集群安装" class="headerlink" title="Zookeeper集群安装"></a>Zookeeper集群安装</h4><p><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></p>
<h4 id="Tomcat安装-四台同时"><a href="#Tomcat安装-四台同时" class="headerlink" title="Tomcat安装(四台同时)"></a>Tomcat安装(四台同时)</h4><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p>tar -zxvf apache-tomcat-7.0.47.tar.gz</p>
<h5 id="把解压后的Tomcat复制"><a href="#把解压后的Tomcat复制" class="headerlink" title="把解压后的Tomcat复制"></a>把解压后的Tomcat复制</h5><p>/usr/local/solr/tomcat</p>
<h5 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h5><p>vim /usr/local/solr/tomcat/conf/server/server.xml</p>
<p>改为80端口</p>
<pre class=" language-xml"><code class="language-xml">71行
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>
               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>
               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<h5 id="把solr的压缩包上传到服务器。并解压。"><a href="#把solr的压缩包上传到服务器。并解压。" class="headerlink" title="把solr的压缩包上传到服务器。并解压。"></a>把solr的压缩包上传到服务器。并解压。</h5><h4 id="Solr安装"><a href="#Solr安装" class="headerlink" title="Solr安装"></a>Solr安装</h4><h5 id="复制war包"><a href="#复制war包" class="headerlink" title="复制war包"></a>复制war包</h5><p>把/root/solr-4.10.3/dist/solr-4.10.3.war包部署到tomcat/webapps/下。并改名为ROOT.war</p>
<p>rm -rf /usr/local/solr/tomcat/webapps/ROOT</p>
<p>启动tomcat自动解压。关闭tomcat。删除ROOT.war.</p>
<h5 id="复制Jar包"><a href="#复制Jar包" class="headerlink" title="复制Jar包"></a>复制Jar包</h5><p>把/root/solr-4.10.3/example/lib/ext 目录下所有的jar包复制到solr工程中。</p>
<p>cp /root/solr-4.10.3/example/lib/ext/* /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/lib/</p>
<h5 id="创建solrhome"><a href="#创建solrhome" class="headerlink" title="创建solrhome"></a>创建solrhome</h5><blockquote>
<p>Solrhome是存放solr服务器所有配置文件的目录。</p>
</blockquote>
<p>cp -r /root/solr-4.10.3/example/solr /usr/local/solr/solrhome</p>
<h5 id="修改Solr配置文件"><a href="#修改Solr配置文件" class="headerlink" title="修改Solr配置文件"></a>修改Solr配置文件</h5><p>vim /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/web.xml</p>
<pre class=" language-bash"><code class="language-bash">第41行
<span class="token operator">&lt;</span>env-entry<span class="token operator">></span>
   <span class="token operator">&lt;</span>env-entry-name<span class="token operator">></span>solr/home<span class="token operator">&lt;</span>/env-entry-name<span class="token operator">></span>
   <span class="token operator">&lt;</span>env-entry-value<span class="token operator">></span>/usr/local/solr/solrhome<span class="token operator">&lt;</span>/env-entry-value<span class="token operator">></span>
   <span class="token operator">&lt;</span>env-entry-type<span class="token operator">></span>java.lang.String<span class="token operator">&lt;</span>/env-entry-type<span class="token operator">></span>
<span class="token operator">&lt;</span>/env-entry<span class="token operator">></span>
</code></pre>
<h4 id="配置中文分词"><a href="#配置中文分词" class="headerlink" title="配置中文分词"></a>配置中文分词</h4><h5 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h5><p>IK Analyzer 2012FF_hf1.zip</p>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><p>cp IKAnalyzer2012FF_u1.jar /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/lib/</p>
<p>cp IKAnalyzer.cfg.xml ext_stopword.dic mydict.dic /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/classes</p>
<blockquote>
<p>扩展词典及停用词词典的字符集必须是utf-8。不能使用windows记事本编辑。</p>
</blockquote>
<h5 id="配置fieldType"><a href="#配置fieldType" class="headerlink" title="配置fieldType"></a>配置fieldType</h5><p>vim /usr/local/solr/solrhome/collection1/conf/schema.xml</p>
<blockquote>
<p>跳转到文档末尾：G</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text_ik<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>solr.TextField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>analyzer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wltea.analyzer.lucene.IKAnalyzer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldType</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="业务字段配置"><a href="#业务字段配置" class="headerlink" title="业务字段配置"></a>业务字段配置</h5><blockquote>
<p>业务字段判断标准：</p>
<ul>
<li>在搜索时是否需要在此字段上进行搜索。例如：商品名称、商品的卖点、商品的描述</li>
<li>后续的业务是否需要用到此字段。例如：商品id。</li>
</ul>
</blockquote>
<p>如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_title<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text_ik<span class="token punctuation">"</span></span> <span class="token attr-name">indexed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">stored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_price<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span> <span class="token attr-name">indexed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">stored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_image<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">indexed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">stored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
等......
</code></pre>
<h4 id="配置Solr集群"><a href="#配置Solr集群" class="headerlink" title="配置Solr集群"></a>配置Solr集群</h4><h5 id="上传配置文件"><a href="#上传配置文件" class="headerlink" title="上传配置文件"></a>上传配置文件</h5><p>cd solr-4.10.3/example/scripts/cloud-scripts/</p>
<p>./zkcli.sh -zkhost 192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181 -cmd upconfig -confdir /usr/local/solr/solrhome/collection1/conf -confname myconf</p>
<h5 id="登陆zookeeper服务器查询配置文件："><a href="#登陆zookeeper服务器查询配置文件：" class="headerlink" title="登陆zookeeper服务器查询配置文件："></a>登陆zookeeper服务器查询配置文件：</h5><p>./zkCli.sh</p>
<h5 id="修改solr-xml监控端口为80端口"><a href="#修改solr-xml监控端口为80端口" class="headerlink" title="修改solr.xml监控端口为80端口"></a>修改solr.xml监控端口为80端口</h5><p>vim /usr/local/solr/solrhome/solr.xml</p>
<pre class=" language-xml"><code class="language-xml">31行:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solrcloud</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>str</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${host:}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>str</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostPort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${jetty.port:80}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>int</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>str</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostContext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${hostContext:solr}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>str</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zkClientTimeout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${zkClientTimeout:30000}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>int</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>genericCoreNodeNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${genericCoreNodeNames:true}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>solrcloud</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="和zookeeper关联"><a href="#和zookeeper关联" class="headerlink" title="和zookeeper关联"></a>和zookeeper关联</h5><p>修改每一台solr的tomcat 的 bin目录下catalina.sh文件中加入DzkHost指定zookeeper服务器地址：<br>JAVA_OPTS=”-DzkHost=192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181”</p>
<blockquote>
<p>可以使用vim的查找功能查找到JAVA_OPTS的定义的位置</p>
</blockquote>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动每一台solr的tomcat服务</p>
<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>访问：<a href="http://192.168.1.11/admin/collections?action=CREATE&amp;name=collection2&amp;numShards=2&amp;replicationFactor=2" target="_blank" rel="external">http://192.168.1.11/admin/collections?action=CREATE&amp;name=collection2&amp;numShards=2&amp;replicationFactor=2</a></p>
<blockquote>
<p>新建collection2将集群分为两片，每片两个副本。</p>
</blockquote>
<p>访问：<a href="http://192.168.1.11/admin/collections?action=DELETE&amp;name=collection1" target="_blank" rel="external">http://192.168.1.11/admin/collections?action=DELETE&amp;name=collection1</a></p>
<blockquote>
<p>删除 collection1</p>
</blockquote>
<h2 id="solrJ访问solrCloud"><a href="#solrJ访问solrCloud" class="headerlink" title="solrJ访问solrCloud"></a>solrJ访问solrCloud</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolrCloudTest</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// zookeeper地址</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String zkHostString <span class="token operator">=</span> <span class="token string">"192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// collection默认名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String defaultCollection <span class="token operator">=</span> <span class="token string">"collection2"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// cloudSolrServer对象</span>
    <span class="token keyword">private</span> CloudSolrServer cloudSolrServer<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>
    <span class="token comment" spellcheck="true">// 测试方法之前构造 CloudSolrServer</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cloudSolrServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloudSolrServer</span><span class="token punctuation">(</span>zkHostString<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">setDefaultCollection</span><span class="token punctuation">(</span>defaultCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 向solrCloud上创建索引</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateIndexToSolrCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SolrServerException<span class="token punctuation">,</span>
             IOException <span class="token punctuation">{</span>

        SolrInputDocument document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SolrInputDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"100001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token comment" spellcheck="true">// 搜索索引</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSearchIndexFromSolrCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        SolrQuery query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SolrQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        query<span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token string">"*:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
             QueryResponse response <span class="token operator">=</span> cloudSolrServer<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
             SolrDocumentList docs <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文档个数："</span> <span class="token operator">+</span> docs<span class="token punctuation">.</span><span class="token function">getNumFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询时间："</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getQTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token keyword">for</span> <span class="token punctuation">(</span>SolrDocument doc <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 ArrayList title <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">)</span> doc<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 String id <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> doc<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id: "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title: "</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SolrServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknowned Exception!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token comment" spellcheck="true">// 删除索引</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteIndexFromSolrCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SolrServerException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 根据id删除</span>
        UpdateResponse response <span class="token operator">=</span> cloudSolrServer<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 根据多个id删除</span>
        <span class="token comment" spellcheck="true">// cloudSolrServer.deleteById(ids);</span>
        <span class="token comment" spellcheck="true">// 自动查询条件删除</span>
        <span class="token comment" spellcheck="true">// cloudSolrServer.deleteByQuery("product_keywords:教程");</span>
        <span class="token comment" spellcheck="true">// 提交</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>solr 主要是用来搜索的 不需要自己在另外写 集群的安装也不算太麻烦 就是机器用的多了点 要7台虚拟机 实在没有这么多虚拟机的可以在一台机器搭伪分布式</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> XBin-Store </tag>
            
            <tag> Solr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)]]></title>
      <url>http://binux.cn/2017/03/05/FastDFS-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装FastDFS,集群有点麻烦 可能以后会写篇 毕竟我个人开发是足够的”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><strong><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></strong></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基于CentOS6.5安装</p>
<h3 id="FastDFS方案"><a href="#FastDFS方案" class="headerlink" title="FastDFS方案"></a>FastDFS方案</h3><table>
<thead>
<tr>
<th style="text-align:center">主机IP</th>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">192.168.1.1</td>
<td style="text-align:center">trackerd</td>
</tr>
<tr>
<td style="text-align:center">192.168.1.2</td>
<td style="text-align:center">storaged</td>
</tr>
</tbody>
</table>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="下载软件："><a href="#下载软件：" class="headerlink" title="下载软件："></a>下载软件：</h4><ul>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771164" target="_blank" rel="external">libfastcommon-master.zip</a></li>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771173" target="_blank" rel="external">FastDFS_v5.05.tar</a></li>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771174" target="_blank" rel="external">fastdfs-nginx-module_v1.16.tar</a></li>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771212" target="_blank" rel="external">fastdfs_client_v1.24.jar</a></li>
</ul>
<h4 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h4><p>命令：yum install make cmake gcc gcc-c++</p>
<h3 id="解压libfastcommon"><a href="#解压libfastcommon" class="headerlink" title="解压libfastcommon"></a>解压libfastcommon</h3><p>命令：unzip libfastcommon-master.zip -d /usr/local/fast/</p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote>
<p>在学习时可以不用考虑防火墙的问题</p>
</blockquote>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装libfastcommon"><a href="#安装libfastcommon" class="headerlink" title="安装libfastcommon"></a>安装libfastcommon</h3><pre><code>./make.sh 
./make.sh install
mkdir -p /usr/lib64
install -m 755 libfastcommon.so /usr/lib64
mkdir -p /usr/include/fastcommon
</code></pre><p>打印：</p>
<pre><code>install -m 644 common_define.h hash.h chain.h logger.h base64.h shared_func.h pthread_func.h ini_file_reader.h _os_bits.h sockopt.h sched_thread.h http_func.h md5.h local_ip_func.h avl_tree.h ioevent.h ioevent_loop.h fast_task_queue.h fast_timer.h process_ctrl.h fast_mblock.h connection_pool.h /usr/include/fastcommon
</code></pre><blockquote>
<p>注意安装的路径：libfastcommon默认安装到了/usr/lib64/这个位置。</p>
</blockquote>
<h3 id="进行软链接创建"><a href="#进行软链接创建" class="headerlink" title="进行软链接创建"></a>进行软链接创建</h3><pre><code>ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so
ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so
ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so
</code></pre><h3 id="安装FastDFS（同时进行）"><a href="#安装FastDFS（同时进行）" class="headerlink" title="安装FastDFS（同时进行）"></a>安装FastDFS（同时进行）</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>tar -zxvf FastDFS_v5.05.tar.gz -C /usr/local/fast/</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>cd /usr/local/fast/FastDFS
./make.sh
./make.sh install
</code></pre><p>打印：</p>
<pre><code>mkdir -p /usr/bin
mkdir -p /etc/fdfs
cp -f fdfs_trackerd /usr/bin
if [ ! -f /etc/fdfs/tracker.conf.sample ]; then cp -f ../conf/tracker.conf /etc/fdfs/tracker.conf.sample; fi
mkdir -p /usr/bin
mkdir -p /etc/fdfs
cp -f fdfs_storaged  /usr/bin
if [ ! -f /etc/fdfs/storage.conf.sample ]; then cp -f ../conf/storage.conf /etc/fdfs/storage.conf.sample; fi
mkdir -p /usr/bin
mkdir -p /etc/fdfs
mkdir -p /usr/lib64
cp -f fdfs_monitor fdfs_test fdfs_test1 fdfs_crc32 fdfs_upload_file fdfs_download_file fdfs_delete_file fdfs_file_info fdfs_appender_test fdfs_appender_test1 fdfs_append_file fdfs_upload_appender /usr/bin
if [ 0 -eq 1 ]; then cp -f libfdfsclient.a /usr/lib64; fi
if [ 1 -eq 1 ]; then cp -f libfdfsclient.so /usr/lib64; fi
mkdir -p /usr/include/fastdfs
cp -f ../common/fdfs_define.h ../common/fdfs_global.h ../common/mime_file_parser.h ../common/fdfs_http_shared.h ../tracker/tracker_types.h ../tracker/tracker_proto.h ../tracker/fdfs_shared_func.h ../storage/trunk_mgr/trunk_shared.h tracker_client.h storage_client.h storage_client1.h client_func.h client_global.h fdfs_client.h /usr/include/fastdfs
if [ ! -f /etc/fdfs/client.conf.sample ]; then cp -f ../conf/client.conf /etc/fdfs/client.conf.sample; fi
</code></pre><h4 id="服务脚本在："><a href="#服务脚本在：" class="headerlink" title="服务脚本在："></a>服务脚本在：</h4><pre><code>ls /etc/init.d/ | grep fdfs
fdfs_storaged
fdfs_trackerd
</code></pre><h4 id="配置文件在："><a href="#配置文件在：" class="headerlink" title="配置文件在："></a>配置文件在：</h4><pre><code>ls /etc/fdfs/
client.conf.sample  storage.conf.sample  tracker.conf.sample
</code></pre><h4 id="命令行工具在-usr-bin-目录下"><a href="#命令行工具在-usr-bin-目录下" class="headerlink" title="命令行工具在/usr/bin/目录下"></a>命令行工具在/usr/bin/目录下</h4><pre><code>ls /usr/bin/ | grep fdfs
fdfs_appender_test
fdfs_appender_test1
fdfs_append_file
fdfs_crc32
fdfs_delete_file
fdfs_download_file
fdfs_file_info
fdfs_monitor
fdfs_storaged
fdfs_test
fdfs_test1
fdfs_trackerd
fdfs_upload_appender
fdfs_upload_file
</code></pre><blockquote>
<p>因为FastDFS服务脚本设置的bin目录为/usr/local/bin/下,但是实际我们安装在了/usr/bin/下面。所以我们需要修改FastDFS配置文件中的路径，也就是需要修改俩 个配置文件：</p>
<ul>
<li>命令：vim /etc/init.d/fdfs_storaged</li>
<li>进行全局替换命令：%s+/usr/local/bin+/usr/bin</li>
<li>命令：vim /etc/init.d/fdfs_trackerd</li>
<li>进行全局替换命令：%s+/usr/local/bin+/usr/bin</li>
</ul>
</blockquote>
<h2 id="配置跟踪器（trackerd）"><a href="#配置跟踪器（trackerd）" class="headerlink" title="配置跟踪器（trackerd）"></a>配置跟踪器（trackerd）</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre><code>cd /etc/fdfs/
cp tracker.conf.sample tracker.conf
vim /etc/fdfs/tracker.conf
</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre><code># the base path to store data and log files
base_path=/fastdfs/tracker
</code></pre><p> mkdir -p /fastdfs/tracker</p>
<blockquote>
<ul>
<li>目录命令：cd /fastdfs/tracker/ &amp;&amp; ll</li>
<li>启动tracker命令：/etc/init.d/fdfs_trackerd start</li>
<li>查看进程命令：ps -el | grep fdfs</li>
<li>停止tracker命令：/etc/init.d/fdfs_trackerd stop</li>
</ul>
</blockquote>
<h4 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h4><h5 id="启动前："><a href="#启动前：" class="headerlink" title="启动前："></a>启动前：</h5><pre><code>cd /fastdfs/tracker/ &amp;&amp; ll
total 0
</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>/etc/init.d/fdfs_trackerd start</p>
<h5 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h5><pre><code>cd /fastdfs/tracker/ &amp;&amp; ll
total 8
drwxr-xr-x. 2 root root 4096 Dec 14 20:48 data
drwxr-xr-x. 2 root root 4096 Dec 14 20:48 logs
</code></pre><blockquote>
<p>可以设置开机启动跟踪器：（一般生产环境需要开机启动一些服务，如keepalived、Nginx、tomcat等等）</p>
<ul>
<li>命令：vim /etc/rc.d/rc.local</li>
<li>加入配置：/etc/init.d/fdfs_trackerd start</li>
</ul>
</blockquote>
<h2 id="配置FastDFS存储（storaged）"><a href="#配置FastDFS存储（storaged）" class="headerlink" title="配置FastDFS存储（storaged）"></a>配置FastDFS存储（storaged）</h2><h3 id="修改配置文件storage-conf"><a href="#修改配置文件storage-conf" class="headerlink" title="修改配置文件storage.conf"></a>修改配置文件storage.conf</h3><blockquote>
<ul>
<li>进入文件目录：cd /etc/fdfs/，进行copy storage文件一份</li>
<li>命令：cd /etc/fdfs/</li>
<li>命令：cp storage.conf.sample storage.conf</li>
<li>命令：vim /etc/fdfs/storage.conf</li>
</ul>
</blockquote>
<h3 id="修改内容："><a href="#修改内容：" class="headerlink" title="修改内容："></a>修改内容：</h3><pre><code>base_path=/fastdfs/storage
store_path0=/fastdfs/storage
tracker_server=192.168.1.1:22122
http.server_port=80
</code></pre><h3 id="创建存储目录："><a href="#创建存储目录：" class="headerlink" title="创建存储目录："></a>创建存储目录：</h3><p>mkdir -p /fastdfs/storage</p>
<h3 id="启动存储（storage）"><a href="#启动存储（storage）" class="headerlink" title="启动存储（storage）"></a>启动存储（storage）</h3><p>命令：/etc/init.d/fdfs_storaged start</p>
<h3 id="查看是否启动成功-1"><a href="#查看是否启动成功-1" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3><p>ps -ef | grep fdfs</p>
<blockquote>
<p>可以设置开机启动跟踪器：（一般生产环境需要开机启动一些服务，如keepaliv ed、linux、tomcat等等）</p>
<ul>
<li>命令：vim /etc/rc.d/rc.local</li>
<li>加入配置：/etc/init.d/fdfs_storaged start</li>
</ul>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="首先我们在跟踪器（tracker）里copy一份client-conf文件。"><a href="#首先我们在跟踪器（tracker）里copy一份client-conf文件。" class="headerlink" title="首先我们在跟踪器（tracker）里copy一份client.conf文件。"></a>首先我们在跟踪器（tracker）里copy一份client.conf文件。</h3><p>命令：cd /etc/fdfs/</p>
<p>命令：cp client.conf.sample client.conf</p>
<h3 id="编辑client-conf文件"><a href="#编辑client-conf文件" class="headerlink" title="编辑client.conf文件"></a>编辑client.conf文件</h3><p>vim /etc/fdfs/client.conf</p>
<h3 id="修改内容：-1"><a href="#修改内容：-1" class="headerlink" title="修改内容："></a>修改内容：</h3><pre><code>base_path=/fastdfs/tracker
tracker_server=**192.168.1.1**:22122
</code></pre><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><pre><code>/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/FastDFS/libfastcommon-master.zip
</code></pre><p>打印：</p>
<p>group1/M00/00/00/2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip</p>
<h3 id="存储器查看文件"><a href="#存储器查看文件" class="headerlink" title="存储器查看文件"></a>存储器查看文件</h3><pre><code>cd /fastdfs/storage/data/00/00/ &amp;&amp; ll
total 1
-rw-r--r--. 1 root root 102378 Dec 14 21:00 2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip
</code></pre><h2 id="FastDFS与Nginx整合（Storage）"><a href="#FastDFS与Nginx整合（Storage）" class="headerlink" title="FastDFS与Nginx整合（Storage）"></a>FastDFS与Nginx整合（Storage）</h2><h3 id="解压Nginx"><a href="#解压Nginx" class="headerlink" title="解压Nginx"></a>解压Nginx</h3><p>tar -zxvf nginx-1.6.2.tar.gz</p>
<h3 id="安装fastdfs-nginx-module-v1-16-tar-gz"><a href="#安装fastdfs-nginx-module-v1-16-tar-gz" class="headerlink" title="安装fastdfs-nginx-module_v1.16.tar.gz"></a>安装fastdfs-nginx-module_v1.16.tar.gz</h3><pre><code>tar -zxvf FastDFS/fastdfs-nginx-module_v1.16.tar.gz -C /usr/local/fast/
cd /usr/local/fast/fastdfs-nginx-module/src/
</code></pre><h3 id="编辑配置文件config"><a href="#编辑配置文件config" class="headerlink" title="编辑配置文件config"></a>编辑配置文件config</h3><p>vim /usr/local/fast/fastdfs-nginx-module/src/config</p>
<pre><code>修改前：
CORE_INCS=&quot;$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/&quot;
修改后：
CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;
</code></pre><h3 id="FastDFS与Nginx进行集成"><a href="#FastDFS与Nginx进行集成" class="headerlink" title="FastDFS与Nginx进行集成"></a>FastDFS与Nginx进行集成</h3><p>cd nginx-1.6.2/</p>
<p>./configure –add-module=/usr/local/fast/fastdfs-nginx-module/src/</p>
<p>make &amp;&amp; make install</p>
<blockquote>
<p>如报错 自行安装<strong>pcre</strong></p>
</blockquote>
<h3 id="复制、修改配置文件"><a href="#复制、修改配置文件" class="headerlink" title="复制、修改配置文件"></a>复制、修改配置文件</h3><p>cp /usr/local/fast/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</p>
<p>vim /etc/fdfs/mod_fastdfs.conf</p>
<pre><code>connect_timeout=10
tracker_server=192.168.1.1:22122
url_have_group_name = true
store_path0=/fastdfs/storage
</code></pre><h3 id="复制FastDFS里的2个文件"><a href="#复制FastDFS里的2个文件" class="headerlink" title="复制FastDFS里的2个文件"></a>复制FastDFS里的2个文件</h3><p>cd /usr/local/fast/FastDFS/conf/</p>
<p>cp http.conf mime.types /etc/fdfs/</p>
<h3 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h3><p>ln -s /fastdfs/storage/data/ /fastdfs/storage/data/M00</p>
<h3 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h3><p>vim nginx.conf</p>
<pre><code>listen 80;
server_name localhost;
location ~/group([0-9])/M00 {
    ngx_fastdfs_module;
}
</code></pre><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p> /usr/local/nginx/sbin/nginx</p>
<blockquote>
<p>报错:  error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory</p>
</blockquote>
<ul>
<li>32位系统 ln -s /usr/local/lib/libpcre.so.1 /lib</li>
<li>64位系统ln -s /usr/local/lib/libpcre.so.1 /lib64</li>
</ul>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>访问 <a href="http://192.168.1.2/group1/M00/00/00/2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip" target="_blank" rel="external">http://192.168.1.2/group1/M00/00/00/2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip</a></p>
<ul>
<li>启动停止命令</li>
<li>启动命令： 启动tracker命令：/etc/init.d/fdfs_trackerd start</li>
<li>查看进程命令：ps -el | grep fdfs</li>
<li>启动storage命令：/etc/init.d/fdfs_storaged start</li>
<li>查看进程命令：ps -el | grep fdfs</li>
<li>启动nginx命令：/usr/local/nginx/sbin/nginx</li>
<li>停止命令： 停止tracker命令：/etc/init.d/fdfs_trackerd stop</li>
<li>关闭storage命令：/etc/init.d/fdfs_storaged stop</li>
<li>关闭nginx命令：/usr/local/nginx/sbin/nginx -s stop</li>
</ul>
<h2 id="使用Java客户端操作"><a href="#使用Java客户端操作" class="headerlink" title="使用Java客户端操作"></a>使用Java客户端操作</h2><h3 id="classpath下建立文件fastdfs-client-conf"><a href="#classpath下建立文件fastdfs-client-conf" class="headerlink" title="classpath下建立文件fastdfs_client.conf"></a>classpath下建立文件fastdfs_client.conf</h3><h4 id="输入以下内容"><a href="#输入以下内容" class="headerlink" title="输入以下内容"></a>输入以下内容</h4><p>tracker_server = 192.168.125.129:22122</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>xubin<span class="token punctuation">.</span>utils<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>common<span class="token punctuation">.</span>NameValuePair<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">/**
 * FastDFS 工具类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDFSClientUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONF_FILENAME <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"fastdfs_client.conf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FastDFSClientUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> TrackerClient trackerClient<span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">//加载文件</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ClientGlobal<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>CONF_FILENAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
            TrackerGroup trackerGroup <span class="token operator">=</span> ClientGlobal<span class="token punctuation">.</span>g_tracker_group<span class="token punctuation">;</span>
            trackerClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackerClient</span><span class="token punctuation">(</span>trackerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 上传
     * @param file 文件
     * @param path 路径
     * @return
     *          上传成功返回id，失败返回null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">upload</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            NameValuePair<span class="token punctuation">[</span><span class="token punctuation">]</span> meta_list <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new NameValuePair[0];</span>
            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> file_buff <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                file_buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
                fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file_buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String fileid <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">upload_file1</span><span class="token punctuation">(</span>file_buff<span class="token punctuation">,</span> <span class="token function">getFileExt</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> meta_list<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> fileid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 上传
     * @param data 数据
     * @param extName 路径
     * @return
     *          上传成功返回id，失败返回null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> String extName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            NameValuePair<span class="token punctuation">[</span><span class="token punctuation">]</span> meta_list <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new NameValuePair[0];</span>

            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String fileid <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">upload_file1</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> extName<span class="token punctuation">,</span> meta_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> fileid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 下载
     * @param fileId 文件id
     * @return
     *          返回InputStream
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> InputStream <span class="token function">download</span><span class="token punctuation">(</span>String groupName<span class="token punctuation">,</span> String fileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">download_file1</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> inputStream<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 删除
     * @param fileId 文件id
     * @return
     *          删除成功返回0，非0则操作失败，返回错误代码
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>String groupName<span class="token punctuation">,</span> String fileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">delete_file1</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 更新文件
     * @param oldFileId 旧文件id
     * @param file 新文件
     * @param path 新文件路径
     * @return
     *          上传成功返回id，失败返回null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">modify</span><span class="token punctuation">(</span>String oldGroupName<span class="token punctuation">,</span> String oldFileId<span class="token punctuation">,</span> File file<span class="token punctuation">,</span> String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String fileid <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 先上传</span>
            fileid <span class="token operator">=</span> <span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileid <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 再删除</span>
            <span class="token keyword">int</span> delResult <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>oldGroupName<span class="token punctuation">,</span> oldFileId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>delResult <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> fileid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取文件后缀名
     * @param fileName
     * @return
     *          如："jpg"、"txt"、"zip" 等
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getFileExt</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>FastDFS的安装算是比较麻烦的 不过按照本篇 一步一步来 是绝对可以安装成功的 集群的安装就更麻烦了 个人暂时用不到 就不安装了</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> XBin-Store </tag>
            
            <tag> FastDFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)]]></title>
      <url>http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Zookeeper集群”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><strong><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></strong></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Zookeeper集群方案"><a href="#Zookeeper集群方案" class="headerlink" title="Zookeeper集群方案"></a>Zookeeper集群方案</h3><table>
<thead>
<tr>
<th style="text-align:center">主机IP</th>
<th style="text-align:center">消息端口</th>
<th style="text-align:center">通信端口</th>
<th style="text-align:center">节点目录/usr/local/下</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">192.168.1.1</td>
<td style="text-align:center">2181</td>
<td style="text-align:center">2888:3888</td>
<td style="text-align:center">zookeeper</td>
</tr>
<tr>
<td style="text-align:center">192.168.1.2</td>
<td style="text-align:center">2181</td>
<td style="text-align:center">2888:3888</td>
<td style="text-align:center">zookeeper</td>
</tr>
<tr>
<td style="text-align:center">192.168.1.3</td>
<td style="text-align:center">2181</td>
<td style="text-align:center">2888:3888</td>
<td style="text-align:center">zookeeper</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装JDK-略"><a href="#安装JDK-略" class="headerlink" title="安装JDK 略"></a>安装JDK 略</h4><blockquote>
<p>以下操作3台机器同时操作</p>
</blockquote>
<h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><p>useradd zookeeper</p>
<p>passwd zookeeper</p>
<p>设置密码</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>官网下载<a href="http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">zookeeper-3.4.6</a><br>Linux wget <a href="http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</a></p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>tar -zxvf zookeeper-3.4.6.tar.gz —C /usr/local</p>
<h4 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h4><p>cd /usr/local</p>
<p>mv zookeeper-3.4.6 zookeeper</p>
<h4 id="建立以下文件夹"><a href="#建立以下文件夹" class="headerlink" title="建立以下文件夹"></a>建立以下文件夹</h4><p>cd /usr/local/zookeeper</p>
<p>mkdir data</p>
<p>mkdir logs</p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将/conf目录下的zoo_sample.cfg文件拷贝一份， 命名为为zoo.cfg</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># The number of milliseconds of each tick</span>
tickTime<span class="token operator">=</span>2000
<span class="token comment" spellcheck="true"># The number of ticks that the initial</span>
<span class="token comment" spellcheck="true"># synchronization phase can take</span>
initLimit<span class="token operator">=</span>10
<span class="token comment" spellcheck="true"># The number of ticks that can pass between</span>
<span class="token comment" spellcheck="true"># sending a request and getting an acknowledgement</span>
syncLimit<span class="token operator">=</span>5
<span class="token comment" spellcheck="true"># the directory where the snapshot is stored.</span>
<span class="token comment" spellcheck="true"># do not use /tmp for storage, /tmp here is just</span>
<span class="token comment" spellcheck="true"># example sakes.</span>
dataDir<span class="token operator">=</span>/usr/local/zookeeper/data
dataLogDir<span class="token operator">=</span>/usr/local/zookeeper/logs
<span class="token comment" spellcheck="true"># the port at which the clients will connect</span>
clientPort<span class="token operator">=</span>2181
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Be sure to read the maintenance section of the</span>
<span class="token comment" spellcheck="true"># administrator guide before turning on autopurge.</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># The number of snapshots to retain in dataDir</span>
<span class="token comment" spellcheck="true">#autopurge.snapRetainCount=3</span>
<span class="token comment" spellcheck="true"># Purge task interval in hours</span>
<span class="token comment" spellcheck="true"># Set to "0" to disable auto purge feature</span>
<span class="token comment" spellcheck="true">#autopurge.purgeInterval=1</span>
<span class="token comment" spellcheck="true"># 2888 端口号是 zookeeper 服务之间通信的端口。</span>
<span class="token comment" spellcheck="true"># 3888 是 zookeeper 与其他应用程序通信的端口。</span>
server.0<span class="token operator">=</span>192.168.1.1:2888:3888
server.1<span class="token operator">=</span>192.168.1.2:2888:3888
server.2<span class="token operator">=</span>192.168.1.3:2888:3888
</code></pre>
<h4 id="解释配置文件"><a href="#解释配置文件" class="headerlink" title="解释配置文件"></a>解释配置文件</h4><pre><code>initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不
是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到
Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。
当已经超过 10 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没
有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是
5*2000=10 秒。

syncLimit：这个配置项标识 Leader 与 Follower 之间发送消息，请求和应答时
间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2*2000=4
秒。

server.A=B:C:D：其中 A 是一个数字，表示这个是第几号服务器；B 是这个服务
器的 IP 地址或/etc/hosts 文件中映射了 IP 的主机名；C 表示的是这个服务器与
集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务
器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是
用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是
一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同
的端口号。
</code></pre><h4 id="新建myid文件"><a href="#新建myid文件" class="headerlink" title="新建myid文件"></a>新建myid文件</h4><p>cd /usr/local/zookeeper/data</p>
<ul>
<li>192.168.1.1机器:  echo 0 &gt;&gt; myid</li>
<li>192.168.1.2机器:  echo 1 &gt;&gt; myid</li>
<li>192.168.1.3机器:  echo 2 &gt;&gt; myid</li>
</ul>
<h4 id="编辑-bash-profile文件"><a href="#编辑-bash-profile文件" class="headerlink" title="编辑.bash_profile文件"></a>编辑.bash_profile文件</h4><p>添加</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> ZOOKEEPER_HOME<span class="token operator">=</span>/usr/local/zookeeper
<span class="token comment" spellcheck="true"># zookeeper env</span>
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token variable">$PATH</span>
</code></pre>
<p>使配置文件生效<br>$ source /home/zookeeper/.bash_profile</p>
<h4 id="添加防火墙规则"><a href="#添加防火墙规则" class="headerlink" title="添加防火墙规则"></a>添加防火墙规则</h4><p>在防火墙中打开要用到的端口2181、2888、3888</p>
<h5 id="切换到-root-用户权限，执行以下命令："><a href="#切换到-root-用户权限，执行以下命令：" class="headerlink" title="切换到 root 用户权限，执行以下命令："></a>切换到 root 用户权限，执行以下命令：</h5><pre><code>chkconfig iptables on
service iptables start
vim /etc/sysconfig/iptables
</code></pre><h5 id="增加以下-3-行："><a href="#增加以下-3-行：" class="headerlink" title="增加以下 3 行："></a>增加以下 3 行：</h5><pre><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 2181 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 2888 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3888 -j ACCEPT
</code></pre><h5 id="重启防火墙："><a href="#重启防火墙：" class="headerlink" title="重启防火墙："></a>重启防火墙：</h5><p>service iptables restart</p>
<h3 id="zk操作"><a href="#zk操作" class="headerlink" title="zk操作"></a>zk操作</h3><h4 id="启动zk"><a href="#启动zk" class="headerlink" title="启动zk"></a>启动zk</h4><p>zkServer.sh start</p>
<h5 id="查看有无启动成功"><a href="#查看有无启动成功" class="headerlink" title="查看有无启动成功"></a>查看有无启动成功</h5><p>jps</p>
<pre><code>1456 QuorumPeerMain
1475 Jps
</code></pre><blockquote>
<p>启动成功</p>
</blockquote>
<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p>zkServer.shstatus</p>
<h4 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h4><p>$ tail -500f /usr/local/zookeeper/logs/zookeeper.out</p>
<h4 id="停止zookeeper进程："><a href="#停止zookeeper进程：" class="headerlink" title="停止zookeeper进程："></a>停止zookeeper进程：</h4><p>zkServer.sh stop</p>
<h4 id="配置zookeeper开机使用xubin用户启动："><a href="#配置zookeeper开机使用xubin用户启动：" class="headerlink" title="配置zookeeper开机使用xubin用户启动："></a>配置zookeeper开机使用xubin用户启动：</h4><p>编辑/etc/rc.local 文件，加入：</p>
<p>su - zookeeper -c ‘/usr/local/zookeeper/bin/zkServer.sh start’</p>
<h3 id="zookeeper查看插件"><a href="#zookeeper查看插件" class="headerlink" title="zookeeper查看插件"></a>zookeeper查看插件</h3><h4 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h4><ul>
<li>Help -&gt; Install New Software</li>
<li>添加 url <a href="http://www.massedynamic.org/eclipse/updates/" target="_blank" rel="external">http://www.massedynamic.org/eclipse/updates/</a></li>
<li>选择zookeeper插件安装</li>
<li>Eclipse 菜单打开Window -&gt; Show View -&gt; Other… -&gt; ZooKeeper 3.2.2</li>
<li>输入zookeeper的地址 连接</li>
</ul>
<h4 id="idea插件"><a href="#idea插件" class="headerlink" title="idea插件"></a>idea插件</h4><p>直接插件库中搜索zookeeper</p>
<blockquote>
<p>不过我不推荐使用<br>插件开发成那样还上线…(不过是免费的 想用就用吧)</p>
</blockquote>
<h4 id="Java开发的客户端"><a href="#Java开发的客户端" class="headerlink" title="Java开发的客户端"></a>Java开发的客户端</h4><p><a href="http://download.csdn.net/detail/nihaoadam/9427620" target="_blank" rel="external">点我下载</a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装集群的时候一定要把防火墙配置好 不然就会出现各种问题 或者直接把防火墙关了吧 学习技术的时候可以不用考虑防火墙</p>
<p>后面会写一篇关于使用ZkClient、Curator操作Zookeeper的博客</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> XBin-Store </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)]]></title>
      <url>http://binux.cn/2017/03/04/Nginx-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Nginx。”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><strong><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></strong></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇Nginx安装基于CentOS6.5 将会介绍Nginx的安装</p>
<p>Nginx的负载均衡和高可用 这篇将不会涉及</p>
<blockquote>
<p>机器IP 192.168.1.1</p>
</blockquote>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="wget下载"><a href="#wget下载" class="headerlink" title="wget下载:"></a>wget下载:</h3><p><a href="http://nginx.org/download/nginx-1.4.2.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.4.2.tar.gz</a></p>
<h3 id="安装：-tar-zxvf-nginx-1-6-2-tar-gz"><a href="#安装：-tar-zxvf-nginx-1-6-2-tar-gz" class="headerlink" title="安装： tar -zxvf nginx-1.6.2.tar.gz"></a>安装： tar -zxvf nginx-1.6.2.tar.gz</h3><h3 id="下载需要的依赖库文件："><a href="#下载需要的依赖库文件：" class="headerlink" title="下载需要的依赖库文件："></a>下载需要的依赖库文件：</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> pcre
yum <span class="token function">install</span> pcre-devel
yum <span class="token function">install</span> zlib
yum <span class="token function">install</span> zlib-devel
</code></pre>
<h3 id="进行configure配置："><a href="#进行configure配置：" class="headerlink" title="进行configure配置："></a>进行configure配置：</h3><p>cd nginx-1.6.2 &amp;&amp; ./configure –prefix=/usr/local/nginx  查看是否报错</p>
<h3 id="编译安装-make-amp-amp-make-install"><a href="#编译安装-make-amp-amp-make-install" class="headerlink" title="编译安装 make &amp;&amp; make install"></a>编译安装 make &amp;&amp; make install</h3><h3 id="启动Nginx："><a href="#启动Nginx：" class="headerlink" title="启动Nginx："></a>启动Nginx：</h3><h3 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h3><p>/usr/local/nginx/sbin/nginx -s start 关闭（stop）重启（reload）</p>
<h4 id="成功："><a href="#成功：" class="headerlink" title="成功："></a>成功：</h4><p>查看是否启动（netstat -ano | grep 80）</p>
<h4 id="失败："><a href="#失败：" class="headerlink" title="失败："></a>失败：</h4><p>可能为80端口被占用等。</p>
<h3 id="访问页面："><a href="#访问页面：" class="headerlink" title="访问页面："></a>访问页面：</h3><p>浏览器访问地址：<a href="http://192.168.1.1:80" target="_blank" rel="external">http://192.168.1.1:80</a> （看到欢迎页面即可）</p>
<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#user  nobody;</span>

<span class="token comment" spellcheck="true">#开启进程数 &lt;=CPU数</span>
worker_processes  1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#错误日志保存位置</span>
<span class="token comment" spellcheck="true">#error_log  logs/error.log;</span>
<span class="token comment" spellcheck="true">#error_log  logs/error.log  notice;</span>
<span class="token comment" spellcheck="true">#error_log  logs/error.log  info;</span>

<span class="token comment" spellcheck="true">#进程号保存文件</span>
<span class="token comment" spellcheck="true">#pid        logs/nginx.pid;</span>

<span class="token comment" spellcheck="true">#每个进程最大连接数（最大连接=连接数x进程数）每个worker允许同时产生多少个链接，默认1024</span>
events <span class="token punctuation">{</span>
    worker_connections  1024<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


http <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">#文件扩展名与文件类型映射表</span>
    include       mime.types<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#默认文件类型</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">#日志文件输出格式 这个位置相于全局设置</span>
    log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">#请求日志保存位置</span>
    <span class="token comment" spellcheck="true">#access_log  logs/access.log  main;</span>

    <span class="token comment" spellcheck="true">#打开发送文件</span>
    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#tcp_nopush     on;</span>

    <span class="token comment" spellcheck="true">#keepalive_timeout  0;</span>
    <span class="token comment" spellcheck="true">#连接超时时间</span>
    keepalive_timeout  65<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">#打开gzip压缩</span>
    <span class="token comment" spellcheck="true">#gzip  on;</span>

    <span class="token comment" spellcheck="true">#设定请求缓冲</span>
    <span class="token comment" spellcheck="true">#client_header_buffer_size 1k;</span>
    <span class="token comment" spellcheck="true">#large_client_header_buffers 4 4k;</span>

    <span class="token comment" spellcheck="true">#设定负载均衡的服务器列表</span>
    <span class="token comment" spellcheck="true">#upstream myproject {</span>
        <span class="token comment" spellcheck="true">#weigth参数表示权值，权值越高被分配到的几率越大</span>
        <span class="token comment" spellcheck="true">#max_fails 当有#max_fails个请求失败，就表示后端的服务器不可用，默认为1，将其设置为0可以关闭检查</span>
        <span class="token comment" spellcheck="true">#fail_timeout 在以后的#fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器</span>
    <span class="token comment" spellcheck="true">#}</span>

    <span class="token comment" spellcheck="true">#webapp</span>
    <span class="token comment" spellcheck="true">#upstream myapp {</span>
      <span class="token comment" spellcheck="true"># server 192.168.1.1:8080 weight=1 max_fails=2 fail_timeout=30s;</span>
    <span class="token comment" spellcheck="true"># server 192.168.1.1:8080 weight=1 max_fails=2 fail_timeout=30s;</span>
    <span class="token comment" spellcheck="true">#}</span>

    <span class="token comment" spellcheck="true">#配置虚拟主机，基于域名、ip和端口</span>
    server <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">#监听端口</span>
        listen       80<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">#监听域名</span>
        server_name  localhost<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">#charset koi8-r;</span>

        <span class="token comment" spellcheck="true">#nginx访问日志放在logs/host.access.log下，并且使用main格式（还可以自定义格式）</span>
        <span class="token comment" spellcheck="true">#access_log  logs/host.access.log  main;</span>

        <span class="token comment" spellcheck="true">#返回的相应文件地址</span>
        location / <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">#设置客户端真实ip地址</span>
            <span class="token comment" spellcheck="true">#proxy_set_header X-real-ip $remote_addr;</span>
            <span class="token comment" spellcheck="true">#负载均衡反向代理</span>
            <span class="token comment" spellcheck="true">#proxy_pass http://myapp;</span>

            <span class="token comment" spellcheck="true">#返回根路径地址（相对路径:相对于/usr/local/nginx/）</span>
            root   html<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">#默认访问文件</span>
            index  index.html index.htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">#配置反向代理tomcat服务器：拦截.jsp结尾的请求转向到tomcat</span>
        <span class="token comment" spellcheck="true">#location ~ \.jsp$ {</span>
        <span class="token comment" spellcheck="true">#    proxy_pass http://192.168.1.1:8080;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true">#error_page  404              /404.html;</span>
        <span class="token comment" spellcheck="true"># redirect server error pages to the static page /50x.html</span>
        <span class="token comment" spellcheck="true">#</span>

        <span class="token comment" spellcheck="true">#错误页面及其返回地址</span>
        error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
            root   html<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
        <span class="token comment" spellcheck="true">#</span>
        <span class="token comment" spellcheck="true">#location ~ \.php$ {</span>
        <span class="token comment" spellcheck="true">#    proxy_pass   http://127.0.0.1;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="token comment" spellcheck="true">#</span>
        <span class="token comment" spellcheck="true">#location ~ \.php$ {</span>
        <span class="token comment" spellcheck="true">#    root           html;</span>
        <span class="token comment" spellcheck="true">#    fastcgi_pass   127.0.0.1:9000;</span>
        <span class="token comment" spellcheck="true">#    fastcgi_index  index.php;</span>
        <span class="token comment" spellcheck="true">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
        <span class="token comment" spellcheck="true">#    include        fastcgi_params;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true"># deny access to .htaccess files, if Apache's document root</span>
        <span class="token comment" spellcheck="true"># concurs with nginx's one</span>
        <span class="token comment" spellcheck="true">#</span>
        <span class="token comment" spellcheck="true">#location ~ /\.ht {</span>
        <span class="token comment" spellcheck="true">#    deny  all;</span>
        <span class="token comment" spellcheck="true">#}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">#虚拟主机配置：</span>
    server <span class="token punctuation">{</span>
        listen 1234<span class="token punctuation">;</span>
        server_name bhz.com<span class="token punctuation">;</span>
        location / <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">#正则表达式匹配uri方式：在/usr/local/nginx/bhz.com下 建立一个test123.html 然后使用正则匹配</span>
        <span class="token comment" spellcheck="true">#location ~ test {</span>
            <span class="token comment" spellcheck="true">## 重写语法：if return （条件 = ~ ~*）</span>
            <span class="token comment" spellcheck="true">#if ($remote_addr = 192.168.1.200) {</span>
            <span class="token comment" spellcheck="true">#       return 401;</span>
            <span class="token comment" spellcheck="true">#}</span>

            <span class="token comment" spellcheck="true">#if ($http_user_agent ~* firefox) {</span>
            <span class="token comment" spellcheck="true">#       rewrite ^.*$ /firefox.html;</span>
            <span class="token comment" spellcheck="true">#       break;</span>
            <span class="token comment" spellcheck="true">#}</span>

            root bhz.com<span class="token punctuation">;</span>
            index index.html<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">#location /goods {</span>
        <span class="token comment" spellcheck="true">#        rewrite "goods-(\d{1,5})\.html" /goods-ctrl.html;</span>
        <span class="token comment" spellcheck="true">#        root bhz.com;</span>
        <span class="token comment" spellcheck="true">#        index index.html;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true">#配置访问日志</span>
        access_log logs/bhz.com.access.log main<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token comment" spellcheck="true"># another virtual host using mix of IP-, name-, and port-based configuration</span>
    <span class="token comment" spellcheck="true">#</span>
    <span class="token comment" spellcheck="true">#server {</span>
    <span class="token comment" spellcheck="true">#    listen       8000;</span>
    <span class="token comment" spellcheck="true">#    listen       somename:8080;</span>
    <span class="token comment" spellcheck="true">#    server_name  somename  alias  another.alias;</span>

    <span class="token comment" spellcheck="true">#    location / {</span>
    <span class="token comment" spellcheck="true">#        root   html;</span>
    <span class="token comment" spellcheck="true">#        index  index.html index.htm;</span>
    <span class="token comment" spellcheck="true">#    }</span>
    <span class="token comment" spellcheck="true">#}</span>


    <span class="token comment" spellcheck="true"># HTTPS server</span>
    <span class="token comment" spellcheck="true">#</span>
    <span class="token comment" spellcheck="true">#server {</span>
    <span class="token comment" spellcheck="true">#    listen       443 ssl;</span>
    <span class="token comment" spellcheck="true">#    server_name  localhost;</span>

    <span class="token comment" spellcheck="true">#    ssl_certificate      cert.pem;</span>
    <span class="token comment" spellcheck="true">#    ssl_certificate_key  cert.key;</span>

    <span class="token comment" spellcheck="true">#    ssl_session_cache    shared:SSL:1m;</span>
    <span class="token comment" spellcheck="true">#    ssl_session_timeout  5m;</span>

    <span class="token comment" spellcheck="true">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>
    <span class="token comment" spellcheck="true">#    ssl_prefer_server_ciphers  on;</span>

    <span class="token comment" spellcheck="true">#    location / {</span>
    <span class="token comment" spellcheck="true">#        root   html;</span>
    <span class="token comment" spellcheck="true">#        index  index.html index.htm;</span>
    <span class="token comment" spellcheck="true">#    }</span>
    <span class="token comment" spellcheck="true">#}</span>

<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇介绍了Nginx的安装 非常简单 下面会写篇介绍Nginx负载均衡和高可用的博客</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> XBin-Store </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)]]></title>
      <url>http://binux.cn/2017/03/03/Redis-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Redis集群(6节点 3主3从),并且如何对Redis集群进行操作,以及Jedis进行操作!”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><strong><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></strong></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇安装的Redis版本为3.0 目前官方最新稳定版3.2</p>
<p>需要安装gcc：yum install gcc-c++</p>
<p>需要安装ruby的环境。</p>
<p>yum -y install ruby ruby-devel rubygems rpm-build</p>
<p>需要使用到官方提供的ruby脚本<a href="https://rubygems.org/downloads/redis-3.0.0.gem" target="_blank" rel="external">redis-3.0.0.gem</a>。</p>
<p>gem install redis-3.0.0.gem</p>
<blockquote>
<p>本机IP为192.168.1.1</p>
</blockquote>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载源码点我下载"><a href="#下载源码点我下载" class="headerlink" title="下载源码点我下载"></a>下载源码<a href="http://download.redis.io/releases/redis-3.0.0.tar.gz" target="_blank" rel="external">点我下载</a></h3><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>tar -zxvf redis-3.0.0.tar.gz</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>cd /usr/local/redis-3.0.0</p>
<p>make</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>make PREFIX=/usr/local/redis1 install</p>
<h3 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h3><p>进入源码目录，里面有一份配置文件 redis.conf，然后将其拷贝到安装路径下</p>
<p>cd /usr/local/redis</p>
<p>mkdir etc</p>
<p>cp redis-3.0.0/redis.conf  /usr/local/redis-cluster/redis1/etc</p>
<p>编辑redis.conf 打开第632行# cluster-enabled yes 的注释</p>
<h3 id="复制6个Redis"><a href="#复制6个Redis" class="headerlink" title="复制6个Redis"></a>复制6个Redis</h3><p>分别命名为redis1-6</p>
<p>分别修改redis.conf配置文件中的第45行端口号为7001-7006</p>
<h3 id="复制redis-trib-rb集群管理工具"><a href="#复制redis-trib-rb集群管理工具" class="headerlink" title="复制redis-trib.rb集群管理工具"></a>复制redis-trib.rb集群管理工具</h3><p>cp redis-3.0.0/src/redis-trib.rb  /usr/local/redis-cluster</p>
<h3 id="启动-后端启动"><a href="#启动-后端启动" class="headerlink" title="启动(后端启动)"></a>启动(后端启动)</h3><p> /usr/local/redis-cluster/redis1/bin/redis-server /usr/local/redis-cluster/redis1/etc/redis.conf<br> /usr/local/redis-cluster/redis2/bin/redis-server /usr/local/redis-cluster/redis2/etc/redis.conf<br> /usr/local/redis-cluster/redis3/bin/redis-server /usr/local/redis-cluster/redis3/etc/redis.conf<br> /usr/local/redis-cluster/redis4/bin/redis-server /usr/local/redis-cluster/redis4/etc/redis.conf<br> /usr/local/redis-cluster/redis5/bin/redis-server /usr/local/redis-cluster/redis5/etc/redis.conf<br> /usr/local/redis-cluster/redis6/bin/redis-server /usr/local/redis-cluster/redis6/etc/redis.conf</p>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>cd /usr/local/redis-cluster<br>./redis-trib.rb create –replicas 1 <strong>192.168.1.1</strong>:<strong>7001</strong> <strong>192.168.1.1</strong>:<strong>7002</strong> <strong>192.168.1.1</strong>:<strong>7003</strong> <strong>192.168.1.1</strong>:<strong>7004</strong> <strong>192.168.1.1</strong>:<strong>7005</strong>  <strong>192.168.1.1</strong>:<strong>7006</strong></p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Creating cluster
Connecting to node 192.168.1.1:7001: OK
Connecting to node 192.168.1.1:7002: OK
Connecting to node 192.168.1.1:7003: OK
Connecting to node 192.168.1.1:7004: OK
Connecting to node 192.168.1.1:7005: OK
Connecting to node 192.168.1.1:7006: OK
&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.1.1:7001
192.168.1.1:7002
192.168.1.1:7003
Adding replica 192.168.1.1:7004 to 192.168.1.1:7001
Adding replica 192.168.1.1:7005 to 192.168.1.1:7002
Adding replica 192.168.1.1:7006 to 192.168.1.1:7003
M: 5a8523db7e12ca600dc82901ced06741b3010076 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
M: bf6f0929044db485dea9b565bb51e0c917d20a53 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
M: c5e334dc4a53f655cb98fa3c3bdef8a808a693ca 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
S: 2a61b87b49e5b1c84092918fa2467dd70fec115f 192.168.1.1:7004
   replicates 5a8523db7e12ca600dc82901ced06741b3010076
S: 14848b8c813766387cfd77229bd2d1ffd6ac8d65 192.168.1.1:7005
   replicates bf6f0929044db485dea9b565bb51e0c917d20a53
S: 3192cbe437fe67bbde9062f59d5a77dabcd0d632 192.168.1.1:7006
   replicates c5e334dc4a53f655cb98fa3c3bdef8a808a693ca
Can I set the above configuration? (type &#39;yes&#39; to accept): yes
&gt;&gt;&gt; Nodes configuration updated
&gt;&gt;&gt; Assign a different config epoch to each node
&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join.....
&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7001)
M: 5a8523db7e12ca600dc82901ced06741b3010076 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
M: bf6f0929044db485dea9b565bb51e0c917d20a53 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
M: c5e334dc4a53f655cb98fa3c3bdef8a808a693ca 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
M: 2a61b87b49e5b1c84092918fa2467dd70fec115f 192.168.1.1:7004
   slots: (0 slots) master
   replicates 5a8523db7e12ca600dc82901ced06741b3010076
M: 14848b8c813766387cfd77229bd2d1ffd6ac8d65 192.168.1.1:7005
   slots: (0 slots) master
   replicates bf6f0929044db485dea9b565bb51e0c917d20a53
M: 3192cbe437fe67bbde9062f59d5a77dabcd0d632 192.168.1.1:7006
   slots: (0 slots) master
   replicates c5e334dc4a53f655cb98fa3c3bdef8a808a693ca
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
</code></pre><h3 id="查看Redis运行状态"><a href="#查看Redis运行状态" class="headerlink" title="查看Redis运行状态"></a>查看Redis运行状态</h3><pre><code>ps -el | grep redis
5 S     0  1999     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2003     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2007     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2011     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2017     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2023     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
</code></pre><h2 id="Redis集群操作"><a href="#Redis集群操作" class="headerlink" title="Redis集群操作"></a>Redis集群操作</h2><h3 id="新增一个Master节点"><a href="#新增一个Master节点" class="headerlink" title="新增一个Master节点"></a>新增一个Master节点</h3><p>/usr/local/redis-cluster/redis-trib.rb add-node <strong>新增节点192.168.1.1:端口</strong> <strong>已知节点192.168.1.1:端口</strong></p>
<blockquote>
<p>如192.168.1.1:6385 192.168.1.1:6379</p>
</blockquote>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Adding node 新增192.168.1.1:端口 to cluster 192.168.1.1:7001
Connecting to node 192.168.1.1:7001: OK
Connecting to node 192.168.1.1:7006: OK
Connecting to node 192.168.1.1:7005: OK
Connecting to node 192.168.1.1:7004: OK
Connecting to node 192.168.1.1:7002: OK
Connecting to node 192.168.1.1:7003: OK
&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7001)
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: fa299e41c173fa807ba04684c2f5e5e185d5f7d0 192.168.1.1:7006
   slots: (0 slots) slave
   replicates 83df08875c7707878756364039df0a4c8658f272
S: adb99506ddccad332e09258565f2e5f4f456a150 192.168.1.1:7005
   slots: (0 slots) slave
   replicates 8aac82b63d42a1989528cd3906579863a5774e77
S: a69b98937844c6050ee5885266ccccb185a3f36a 192.168.1.1:7004
   slots: (0 slots) slave
   replicates 614d0def75663f2620b6402a017014b57c912dad
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
Connecting to node 新增192.168.1.1:端口: OK
&gt;&gt;&gt; Send CLUSTER MEET to node 新增192.168.1.1:端口 to make it join the cluster.
[OK] New node added correctly.
</code></pre><blockquote>
<p>注意：当添加节点成功以后，新增的节点不会有任何数据，因为它没有分配任何的slot（hash槽）。我们需要为新节点手工分配slot。</p>
</blockquote>
<h4 id="为新节点分配slot"><a href="#为新节点分配slot" class="headerlink" title="为新节点分配slot"></a>为新节点分配slot</h4><p>/usr/local/redis-cluster/redis-trib.rb add-node <strong>192.168.1.1:端口</strong>(已知节点)</p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7001)
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: fa299e41c173fa807ba04684c2f5e5e185d5f7d0 192.168.1.1:7006
   slots: (0 slots) slave
   replicates 83df08875c7707878756364039df0a4c8658f272
S: adb99506ddccad332e09258565f2e5f4f456a150 192.168.1.1:7005
   slots: (0 slots) slave
   replicates 8aac82b63d42a1989528cd3906579863a5774e77
M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
   slots: (0 slots) master
   0 additional replica(s)
S: a69b98937844c6050ee5885266ccccb185a3f36a 192.168.1.1:7004
   slots: (0 slots) slave
   replicates 614d0def75663f2620b6402a017014b57c912dad
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
// 提示一
How many slots do you want to move (from 1 to 16384)? 输入需要分配的slot数量如：200
// 提示二 是你需要把这200个slot槽移动到那个节点上去（需要指定节点id）
What is the receiving node ID? 382634a4025778c040b7213453fd42a709f79e28//节点ID
Please enter all the source node IDs.
  Type &#39;all&#39; to use all the nodes as source nodes for the hash slots.
  Type &#39;done&#39; once you entered all the source nodes IDs.
// 提示三 输入all为从所有主节点3个中分别抽取响应的槽数（一共为200个槽到指定的新节点中！，并且会打印执行分片的计划。）
Source node #1:all
Ready to move 200 slots.
Source nodes:
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
slots:0-5460 (5461 slots) master
1 additional replica(s)
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
slots:5461-10922 (5462 slots) master
1 additional replica(s)
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
slots:10923-16383 (5461 slots) master
1 additional replica(s)
Destination node:
M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
slots: (0 slots) master
0 additional replica(s)
Resharding plan:（分片执行计划日志）
......
//提示四 输入yes执行
Do you want to proceed with the proposed reshard plan (yes/no)? yes
</code></pre><h4 id="完成-查看新增节点-slot数量"><a href="#完成-查看新增节点-slot数量" class="headerlink" title="完成 查看新增节点 slot数量"></a>完成 查看新增节点 slot数量</h4><p>/usr/local/redis/bin/redis-cli -c -h 192.168.1.1 -p 7001</p>
<p>192.168.1.1:7001&gt; cluster  nodes</p>
<h3 id="给7007添加一个Slave节点"><a href="#给7007添加一个Slave节点" class="headerlink" title="给7007添加一个Slave节点"></a>给7007添加一个Slave节点</h3><p>/usr/local/redis-cluster/redis-trib.rb add-node 192.168.1.1:7008 <strong>192.168.1.1:7007</strong>(Master节点)</p>
<p>需要执行replicate命令来指定当前节点（从节点）的主节点id为哪个。</p>
<p>/usr/local/redis-cluster/redis1/bin/redis-cli -c -h 192.168.1.1 -p 7008<br>192.168.1.1:7008&gt; cluster replicate 382634a4025778c040b7213453fd42a709f79e28(7007的id)</p>
<p>192.168.1.1:7008&gt; OK（提示OK则操作成功）</p>
<h3 id="删除一个Slave节点-7008-Slave"><a href="#删除一个Slave节点-7008-Slave" class="headerlink" title="删除一个Slave节点(7008 Slave)"></a>删除一个Slave节点(7008 Slave)</h3><p>删除从节点7008，输入del-node命令，指定删除节点ip和端口，以及节点id</p>
<p>/usr/local/redis-cluster/redis-trib.rb del-node 192.168.1.1:7008 97b0e0115326833724eb0ffe1d0574ee34618e9f(节点id)</p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Removing node 97b0e0115326833724eb0ffe1d0574ee34618e9f from cluster 192.168.1.1:7008
Connecting to node 192.168.1.1:7008: OK
Connecting to node 192.168.1.1:7003: OK
Connecting to node 192.168.1.1:7006: OK
Connecting to node 192.168.1.1:7002: OK
Connecting to node 192.168.1.1:7005: OK
Connecting to node 192.168.1.1:7001: OK
Connecting to node 192.168.1.1:7004: OK
Connecting to node 192.168.1.1:7007: OK
&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...
&gt;&gt;&gt; SHUTDOWN the node.
</code></pre><blockquote>
<p>删除成功</p>
</blockquote>
<h3 id="删除一个Master节点-7007-Master"><a href="#删除一个Master节点-7007-Master" class="headerlink" title="删除一个Master节点(7007 Master)"></a>删除一个Master节点(7007 Master)</h3><p>这个步骤会相对比较麻烦一些，因为主节点的里面是有分配了slot槽的，所以我们这里必须先把7007里的slot槽放入到其他的可用主节点中去，然后再进行移除节点操作才行，不然会出现数据丢失问题。</p>
<p>需要先把其全部的数据（Slot槽）移动到其他节点上去（目前只能把Master的数据迁移到一个节点上，暂时做不了平均分配功能）。</p>
<blockquote>
<p>暂不知在后续版本有无增加此功能</p>
</blockquote>
<p>/usr/local/redis-cluster/redis-trib.rb reshard 192.168.1.1:7007</p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7007)
M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
   slots:0-65,5461-5527,10923-10988 (199 slots) master
   0 additional replica(s)
S: fa299e41c173fa807ba04684c2f5e5e185d5f7d0 192.168.1.1:7006
   slots: (0 slots) slave
   replicates 83df08875c7707878756364039df0a4c8658f272
S: a69b98937844c6050ee5885266ccccb185a3f36a 192.168.1.1:7004
   slots: (0 slots) slave
   replicates 614d0def75663f2620b6402a017014b57c912dad
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:66-5460 (5395 slots) master
   1 additional replica(s)
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
   slots:5528-10922 (5395 slots) master
   1 additional replica(s)
S: adb99506ddccad332e09258565f2e5f4f456a150 192.168.1.1:7005
   slots: (0 slots) slave
   replicates 8aac82b63d42a1989528cd3906579863a5774e77
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
   slots:10989-16383 (5395 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 199// 这里不一定正好200个槽
What is the receiving node ID? 614d0def75663f2620b6402a017014b57c912dad
Please enter all the source node IDs.
  Type &#39;all&#39; to use all the nodes as source nodes for the hash slots.
  Type &#39;done&#39; once you entered all the source nodes IDs.
Source node #1:382634a4025778c040b7213453fd42a709f79e28// 这里是需要把数据移动到哪？这里输入7001的主节点id
Source node #2:done// 这里直接输入done 开始生成迁移计划
Ready to move 199 slots.
  Source nodes:
    M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
   slots:0-65,5461-5527,10923-10988 (199 slots) master
   0 additional replica(s)
  Destination node:
    M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:66-5460 (5395 slots) master
   1 additional replica(s)
  Resharding plan:
Moving slot 0 from 382634a4025778c040b7213453fd42a709f79e28
...
Do you want to proceed with the proposed reshard plan (yes/no)? Yes// 这里输入yes开始迁移
Moving slot 0 from 192.168.1.1:7007 to 192.168.1.1:7001:
</code></pre><p>使用del-node命令删除7007主节点即可</p>
<p>/usr/local/redis-cluster/redis-trib.rb del-node 192.168.1.1:7007 382634a4025778c040b7213453fd42a709f79e28(7007ID)<br>输出如下：</p>
<pre><code>&gt;&gt;&gt; Removing node 382634a4025778c040b7213453fd42a709f79e28 from cluster 192.168.1.171:7007
Connecting to node 192.168.1.171:7007: OK
Connecting to node 192.168.1.171:7006: OK
Connecting to node 192.168.1.171:7004: OK
Connecting to node 192.168.1.171:7001: OK
Connecting to node 192.168.1.171:7002: OK
Connecting to node 192.168.1.171:7005: OK
Connecting to node 192.168.1.171:7003: OK
&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...
&gt;&gt;&gt; SHUTDOWN the node。
</code></pre><h4 id="删除成功-查看集群状态"><a href="#删除成功-查看集群状态" class="headerlink" title="删除成功 查看集群状态"></a>删除成功 查看集群状态</h4><p>/usr/local/redis/bin/redis-cli -c -h 192.168.1.1 -p 7001</p>
<p>192.168.1.1:7001&gt; cluster  nodes</p>
<h2 id="jedis连接"><a href="#jedis连接" class="headerlink" title="jedis连接"></a>jedis连接</h2><h3 id="pom坐标："><a href="#pom坐标：" class="headerlink" title="pom坐标："></a>pom坐标：</h3><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="单实例连接"><a href="#单实例连接" class="headerlink" title="单实例连接"></a>单实例连接</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 单实例连接redis</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedisSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span> <span class="token number">7001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="使用连接池连接"><a href="#使用连接池连接" class="headerlink" title="使用连接池连接"></a>使用连接池连接</h4><p>   通过单实例连接redis不能对redis连接进行共享，可以使用连接池对redis连接进行共享，提高资源利用率，使用jedisPool连接redis服务，如下代码：</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token comment" spellcheck="true">// 连接池连接redis</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//最大连接数</span>
        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//最大连接空闲数</span>
        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        JedisPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span> <span class="token number">7001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token keyword">try</span>  <span class="token punctuation">{</span>
             jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                 <span class="token comment" spellcheck="true">//关闭连接</span>
                 jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="jedis与spring整合"><a href="#jedis与spring整合" class="headerlink" title="jedis与spring整合"></a>jedis与spring整合</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 连接池配置 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 最大连接数 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxTotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 最大空闲连接数 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 每次释放连接的最大数目 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numTestsPerEvictionRun<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 释放连接的扫描间隔（毫秒） --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接最小空闲时间 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>softMinEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWaitMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1500<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 在获取连接的时候检查有效性, 默认false --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 在空闲时检查有效性, 默认false --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blockWhenExhausted<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- redis单机 通过连接池 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPool<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.1.1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring-redis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedisPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    JedisPool pool <span class="token operator">=</span> <span class="token punctuation">(</span>JedisPool<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"jedisPool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">try</span>  <span class="token punctuation">{</span>
             jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                     <span class="token comment" spellcheck="true">//关闭连接</span>
                     jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="多实例连接"><a href="#多实例连接" class="headerlink" title="多实例连接"></a>多实例连接</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jedisClient"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.JedisCluster"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"nodes"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>set<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.1}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.1}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.2}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.2}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.3}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.3}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.4}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.4}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.5}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.5}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.6}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.6}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
</code></pre>
<h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring-redis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedisPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    JedisCluster jedisCluster <span class="token operator">=</span> <span class="token punctuation">(</span>JedisCluster<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"jedisClient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">try</span>  <span class="token punctuation">{</span>

             jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                     <span class="token comment" spellcheck="true">//关闭连接</span>
                     jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇只是讲了Redis集群的搭建和集群的基本操作 想深入了解的 建议自己买本书来看看 比如<a href="https://www.amazon.cn/Redis/dp/B00L4XHH0S/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;qid=1488619617&amp;sr=8-2" target="_blank" rel="external">Redis设计与实现</a>、<a href="https://www.amazon.cn/图书/dp/B016YLS2LM/ref=sr_1_1?ie=UTF8&amp;qid=1488619617&amp;sr=8-1&amp;keywords=redis" target="_blank" rel="external">Redis实战</a>等</p>
<p>安装如有问题 可以在下方评论 我会尽我所能的帮你解决一些问题。</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> XBin-Store </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完美解决Mac下Navicat Premium连接MySQL5.7中文乱码！！！]]></title>
      <url>http://binux.cn/2017/02/27/Mac-MySQL-Garbled/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“记录下 毕竟也是当初困扰自己好久的问题！”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学生自己买不起Mac只能自己装的黑苹果 自己不想研究 还找人花钱装的 (其实自己装也可以 就是有点麻烦) 初用Mac OS 感觉 系统好炫酷 简直就是为我而生的</p>
<p>没用多久就感觉 以后绝对不会用 win10了 下部电脑绝对自己赚钱买Mac 自己慢慢摸索把一些自己常用的软件都装好了 也包括一些全新的软件 <strong>Alfred、1Password、PopClip等</strong> 有时间可以记录下我使用的一些 软件<br>绝对用过了就回不去的 </p>
<p>好了 回到正题 在使用Navicat Premium 连接MySQL时出现了乱码 查了些资料 </p>
<p>我总结出来的只需要改2处 <strong>有一处还是自己多此一举</strong> 出现的！</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先我们来改MySQL的字符集</p>
<p>登录MySQL SHOW VARIABLES LIKE “character%”;</p>
<pre><code>mysql&gt; SHOW VARIABLES LIKE &quot;character%&quot;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | latin1                                                    |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | latin1                                                    |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.17-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.00 sec)
</code></pre><p>character_set_database和character_set_server的默认字符集还是latin1。</p>
<p>需要改成</p>
<pre><code>mysql&gt; SHOW VARIABLES LIKE &quot;character%&quot;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | utf8                                                      |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | utf8                                                      |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.17-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.00 sec)
</code></pre><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>停止MySQL服务</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img1.png" alt="MySQL设置"></center><br><center>MySQL设置</center><br>打开终端 执行 sudo vim /etc/my.cnf 输入密码 新建一个MySQL配置文件 因为5.7 安装的时候默认没有配置文件<br><br>加入2条配置<br><code>[client]
default-character-set=utf8
[mysqld]
character-set-server=utf8</code><br>重新启动MySQL服务<br><br>打开Navicat Premium 连接<br><center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img2.png" alt="Navicat Premium连接"></center><br>发现还是乱码<br><center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img3.png" alt="中文乱码"></center><br><center>中文乱码</center><br>其实到这边 MySQL乱码就配置完成了 问题就出在 新建连接的时候Encoding这边选择了utf-8<br><br>把它改成Auto 问题解决<br><center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img4.png" alt="问题解决"></center>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>出现这个问题不怪别人 都是自己手残 干嘛自己去改连接属性里面的Encoding 其实默认就是Auto 其实这个问题困扰我挺久的 </p>
<p>不过在改过MySQL配置后 使用MyBatis 也就是JDBC操作数据库是没问题的 所以也没在意</p>
<p>最后怎么看自己配置的有没有问题呢！</p>
<p>Navicat Premium右键Edit DataBase 如果是下图 就绝对没问题了</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img5.png" alt="Edit DataBase"></center>

<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> Bug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Blog]]></title>
      <url>http://binux.cn/2017/02/23/hello-Blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“加油！！！ ”</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Binux Blog 开通了。</p>
<p>以后会多多写些Blog 以前都是自己随便记录些笔记。</p>
<p>无意了解到 <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a><br>通过<a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> 可以快速 Building Blog</p>
]]></content>
      
        <categories>
            
            <category> 随记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>

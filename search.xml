<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于 xbin-store 的一些声明!]]></title>
      <url>http://binux.cn/2017/05/08/xbin-store/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“简单谈谈 xbin-store ”</p>
</blockquote>
<h2 id="项目起因"><a href="#项目起因" class="headerlink" title="项目起因"></a>项目起因</h2><p>项目开始于 2017-01-24 是我寒假闲着没事做的一个项目,当时是想着模仿 JD 写一个分布式商城,能把自己所学的全部知识运用进去。</p>
<p>一方面是我觉得动手实践肯定比单纯看书效果好,虽然过程中会出现很多错误,但在解决各种问题的时候也变相的锻炼了自己的能力。</p>
<p>另一方面我想做个完善的分布式商城 就像 JD 一样的商城 (理想很完美 现实很残酷 选择的目标太庞大)  </p>
<h2 id="为什么开源"><a href="#为什么开源" class="headerlink" title="为什么开源"></a>为什么开源</h2><p>上面说过这个项目起因是我自己做来锻炼自己能力的,但是做着做着我发现凭我一个人的精力是无法完成这么庞大的系统的,于是我选择开源到 Github、OSChina 希望可以找到一些志同道合的朋友一起开发 </p>
<p>还有就是帮助一些对分布式感兴趣的朋友,包括创建群、写运行教程、甚至录视频。</p>
<p>最后我发现Star 1000 OSChina 有奖杯 其实我还挺想要的 不过我也不着急 项目足够完善后 还怕拿不到嘛！</p>
<script src="//git.oschina.net/binu/xbin-store/star_widget_preview"></script>

<h2 id="关于项目进度"><a href="#关于项目进度" class="headerlink" title="关于项目进度"></a>关于项目进度</h2><ul>
<li>2017-01-24 项目开始</li>
<li>2017-02-26 从本地的 Gitblit 迁移到 Github</li>
<li>2017-04-03 发布到 OSChina</li>
<li>2017-04-08 修改为使用 Spring Boot</li>
<li>2017-05-05 新建 xbin-store-cloud 项目 使用 Spring Cloud 重构</li>
<li>…</li>
</ul>
<p>大家可能发现从4月3后 项目基本变化在于架构的变化 从Spring Boot 到 Spring Cloud 架构的变化也反应着我正在学习的内容 技术总是在不停变化着 </p>
<p>其实最主要的原因还是我比较喜欢研究架构方面的内容 兴趣驱使着我学习 也没什么特别爱好了 写代码算是唯一爱好了</p>
<p>所以 如果你是想找个完善的电子商城 那么这个项目不适合你 功能很不完善 这个我自己知道 但是这个不完善是由于没有时间写 整个项目真正写的时间其实2个月都没有 </p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>希望 xbin-store、xbin-store-cloud 可以一直完善下去 奔着 写个 JD 的目标 大步前进</p>
<p>最后祝大家 Enjoy Coding</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 随记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随记 </tag>
            
            <tag> xbin-store </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7下 Docker 安装]]></title>
      <url>http://binux.cn/2017/05/08/Docker-Instal/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“CentOS 7下 Docker安装”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1、安装CentOS-7"><a href="#1、安装CentOS-7" class="headerlink" title="1、安装CentOS 7"></a>1、安装CentOS 7</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>Ali-OSM</p>
<p><a href="http://mirrors.aliyun.com" target="_blank" rel="external">http://mirrors.aliyun.com</a></p>
<h4 id="安装-略"><a href="#安装-略" class="headerlink" title="安装 略"></a>安装 略</h4><h4 id="确认内核版本"><a href="#确认内核版本" class="headerlink" title="确认内核版本"></a>确认内核版本</h4><p>uname -r</p>
<p>3.10.0-514.16.1.el7.x86_64</p>
<blockquote>
<p>需大于3.10</p>
</blockquote>
<h3 id="2、获取docker国内加速连接"><a href="#2、获取docker国内加速连接" class="headerlink" title="2、获取docker国内加速连接"></a>2、获取docker国内加速连接</h3><p>这里使用阿里的</p>
<p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="external">https://cr.console.aliyun.com/#/accelerator</a></p>
<p><img src="http://on2bs9q7q.bkt.clouddn.com/20170508149422726525135.png" alt="20170508149422726525135.png"></p>
<h3 id="3、添加yum源"><a href="#3、添加yum源" class="headerlink" title="3、添加yum源"></a>3、添加yum源</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/yum.repos.d/docker.repo <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span>
<span class="token punctuation">[</span>dockerrepo<span class="token punctuation">]</span>
name<span class="token operator">=</span>Docker Repository
baseurl<span class="token operator">=</span>https://yum.dockerproject.org/repo/main/centos/7/
enabled<span class="token operator">=</span>1
gpgcheck<span class="token operator">=</span>1
gpgkey<span class="token operator">=</span>https://yum.dockerproject.org/gpg
EOF
</code></pre>
<h3 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h3><p>sudo yum install docker-engine</p>
<h3 id="5、使用加速连接"><a href="#5、使用加速连接" class="headerlink" title="5、使用加速连接"></a>5、使用加速连接</h3><p>新建 docker 文件</p>
<p>echo DOCKER_OPTS=”-H unix:///var/run/docker.sock -H 0.0.0.0:2375 –registry-mirror=国内仓库地址” &gt;&gt; /etc/sysconfig/docker</p>
<p>修改 docker.service 添加 DOCKER_OPTS</p>
<p>vim /lib/systemd/system/docker.service</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
Description<span class="token operator">=</span>Docker Application Container Engine
Documentation<span class="token operator">=</span>https://docs.docker.com
After<span class="token operator">=</span>network-online.target firewalld.service
Wants<span class="token operator">=</span>network-online.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
Type<span class="token operator">=</span>notify
<span class="token comment" spellcheck="true"># the default is not to use systemd for cgroups because the delegate issues still</span>
<span class="token comment" spellcheck="true"># exists and systemd currently does not support the cgroup feature set required</span>
<span class="token comment" spellcheck="true"># for containers run by docker</span>

EnvironmentFile<span class="token operator">=</span>-/etc/sysconfig/docker

ExecStart<span class="token operator">=</span>/usr/bin/dockerd <span class="token variable">$DOCKER_OPTS</span>
<span class="token punctuation">..</span>.
</code></pre>
<h3 id="6、启动"><a href="#6、启动" class="headerlink" title="6、启动"></a>6、启动</h3><p>sudo systemctl start docker</p>
<p>查看 是否启动成功</p>
<p>ps -ef | grep docker</p>
<p>看见参数 则启动成功</p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>接下来 开始愉快的 Docker 之旅吧！</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dcos.io/docs/1.7/administration/installing/custom/system-requirements/install-docker-centos/" target="_blank" rel="external">https://dcos.io/docs/1.7/administration/installing/custom/system-requirements/install-docker-centos/</a></p>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Lombok 减少 Java Bean 代码]]></title>
      <url>http://binux.cn/2017/04/16/Lombok/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何使用Lombok 来减少 Java Bean 的代码”</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>lombok 就是一款可以简化 get/set/toString/equals 等方法的工具!</p>
<ul>
<li><a href="https://projectlombok.org" target="_blank" rel="external">官网</a></li>
<li><a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="external">GitHub</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="IDE安装"><a href="#IDE安装" class="headerlink" title="IDE安装"></a>IDE安装</h3><ul>
<li>IDEA<br><img src="http://on2bs9q7q.bkt.clouddn.com/20170416149232607786005.png" alt="20170416149232607786005.png"></li>
</ul>
<p>设置<br><img src="http://on2bs9q7q.bkt.clouddn.com/20170418149248619455974.png" alt="20170418149248619455974.png"></p>
<p><strong>Enable annotation processing</strong>勾选</p>
<ul>
<li><p>eclipse / myeclipse 手动安装 lombok (没试过)</p>
<ul>
<li><p>将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下</p>
</li>
<li><p>打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：</p>
<ul>
<li>-Xbootclasspath/a:lombok.jar</li>
<li>-javaagent:lombok.jar</li>
</ul>
</li>
<li><p>重启 eclipse / myeclipse</p>
</li>
</ul>
</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul>
<li><p>Maven 地址</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>Gradle 地址</p>
<pre class=" language-xml"><code class="language-xml">provided "org.projectlombok:lombok:1.16.16"
</code></pre>
</li>
<li><p><a href="https://projectlombok.org/downloads/lombok.jar" target="_blank" rel="external">jar 下载</a>手动添加</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><img src="http://on2bs9q7q.bkt.clouddn.com/2017041614923263831722.png" alt="2017041614923263831722.png"></p>
<p>直接类上加<code>@Data</code>注解 自动生成 getXxx()/setXxx()/toString()/equals(Object)等方法</p>
<h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><h4 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h4><p>如果被注解属值为 <code>null</code> 将抛出 <code>NullPointerException</code></p>
<p>可以修饰的对象为: FIELD(域),METHOD(方法),PARAMETER(参数),LOCAL_VARIABLE(局部变量)</p>
<h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>修饰 Java IO 类，会自动对资源调用close()方法关闭.</p>
<p>可以修饰的对象为: LOCAL_VARIABLE(局部变量)</p>
<h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter / @Setter"></a>@Getter / @Setter</h4><p>自动生成 <code>getXxx()</code>/<code>setXxx()</code></p>
<h5 id="Getter-lazy-true"><a href="#Getter-lazy-true" class="headerlink" title="@Getter(lazy=true)"></a>@Getter(lazy=true)</h5><p>当需要使用<code>get</code>获取的值需要非常大资源计算 可以创建一个<code>private final 变量</code>使用<code>@Getter(lazy=true)</code>修饰 用这次计算的值对其进行赋值。</p>
<p>可以修饰的对象为: LOCAL_VARIABLE(局部变量)，TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>自动生成 <code>toString()</code></p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h4><p>自动生成 <code>equals()</code> 和 <code>hashCode()</code> 方法</p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor"><a href="#NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor" class="headerlink" title="@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor"></a>@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor</h4><p>自动生成 构造无参方法、构造非<code>final</code>或<code>@NonNull</code>修饰对象的有参构造方法、构造全部参数构造方法</p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>组合注解相当于:<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter(全部)</code>、<code>@Setter(非final字段)</code>、<code>@RequiredArgsConstructor</code></p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p>被修饰的会加<code>final</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@AllArgsConstructor</code>、<code>@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)</code>、<code>@Getter</code></p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum)</p>
<h4 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h4><p>生成一个内部类<code>BuilderExampleBuilder</code>可以使用链式编程创建对象。</p>
<p>如:Person.builder().name(“Binux”).city(“NanJing.”).build();</p>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)、enum),CONSTRUCTOR(构造器),METHOD(方法)</p>
<h4 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h4><p>对修饰对象进行<code>try-catch</code> value为<code>Throwable&gt;[] value()</code> 可以声明异常类型</p>
<p>可以修饰的对象为: CONSTRUCTOR(构造器),METHOD(方法)</p>
<h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h4><p>对修饰方法内进行加锁 <code>value</code>值为锁名称 锁为<code>Object</code>类型 </p>
<p>如:<code>private final Object $lock = new Object[0];</code></p>
<p>可以修饰的对象为: METHOD(方法)</p>
<h4 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h4><p>当需要使用<code>get</code>获取的值需要非常大资源计算 可以创建一个<code>private final 变量</code> 用这次计算的值对其进行赋值。</p>
<ul>
<li><p>@CommonsLog</p>
<p>  <code>Creates private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</code></p>
</li>
<li><p>@JBossLog</p>
<p>  <code>Creates private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);</code></p>
</li>
<li><p>@Log</p>
<p>  <code>Creates private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());</code></p>
</li>
<li><p>@Log4j</p>
<p>  <code>Creates private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);</code></p>
</li>
<li><p>@Log4j2</p>
<p>  <code>Creates private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</code></p>
</li>
<li><p>@Slf4j</p>
<p>  <code>Creates private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</code></p>
</li>
<li><p>@XSlf4j</p>
<p>  <code>Creates private static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</code></p>
</li>
</ul>
<p>可以修饰的对象为: TYPE(类、接口(包括注解类型)</p>
<h2 id="详情请查看"><a href="#详情请查看" class="headerlink" title="详情请查看"></a>详情请查看</h2><p><a href="https://projectlombok.org/features/index.html" target="_blank" rel="external">https://projectlombok.org/features/index.html</a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>lombok 解决了成员类型修改后 还需重新生成getXxx/setXxx()/toString()等方法的问题，还是很实用的。</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK底层实现源码分析系列(四) HashSet源码分析]]></title>
      <url>http://binux.cn/2017/03/16/HastSet-Source-Code/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“合抱之木 生于毫末 九层之台 起于累土 千里之行 始于足下”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK 版本1.7</p>
</blockquote>
<h3 id="Collection-大家族"><a href="#Collection-大家族" class="headerlink" title="Collection 大家族"></a>Collection 大家族</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Java-Collections.png" alt="Collection"></center>

<blockquote>
<p>来源<a href="https://infinitescript.com/2014/10/java-collections-framework/" target="_blank" rel="external">Java Collections Framework</a></p>
</blockquote>
<h3 id="HashSet-继承树"><a href="#HashSet-继承树" class="headerlink" title="HashSet 继承树"></a>HashSet 继承树</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/HashSet.png" alt="HashSet"></center><br><center>HashSet</center>


<hr>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>HashSet它是基于HashMap实现的，HashSet底层使用HashMap来保存所有元素，因此HashSet的实现比较简单，相关HashSet的操作，基本上都是直接调用底层HashMap的相关方法来完成，我们应该为保存到HashSet中的对象覆盖hashCode()和equals()来保证</p>
<p>HashSet继承AbstractSet类，实现Set、Cloneable、Serializable接口。其中AbstractSet提供 Set 接口的骨干实现，从而最大限度地减少了实现此接口所需的工作。</p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><pre class=" language-java"><code class="language-java">
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5024744406713321676L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 保存数据的Map</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 用来保存Map的Value值</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 构造一个HashSet使用默认的参数
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashSet并把c的数据全部放入
     *
     * @param c 集合
     * @throws NullPointerException if the specified collection is null
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashSet使用指定容量和加载系数
     *
     * @param      initialCapacity   指定容量
     * @param      loadFactor        指定加载系数
     * @throws     IllegalArgumentException
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashSet使用指定容量
     *
     * @param      initialCapacity   指定容量
     * @throws     IllegalArgumentException
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 访问权限为包权限，不对外公开
     * 以指定指定容量和指定加载系数构造一个新的HashSet
     *
     * @param      initialCapacity   指定容量
     * @param      loadFactor        指定加载系数
     * @param      dummy             dummy 为标识 该构造函数主要作用是对LinkedHashSet起到一个支持作用
     * @throws     IllegalArgumentException
     */</span>
    <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dummy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>HashSet底层使用了HashMap实现,使其的实现过程变得非常简单,他仅使用了HashMap的Key用来存放数据,Value存放的是一个空对象,了解了HashMap的原理,HashSet的原理就一目了然了。</p>
<blockquote>
<p>HashMap 的<code>put()</code>方法添加<code>key-value</code>时，当新<code>put()</code>HashMap的Entry中key与集合中原有Entry的key相同（<code>hashCode()</code>返回值相等，通过<code>equals()</code>比较也返回 true),新添加的Entry的value会将覆盖原来Entry的value(HashSet中的value都是PRESENT),但key不会有任何改变,因此如果向HashSet中添加一个已经存在的元素时,新添加的集合元素将不会被放入HashMap中,原来的元素也不会有任何改变,这也就满足了Set中元素不重复的特性。</p>
</blockquote>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 添加一个元素
     *
     * @param e 元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 删除一个元素
     *
     * @param o 元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">==</span>PRESENT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 判断元素是否在集合中
     *
     * @param o 元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 获取Map中的keys
     *
     */</span>
    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HashSet的实现算是简单的,原因在于他直接使用了HashMap做底层存储,HashMap算比较复杂的集合,踩着巨人的肩膀,</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Source Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Framework实现源码分析(一) 源码阅读环境搭建]]></title>
      <url>http://binux.cn/2017/03/15/Spring-Framework/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“Spring Framework&nbsp;&nbsp;&nbsp;&nbsp;Java最重要的框架,没有之一”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Framework 是一个开源的Java／Java EE全功能栈（full-stack）的应用程序框架，以Apache许可证形式发布，也有.NET平台上的移植版本。该框架基于 Expert One-on-One Java EE Design and Development（ISBN 0-7645-4385-7）一书中的代码，最初由Rod Johnson和Juergen Hoeller等开发。Spring Framework提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。</p>
<blockquote>
<p>来源:<a href="https://zh.wikipedia.org/wiki/Spring_Framework" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>本篇源码搭建讲的是Mac平台搭建,其实平台无所谓,Win平台步骤是一样的</p>
<p>因为Spring的版本是4.x.x所以务必保证JDK的版本为1.8,由于Spring构建工具选择的是Gradle而不是Maven所以得下载Gradle</p>
<p>源码阅读环境使用的IDEA,可以直接编译从Github上Clone下来的源码</p>
<p>软件版本</p>
<ul>
<li>OS X El Capitan 10.11.6</li>
<li><strong>JDK 1.8</strong></li>
<li>IntelliJ IDEA 2016.2.4</li>
<li>gradle-3.4</li>
<li>Srping v4.3.7.RELEASE</li>
</ul>
<p>下载地址</p>
<ul>
<li><strong><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK 1.8</a></strong></li>
<li><a href="https://www.jetbrains.com/idea/#chooseYourEdition" target="_blank" rel="external">IntelliJ IDEA 2016.2.4</a></li>
<li><a href="https://gradle.org/releases" target="_blank" rel="external">gradle-3.4</a></li>
<li>Srping v4.3.7.RELEASE Clone:<code>https://github.com/spring-projects/spring-framework.git</code></li>
</ul>
<hr>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>GitHub直接Clone:</p>
<blockquote>
<p>优点:以后Spring更新直接Pull下就可以更新<br>缺点:速度慢到爆炸…</p>
</blockquote>
<h4 id="选择Checkout-form-GitHub"><a href="#选择Checkout-form-GitHub" class="headerlink" title="选择Checkout form GitHub"></a>选择Checkout form GitHub</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project1.png" alt="Spring"></center>

<h4 id="输入Spring-git地址"><a href="#输入Spring-git地址" class="headerlink" title="输入Spring git地址"></a>输入Spring git地址</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project2.png" alt="Spring"></center>

<h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><p>需要等很久,开了代理照样等很久…</p>
<h4 id="询问"><a href="#询问" class="headerlink" title="询问"></a>询问</h4><p>IDEA识别出了Gradle工程</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project3.png" alt="Spring"></center>

<h4 id="选择编译环境"><a href="#选择编译环境" class="headerlink" title="选择编译环境"></a>选择编译环境</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project4.png" alt="Spring"></center>

<blockquote>
<p>一定得选择JDK1.8<br>Gradle使用第三项本地输入下载解压的目录</p>
</blockquote>
<h4 id="等待-1"><a href="#等待-1" class="headerlink" title="等待"></a>等待</h4><p>Gradle和Maven一样需要去下载Jar包编译</p>
<p>第一次需要等很久…</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project5.png" alt="Spring"></center>

<h4 id="选择Modules"><a href="#选择Modules" class="headerlink" title="选择Modules"></a>选择Modules</h4><p>全部勾上</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project6.png" alt="Spring"></center>

<h4 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/success.png" alt="Spring"></center>

<hr>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>下载源码包:<a href="https://github.com/spring-projects/spring-framework/archive/v4.3.7.RELEASE.tar.gz" target="_blank" rel="external">点我下载</a></p>
<blockquote>
<p>优点:速度快<br>缺点:以后更新得自己手动下载覆盖更新</p>
</blockquote>
<h4 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project2-1.png" alt="Spring"></center>

<h4 id="选择源码目录"><a href="#选择源码目录" class="headerlink" title="选择源码目录"></a>选择源码目录</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project2-2.png" alt="Spring"></center>

<h4 id="选择Gradle工程"><a href="#选择Gradle工程" class="headerlink" title="选择Gradle工程"></a>选择Gradle工程</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project2-3.png" alt="Spring"></center>

<h4 id="选择编译环境-1"><a href="#选择编译环境-1" class="headerlink" title="选择编译环境"></a>选择编译环境</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/import-project2-4.png" alt="Spring"></center>

<blockquote>
<p>一定得选择JDK1.8<br>Gradle使用第三项本地输入下载解压的目录</p>
</blockquote>
<h4 id="等待编译"><a href="#等待编译" class="headerlink" title="等待编译"></a>等待编译</h4><p>等好久…</p>
<h4 id="成功-1"><a href="#成功-1" class="headerlink" title="成功"></a>成功</h4><center><img src="http://on2bs9q7q.bkt.clouddn.com/success.png" alt="Spring"></center>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>源码环境搭建完成 接下来就开始Spring源码的阅读之旅吧!</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Source Code </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK底层实现源码分析系列(四) HashMap源码分析]]></title>
      <url>http://binux.cn/2017/03/14/HastMap-Source-Code/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“合抱之木 生于毫末 九层之台 起于累土 千里之行 始于足下”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK 版本1.7<br>注:JDK1.8对HashMap进行重构 引入了红黑树 大幅优化HashMap的查找速度</p>
</blockquote>
<h3 id="Collection-大家族"><a href="#Collection-大家族" class="headerlink" title="Collection 大家族"></a>Collection 大家族</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Java-Collections.png" alt="Collection"></center>

<blockquote>
<p>来源<a href="https://infinitescript.com/2014/10/java-collections-framework/" target="_blank" rel="external">Java Collections Framework</a></p>
</blockquote>
<h3 id="LinkedList-继承树"><a href="#LinkedList-继承树" class="headerlink" title="LinkedList 继承树"></a>LinkedList 继承树</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/HashMap.png" alt="Stack"></center><br><center>HashMap</center>



<hr>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>HashMap是基于哈希表,实现Map接口的非同步集合,允许使用Null键和Null值,但是不保证映射的顺序，特别是他不保证集合中的顺序恒久不变</p>
<p>内部维护着一个数组用来存放数据,并且每个数组的元素都是一个单向链表</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/HashMap-Array.png" alt="Stack"></center><br><center>HaspMap底层存储结构</center>

<p>使用<code>get()</code>获取数据<code>put()</code>存放数据,内部基于hash算法会尽可能的将元素分布均匀在数组中</p>
<p>在查找元素时先计算hash值,因为对同一个对象取hash值返回的都是相同的,用hash值去取模数组的长度就可以快速获取那一条链表</p>
<p>但是求余操作本身也是一种高耗费的操作, 所以HashMap的size会通过算法永远为2的n次方, 可以利用位操作来高效实现求余。要找到数组中当前序号指向的元素，可以通过mod操作，<code>hash mod array length = array index</code>，优化后可以通过：<code>hash &amp; （array length－1） = array index</code>实现。比如一共有16个，<code>3&amp;（16－1）=3</code>，HashMap就是用这个方式来定位数组元素的，这种方式比取模的速度更快。</p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**
     * 默认容量
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span>

    <span class="token comment" spellcheck="true">/**
     * 最大容量 1073741824
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 默认加载系数
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * An empty table instance to share when the table is not inflated.
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_TABLE <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Entry类型的数组 实际上为一个链表
     */</span>
    <span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_TABLE<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * map的大小
     */</span>
    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * HashMap的容量阈值 当threshold="容量*系数"时HashMap就会增加容量
     * @serial
     */</span>
    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 加载系数
     *
     * @serial
     */</span>
    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 实现fail-fast机制
     */</span>
    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * int最大值
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
</code></pre>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>HashMap一共有四个构造方法</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashMap使用默认的容量16和默认的加载系数0.75
     *
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashMap使用指定容量,默认的加载系数0.75
     *
     * @param  initialCapacity 指定容量
     * @throws IllegalArgumentException
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashMap使用指定容量和加载系数
     *
     * @param  initialCapacity 指定容量
     * @param  loadFactor      加载系数
     * @throws IllegalArgumentException
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>
                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>
            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>
                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
        threshold <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空的HashMap并把m的数据全部放入
     *
     * @param   m 指定map
     * @throws  NullPointerException
     */</span>
    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                      DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">putAllForCreate</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>HashMap的内部类非常多,一共有9个,基本上都是用来遍历集合的,但是有个内部类非常重要<code>Entry</code>他是整个HashMap存储元素的对象,基本上所有的方法都会使用到他</p>
<ul>
<li>static class Entry<k,v> implements Map.Entry<k,v></k,v></k,v></li>
<li>private final class EntryIterator extends HashIterator<map.entry<k,v>&gt;</map.entry<k,v></li>
<li>private final class EntrySet extends AbstractSet<map.entry<k,v>&gt;</map.entry<k,v></li>
<li>private abstract class HashIterator<e> implements Iterator<e></e></e></li>
<li>private static class Holder</li>
<li>private final class KeyIterator extends HashIterator<k></k></li>
<li>private final class KeySet extends AbstractSet<k></k></li>
<li>private final class ValueIterator extends HashIterator<v></v></li>
<li>private final class Values extends AbstractCollection<v></v></li>
</ul>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>存储元素时调用<code>put(K key, V value)</code>调用<code>addEntry(int hash, K key, V value, int bucketIndex)</code>调用<code>createEntry(int hash, K key, V value, int bucketIndex)</code>进行插入元素</p>
<p>前面所说的取模优化就在<code>put()</code>代码的第13行,下面代码则保证HashMap的容量始终为2的指数幂</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// assert number >= 0 : "number must be non-negative";</span>
    <span class="token keyword">return</span> number <span class="token operator">>=</span> MAXIMUM_CAPACITY
            <span class="token operator">?</span> MAXIMUM_CAPACITY
            <span class="token operator">:</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> Integer<span class="token punctuation">.</span><span class="token function">highestOneBit</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>之所以调用这么多次是因为考虑到让子类继承/实现HashMap可以重写方法实现自己的特点操作</p>
</blockquote>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 在map中插入指定key-value
     * 如果之前的map中包含此key,则替换他
     *
     */</span>
    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 扩容2倍</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 允许key为null插入value</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算hash</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取数组的index （hash &amp; (table.length-1);）</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历链表</span>
            Object k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存在此key</span>
                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回替换value</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 无此key 添加元素i为数组索引</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 在指定数组index位置的链表最后插入新节点
     *
     * Subclass overrides this to alter the behavior of put method.
     */</span>
    <span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 扩容数组</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正新建节点的方法</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 新建链表节点
     */</span>
    <span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接定位 获取bucketIndex节点</span>
        table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 新建节点放入bucketIndex节点 并让其内部下个节点指向原来的节点</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 容量加1</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 根据对象计算hash值 此算法加入了高位计算，防止地位不变，高位变话时造成的hash冲突
     */</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> hashSeed<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> h <span class="token operator">&amp;&amp;</span> k <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Hashing<span class="token punctuation">.</span><span class="token function">stringHash32</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        h <span class="token operator">^=</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// This function ensures that hashCodes that differ only by</span>
        <span class="token comment" spellcheck="true">// constant multiples at each bit position have a bounded</span>
        <span class="token comment" spellcheck="true">// number of collisions (approximately 8 at default load factor).</span>
        h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 根据指定的key查找对应的value
     * key 可以为null
     *
     */</span>
    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">getForNullKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找key为null的value</span>
        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> null <span class="token operator">==</span> entry <span class="token operator">?</span> null <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 根据指定的key查找对应的value
     */</span>
    <span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getEntry</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算hash值</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 变量数组hash位置的链表</span>
             e <span class="token operator">!=</span> null<span class="token punctuation">;</span>
             e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Object k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回value</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>当HashMap中的元素越来越多的时候,hash的冲突几率也会越来越高，应为数组的长度是固定的16。不进行扩容的话会出现拉链过长的情况导致进行<code>get()</code>数据的时候效率变得非常低,所以HashMap会对数组进行扩容。</p>
<p>这时候HashMap最消耗性能的情况就来了,原数组的全部数据都必须通过<code>transfer()</code>全部重新计算放入新数组</p>
<p>那么什么情况下HashMap才会进行扩容呢？</p>
<p>当HashMap的元素个数超过数组<code>size&gt;size*loadFactor</code>如默认数组大小16,当<code>size &gt; (16*0.07=12)</code>时会将数组扩大至原来的2倍</p>
<p>如果要保证HashMap获取元素的效率建议利用空间换效率,在定义HashMap时将loadFactor设置的小一点,或者直接定义数组的长度,可以明显的提高HashMap的效率</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 设置HashMap的数组长度为两倍并从新计算hash值赋值到新数组中
     */</span>
    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>
        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>
        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 转移所有元素从当前的数组到新数组
     */</span>
    <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                e <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail-fast机制"></a>fail-fast机制</h3><p>HashMap也同样实现了fail-fast机制。</p>
<h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><p>初始化数据</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Before</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>
</code></pre>
<p>根据<code>entrySet()</code>获取HashMap的<code>key-value</code>Set集合遍历</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Key = "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Value = "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>根据<code>keySet()</code>获取HashMap的<code>key</code>Set集合遍历</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Key = "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">", Value = "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>根据<code>values()</code>获取HashMap的collection集合遍历</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Integer value <span class="token operator">=</span> null<span class="token punctuation">;</span>

        Iterator iterator<span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要问我阅读HashMap源码的收获,那就是我今天了解一个人</p>
<p><a href="http://baike.baidu.com/item/Doug%20Lea" target="_blank" rel="external">Doug Lea</a></p>
<p>Java界大牛,Collections就是他编写的,并且util.concurrent并发包也是他编写的,非常佩服他</p>
<p>HashMap的扩容操作效率非常非常低,在有大量数据时,初始化HashMap时应估算其大小,避免频繁的扩容</p>
<p>HashMap是非线程安全的,在迭代时如果有其他线程修改值,会触发fail-fast抛出异常</p>
<p>HashMap的计算index值使用的优化取余操作可以应用到其他场景</p>
<p>JDk1.8对于HashMap进行了重构,在单个链表节点大于8时会转换成红黑树来存储,大大提高了大量数据查找时的速度,有时间会去仔细研究下</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Source Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK底层实现源码分析系列(三) Stack源码分析]]></title>
      <url>http://binux.cn/2017/03/13/Stack-Source-Code/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“合抱之木 生于毫末 九层之台 起于累土 千里之行 始于足下”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK 版本1.7</p>
</blockquote>
<h3 id="Collection-大家族"><a href="#Collection-大家族" class="headerlink" title="Collection 大家族"></a>Collection 大家族</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Java-Collections.png" alt="Collection"></center>

<blockquote>
<p>来源<a href="https://infinitescript.com/2014/10/java-collections-framework/" target="_blank" rel="external">Java Collections Framework</a></p>
</blockquote>
<h3 id="Stack-继承树"><a href="#Stack-继承树" class="headerlink" title="Stack 继承树"></a>Stack 继承树</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Stack.png" alt="Stack"></center><br><center>Stack</center>


<hr>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Stack从字面上理解就是栈,先进后出,继承Vector也就是说他完全可以当做Vector使用,并且他内部只增加了5个方法用来实现栈的特性</p>
<p>之前已经讲过<a href="http://binux.cn/2017/03/09/Vector-Source-Code/">Vector的源码分析</a>了,本篇就只讲讲他是如何实现先进后出的</p>
<ul>
<li>public boolean empty()</li>
<li>public synchronized E peek()</li>
<li>public synchronized E pop()</li>
<li>public E push(E item)</li>
<li>public synchronized int search(Object o)</li>
</ul>
<p>从上面的方法可以看出Stack对取出数据的操作都加了synchronized,说明他是支持并发取出数据的</p>
<p>peek()和pop()的区别仅在于前者不会删除元素,后者会</p>
<p>另外多了个search(Object o) 搜索最后出现的此元素元素</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 本质上还是调用父类的方法lastIndexOf来确定最后出现此元素的索引
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Stack的源码还是很简单的,只比Vector多了几个方法用来实现栈的特性</p>
<p>其实实现栈可以使用LinkedList来实现,LinkedList和Stack实现栈的区别只在于LinkedList底层是使用链表来存储数据的,而Stack是使用数组存储的</p>
<p>在选择使用哪个的时候看是否需要频繁的删除或插入指定index的数据</p>
<p>如果频繁那只能选择LinkedList,反之一定得选择Stack,底层的存储数据的结构不同导致他们的使用场景都各有优势</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Source Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>http://binux.cn/2017/03/12/Hello-Hexo/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“Hello Hexo!!!”</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>花了一天的时间把Blog换了个主题 没办法第一眼看了这个主题就特别喜欢然后立马就换了</p>
<p>换主题倒不是太难,但是由于我之前使用的jekyll生成Blog,而这个主题是用Hexo生成Blog</p>
<p>他们的生成方式完全不同,个人感觉Hexo生成方便点,毕竟直接生成HTML静态页面,不用Github服务器在进行处理了</p>
<p>多亏了网上的大神们,没什么难度的完成了迁移,主要纠结我一天时间的是blog图片的选择上面,处女座加纠结狂,导致我看哪张图片都不顺眼</p>
<p>要找一个符合我个人审美的系列图得多难…</p>
<p>最后我实在不想找了,找了个还算可以的字体,操起我几百年没用过的PS,直接用文字作为Blog的背景图片</p>
<p>最后感觉效果还可以,至少看的过去了</p>
<p>就这样吧!</p>
<p>继续看我的源码去了</p>
<p>不想去BAT的程序猿都不是好程序猿 ^-^</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 随记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK底层实现源码分析系列(三) LinkedList源码分析]]></title>
      <url>http://binux.cn/2017/03/11/LinkedList-Source-Code/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“合抱之木 生于毫末 九层之台 起于累土 千里之行 始于足下”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK 版本1.7</p>
</blockquote>
<h3 id="Collection-大家族"><a href="#Collection-大家族" class="headerlink" title="Collection 大家族"></a>Collection 大家族</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Java-Collections.png" alt="Collection"></center>

<blockquote>
<p>来源<a href="https://infinitescript.com/2014/10/java-collections-framework/" target="_blank" rel="external">Java Collections Framework</a></p>
</blockquote>
<h3 id="LinkedList-继承树"><a href="#LinkedList-继承树" class="headerlink" title="LinkedList 继承树"></a>LinkedList 继承树</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/LinkedList.png" alt="LinkedList"></center><br><center>LinkedList</center>

<p>LinkedList从数据结构层面上说算是一个双向链表 继承于AbstractSequentialList实现了List、Deque、Cloneable、Serializable</p>
<p>有三个重要的成员变量first(链表的头节点)、last(链表的尾节点)、size(链表的长度)</p>
<p>Node为存储数据的类 共有3个变量item(元素)、next(此元素的下一个节点)、prev(此元素的上一个节点)</p>
<hr>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="链表和数组"><a href="#链表和数组" class="headerlink" title="链表和数组"></a>链表和数组</h3><ul>
<li><p>数组：<br><br>数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素。但是如果要在数组中增加一个元素，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。同样的道理，如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少或不插入和删除元素，就应该用数组。</p>
</li>
<li><p>链表：<br><br>链表恰好相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。比如：上一个元素有个指针指到下一个元素，以此类推，直到最后一个元素。如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。如果应用需要经常插入和删除元素你就需要用链表数据结构了。</p>
</li>
<li><p>区别：<br><br>数组静态分配内存，链表动态分配内存；<br><br>数组在内存中连续，链表不连续；<br><br>数组元素在栈区，链表元素在堆区；<br><br>数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；<br><br>数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。<br></p>
</li>
</ul>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>LinkedList一共有俩个构造方法，一个是无参的，新new一个size为空的LinkedList，另一个是传入一个Collection类型的集合使用addAll(size,c)把集合中的全部数据加入到新建的LinkedList</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 在链表指定位置插入集合中所有数据
     *
     * @param index index at which to insert the first element
     *              from the specified collection
     * @param c collection containing elements to be added to this list
     * @return {@code true} if this list changed as a result of the call
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws NullPointerException if the specified collection is null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// index >= 0 &amp;&amp; index &lt;= size;</span>
        <span class="token comment" spellcheck="true">// false throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span>
        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numNew <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 传入集合为空</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred<span class="token punctuation">,</span> succ<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// pred为被插入节点前一个节点 succ为index节点 index&lt;size时用于移动index节点succ.prev = pred;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 即插入链表的最后</span>
            succ <span class="token operator">=</span> null<span class="token punctuation">;</span>
            pred <span class="token operator">=</span> last<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取最后一个节点</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 插入链表中间</span>
            succ <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取index前一个节点</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            E e <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> o<span class="token punctuation">;</span>
            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 新new节点 pred指向 (index == size)(pred->last)</span>
            <span class="token comment" spellcheck="true">// 新new节点 pred指向 (index &lt; size)(pred->succ.prev)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 链表为空</span>
                first <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新节点为头节点</span>
            <span class="token keyword">else</span>
                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上次循环的节点的next设置为本次循环节点</span>
            pred <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置下次循环的pred节点为本次循环增加的节点</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// index == size</span>
            last <span class="token operator">=</span> pred<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置last节点为循环的最后一个节点</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置循环的最后一个节点的next为index节点</span>
            succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置设置index的prev为循环的最后一个节点</span>
        <span class="token punctuation">}</span>

        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fail-fast</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>LinkedList插入数据的方法有</p>
<ul>
<li>public boolean add(E e)</li>
<li>public void add(int index, E element)</li>
<li>public boolean addAll(Collection&lt;? extends E&gt; c)</li>
<li>public boolean addAll(int index, Collection&lt;? extends E&gt; c)</li>
<li>public void addFirst(E e)</li>
<li>public void addLast(E e)</li>
<li>private void linkFirst(E e)</li>
<li>void linkLast(E e)</li>
<li>void linkBefore(E e, Node<e> succ)</e></li>
<li>public boolean offerFirst(E e)</li>
<li>public boolean offerLast(E e)</li>
<li>public void push(E e)</li>
<li>public E set(int index, E element)</li>
<li>等</li>
</ul>
<blockquote>
<p>由于添加方法太多 本篇只会讲add(int index, E element) 其他插入方法都类似</p>
</blockquote>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 在index之前插入element元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断索引 index >= 0 &amp;&amp; index &lt;= size</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 即链表尾部增加</span>
            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 在index之前插入element元素 (建议画图看)
     */</span>
    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// assert succ != null;</span>
        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取index节点的前一个节点</span>
        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新建节点 赋值 把index的prev赋给新建节点prev</span>
        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置index节点的prev为新节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 即链表为空</span>
            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置新节点为头节点</span>
        <span class="token keyword">else</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置index节点的前一个节点的下个节点为newNode</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>LinkedList删除数据的方法有</p>
<ul>
<li>public void clear()</li>
<li>public E poll()</li>
<li>public E remove()</li>
<li>public E remove(int index)</li>
<li>public boolean remove(Object o)</li>
<li>public E removeFirst()</li>
<li>public boolean removeFirstOccurrence(Object o)</li>
<li>public boolean removeLastOccurrence(Object o)</li>
<li>public E removeLast()</li>
<li>public E pollFirst()</li>
<li>public E pollLast()</li>
<li>public E pop()</li>
<li>private E unlinkFirst(Node<e> f)</e></li>
<li>等</li>
</ul>
<p>由于方法太多 而且都类似 本篇只会选择unlinkFirst()方法分析</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 移除first节点
     */</span>
    <span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;</span>
        <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取first的元素</span>
        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取first的下一个元素</span>
        f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除first的元素</span>
        f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除first指向的元素 让GC回收</span>
        first <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置first为删除节点的下一个节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 下个节点为空</span>
            last <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 说明只有一个first节点不为null</span>
        <span class="token keyword">else</span>
            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置first的下个节点为null</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回删除数据</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 替换指定位置的元素
     *
     */</span>
    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查index是否越界</span>
        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得指定index元素</span>
        E oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 活动被替换的元素</span>
        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改元素</span>
        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回被修改的元素</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>LinkedList查询数据的方法有</p>
<ul>
<li>public E getFirst():获取First节点元素</li>
<li>public E getLast():获取Last节点元素</li>
<li>Node<e> node(int index):获取指定index节点元素</e></li>
<li>public E peek():获取First节点元素</li>
<li>public E peekFirst():获取First节点元素</li>
<li>public E peekLast():获取Last节点元素</li>
<li>public E poll():删除First节点并返回删除元素</li>
<li>public E pollFirst():删除First节点并返回删除元素</li>
<li>public E pollLast():删除Last节点并返回删除元素</li>
<li>public E pop():删除First节点并返回删除元素</li>
<li>等</li>
</ul>
<p>由于方法太多 而且都类似 本篇只会选择get()方法分析</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 获取指定index元素
     */</span>
    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 返回指定index的节点元素 会更具index的值判断是从前找还是从后找
     */</span>
    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// assert isElementIndex(index);</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// index &lt; size / 2</span>
            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// index > size / 2</span>
            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>LinkedList本质上就是一个双向链表，不会像ArrayList那样，空间不足时去扩容(array copy是一件效率非常低的操作)这样做的好处就是处理大量数据时，存储数据的时间比ArrayList要低很多。</p>
<p>另外LinkedList实现了Deque接口，可以通过内部,实现FIFO(先进先出)的队列或者LIFO(后进先出)的栈</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Source Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK底层实现源码分析系列(一) ArrayList源码分析]]></title>
      <url>http://binux.cn/2017/03/09/ArrayList-Source-Code/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“合抱之木 生于毫末 九层之台 起于累土 千里之行 始于足下”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK 版本1.7</p>
</blockquote>
<h3 id="Collection-大家族"><a href="#Collection-大家族" class="headerlink" title="Collection 大家族"></a>Collection 大家族</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Java-Collections.png" alt="Collection"></center>

<blockquote>
<p>来源<a href="https://infinitescript.com/2014/10/java-collections-framework/" target="_blank" rel="external">Java Collections Framework</a></p>
</blockquote>
<h3 id="ArrayList-继承树"><a href="#ArrayList-继承树" class="headerlink" title="ArrayList 继承树"></a>ArrayList 继承树</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/ArrayList.png" alt="ArrayList"></center><br><center>ArrayList</center>

<hr>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 序列化ID
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 8683452581122892189L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 默认的初始化容量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 用于空实例的数组
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 真正存放元素的数组
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * List的大小
     *
     * @serial
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 数组分配的最大大小
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p><strong>transient</strong>为Java关键字 作用是序列化时 忽略修饰的对象</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 构造一个空的list 容量为指定的initialCapacity值大小
     *
     * @param  initialCapacity  list的容量
     * @throws IllegalArgumentException 如果指定的初始化容量小于0
     *
     */</span>
    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>
                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个空List 容量为10
     */</span>
    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 将提供的集合转成数组返回给elementData（返回若不是Object[]将调用Arrays.copyOf方法将其转为Object[]）。
     *
     * @param c 提供的集合
     * @throws NullPointerException 如果指定的collection 为 null
     */</span>
    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="lt-增-gt"><a href="#lt-增-gt" class="headerlink" title="&lt;增&gt;"></a>&lt;增&gt;</h4><p>boolean add(E e)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 增加一个元素
     *
     * @param e 追加这个元素到list的最后
     * @return true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 确保数组的容量并且Increments modCount!! fail-fast策略</span>
        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>void add(int index, E element)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 在list的指定位置插入一个元素. 把指定位置右边的 (adds one to their indices).
     *
     * @param index 指定索引
     * @param element 插入的元素
     * @throws IndexOutOfBoundsException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 检查 (0 &lt; index &lt; size)?</span>

        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 确保数组的容量并且Increments modCount!! fail-fast策略</span>
        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// src:源数组；</span>
                         index<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// srcPos:源数组要复制的起始位置；</span>
                         elementData<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// dest:目的数组；</span>
                         index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// destPos:目的数组放置的起始位置；</span>
                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// length:复制的长度。</span>
        <span class="token comment" spellcheck="true">// 把原来的数组从index位置向后移动一个位置</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// index 位置插入元素</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// list.size++</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>boolean addAll(Collection&lt;? extends E&gt; c)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 添加一个集合至list
     *
     * @param c 集合对象
     * @return true
     * @throws NullPointerException 如果指定的集合为空
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取传入集合的Object[] elementData</span>
        <span class="token comment" spellcheck="true">// 举例ArrayList重写的toArray()方法内容 Arrays.copyOf(elementData, size);</span>
        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 确保数组的容量并且Increments modCount fail-fast策略</span>
        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 从elementData数组的size位置开始 添加a数组0到numNew个元素</span>
        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 重新计算size</span>
        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-删-gt"><a href="#lt-删-gt" class="headerlink" title="&lt;删&gt;"></a>&lt;删&gt;</h4><p>E remove(int index)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 删除一个指定位置的元素 并把整个数组向index位置移动1
     *
     * @param 需要删除的元素索引
     * @return 返回删除的元素
     * @throws IndexOutOfBoundsException
     */</span>
    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断(index >= size)? throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span>

        modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fail-fast策略</span>
        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取删除的元素</span>

        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要向前移动元素的数量</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// numMoved=0 为正好是最后一个元素</span>
            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// src:源数组；</span>
                             index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// srcPos:源数组要复制的起始位置；</span>
                             elementData<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// dest:目的数组；</span>
                             index<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// destPos:目的数组放置的起始位置；</span>
                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// length:复制的长度。</span>
        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 数组的最后一个位置置为null 让GC回收</span>

        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>boolean remove(Object o)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 如果指定元素存在，删除list中第一个出现的指定元素
     *
     * @param o 需要删除的元素
     * @return boolean
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 跳过rangeCheck(index)检查的remove(int index)方法</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 跳过rangeCheck(index)检查的remove(int index)方法</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>void fastRemove(int index)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
     * 私有的删除方法 跳过rangeCheck(index)检查的remove(int index)方法
     * 返回删除的元素
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            modCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>
                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>
            elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>boolean removeAll(Collection&lt;?&gt; c)</p>
<pre class=" language-java"><code class="language-java">

    <span class="token comment" spellcheck="true">/**
     * 删除当前集合中所有包含在指定集合的元素
     *
     * @param c 指定集合
     * @return boolean
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>boolean retainAll(Collection&lt;?&gt; c)</p>
<pre class=" language-java"><code class="language-java">

    <span class="token comment" spellcheck="true">/**
     * b保留当前集合中所有包含在指定集合的元素
     *
     * @param c 指定集合
     * @return boolean
     */</span>
     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre>
<p>boolean batchRemove(Collection&lt;?&gt; c, boolean complement)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 批量删除
     *
     * @param c 指定集合
     * @param complement
     * @return boolean
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>
           <span class="token comment" spellcheck="true">// 获取当前list的elementData</span>
           <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
           <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
           <span class="token keyword">try</span> <span class="token punctuation">{</span>
               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>
                       elementData<span class="token punctuation">[</span>w<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
                   <span class="token comment" spellcheck="true">// false    elementData - c</span>
                   <span class="token comment" spellcheck="true">// true     elementData ∩ c</span>
                   <span class="token comment" spellcheck="true">// c.contains(elementData[r]) true or false</span>
                   <span class="token comment" spellcheck="true">// complement == ture  --> retainAll(Collection&lt;?> c)</span>
                   <span class="token comment" spellcheck="true">//   elementData[]中存的是elementData和c共同有的元素集合</span>
                   <span class="token comment" spellcheck="true">// complement == fales --> removeAll(Collection&lt;?> c)</span>
                   <span class="token comment" spellcheck="true">//   elementData[]中存的是elementData去除c中有的元素集合</span>
           <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
               <span class="token comment" spellcheck="true">// Preserve behavioral compatibility with AbstractCollection,</span>
               <span class="token comment" spellcheck="true">// even if c.contains() throws.</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c.contains() 抛出异常才会执行 正常r == size</span>
                   System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                                    elementData<span class="token punctuation">,</span> w<span class="token punctuation">,</span>
                                    size <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   w <span class="token operator">+=</span> size <span class="token operator">-</span> r<span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// w != size 证明elementData中和c不全是共同元素或者elementData中删除了c中的元素</span>
                   <span class="token comment" spellcheck="true">// clear to let GC do its work</span>
                   <span class="token comment" spellcheck="true">// 从w开始遍历 后面全置为null 让GC回收</span>
                   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                       elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>
                   modCount <span class="token operator">+=</span> size <span class="token operator">-</span> w<span class="token punctuation">;</span>
                   size <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 出现计算size</span>
                   modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除成功</span>
               <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
           <span class="token keyword">return</span> modified<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>protected void removeRange(int fromIndex, int toIndex)</p>
<blockquote>
<p>受保护不能直接调用<br><br>  使用list.subList(start,end).clear();调用此方法<br><br>  查看<a href="http://www.cnblogs.com/hzmark/archive/2012/12/19/ArrayList_removeRange.html" target="_blank" rel="external">removeRange详细分析</a></p>
</blockquote>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 移除指定范围的元素
     *
     * @throws IndexOutOfBoundsException 如果fromIndex和toIndex不在这个范围内
     *         ({fromIndex &lt; 0 || fromIndex >= size() || toIndex > size() || toIndex &lt; fromIndex})
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> toIndex<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span>
                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 把toIndex之后的元素整体移动到fromIndex后</span>

        <span class="token comment" spellcheck="true">// clear to let GC do its work</span>
        <span class="token keyword">int</span> newSize <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>toIndex<span class="token operator">-</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// newSize后的元素置为null 让GC回收</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> newSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        size <span class="token operator">=</span> newSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>void clear()</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 移除list中全部元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 让GC工作</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>

        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-改-gt"><a href="#lt-改-gt" class="headerlink" title="&lt;改&gt;"></a>&lt;改&gt;</h4><p>E set(int index, E element)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 替换指定索引位置的元素
     *
     * @param index 需要替换的元素索引
     * @param element 元素
     * @return 之前索引的元素
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */</span>
    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 校验index</span>

        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取指定位置的元素</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 替换成新元素</span>
        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回新旧元素</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-查-gt"><a href="#lt-查-gt" class="headerlink" title="&lt;查&gt;"></a>&lt;查&gt;</h4><p>E get(int index)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 从指定位置获取一个元素
     *
     * @param  需要返回元素的索引
     * @return 返回指定list指定位置的元素
     * @throws IndexOutOfBoundsException
     */</span>
    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查index</span>

        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回元素</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>boolean contains(Object o)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回true表示list中含有指定元素
     *
     * @param o 指定的元素
     * @return boolean
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>int indexOf(Object o)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回list中第一个出现指定元素的索引
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>int lastIndexOf(Object o)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回list中最后一个出现指定元素的索引
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>int size()</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回list的大小
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>boolean isEmpty()</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 判断list是否为空
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-其他-gt"><a href="#lt-其他-gt" class="headerlink" title="&lt;其他&gt;"></a>&lt;其他&gt;</h4><p>Object clone()</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回一个浅复制的ArrayList实例
     *
     * @return 返回浅克隆的Object
     */</span>
    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
            ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">.</span>elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">.</span>modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> v<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this shouldn't happen, since we are Cloneable</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>List<e> subList(int fromIndex, int toIndex)</e></p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 它返回原来list的从[fromIndex  toIndex)之间这一部分的视图(为一个类部类)
     * 之所以说是视图 是因为实际上 返回的list是靠原来的list支持的
     * 你对原来的list和返回的list做的“非结构性修改”(non-structural changes) 都会影响到彼此对方
     * “非结构性修改” 是指不涉及到list的大小改变的修改 相反 结构性修改 指改变了list大小的修改
     *
     * 如果对返回的list线性修改 那么原来的list大小也会改变
     * 如果修改了原list的大小 那么之前产生的子list将会失效
     *
     */</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">subListRangeCheck</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>void trimToSize()</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 调整elementData的容量为size
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="list扩容"><a href="#list扩容" class="headerlink" title="list扩容"></a>list扩容</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// list进行增加时执行</span>
    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// EMPTY_ELEMENTDATA为空[]</span>
            minCapacity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// DEFAULT_CAPACITY 10</span>
        <span class="token punctuation">}</span>

        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Increments modCount!!</span>

        <span class="token comment" spellcheck="true">// 对溢出进行考虑</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 增加数组容量 确保可以容纳元素
     *
     * @param minCapacity the desired minimum capacity
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// overflow-conscious code</span>
        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// oldCapacity >> 1 == oldCapacity / 2 (扩容1.5倍)</span>
        <span class="token comment" spellcheck="true">// 如果oldCapacity + (oldCapacity >> 1)超过Integer.MAX_VALUE  newCapacity == -1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// newCapacity > MAX_ARRAY_SIZE</span>
            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置为最大容量</span>
        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>
        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 扩大数组的大小</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>
                Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>
                MAX_ARRAY_SIZE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail-fast机制"></a>fail-fast机制</h3><h4 id="JDK-ArrayList-API"><a href="#JDK-ArrayList-API" class="headerlink" title="JDK ArrayList API"></a>JDK ArrayList API</h4><blockquote>
<p>注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。</p>
</blockquote>
<h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><p>有两个线程（线程A，线程B）其中线程A负责遍历list 线程B修改list</p>
<p>线程A在遍历list过程的某个时候（此时expectedModCount = modCount = N）线程启动</p>
<p>同时线程B增加一个元素 这时modCount的值发生改变（modCount++ = N + 1）</p>
<p>线程A继续遍历执行next方法时，通告checkForComodification()方法发现expectedModCount = N</p>
<p>而modCount = N + 1 两者不等 这时就抛出ConcurrentModificationException 异常 从而产生fail-fast机制。</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用CopyOnWriteArrayList来替换ArrayList</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是本人第一次看JDK源码 学到了挺多写代码的技巧 大牛写的代码就是不一样</p>
<p>这篇源码分析其实算是我自己笔记 因为我是复制一段段源码 来慢慢分析里面的流程的</p>
<p>就像System.arraycopy()的参数 说实话我真没怎么用过 自己也是查API 看他是怎么实现的</p>
<p>下一个会看Vector的源码 我所了解的 他们俩这是一个线程安全一个不安全 其他还有什么不一样就不知道了</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Source Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Alibaba 2018实习生招聘 在线编程题解答]]></title>
      <url>http://binux.cn/2017/03/09/Alibaba-Arithmetic/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“阿里巴巴 2018实习生 在线编程 题目解答”</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> 对于一个长度为N的整型数组A， 数组里所有的数都是正整数，对于两个满足0&lt;=X &lt;= Y &lt;N的整数，A[X], A[X+1] … A[Y]构成A的一个切片，记作(X, Y)。</p>
<p> 用三个下标 m1, m2, m3下标满足条件 0 &lt; m1, m1 + 1 &lt; m2, m2 +1 &lt; m3 &lt; N – 1。</p>
<p> 可以把这个整型数组分成(0, m1-1), (m1+1, m2-1), (m2+1, m3-1), (m3+1, N-1) 四个切片。如果这四个切片中的整数求和相等，称作“四等分”。</p>
<p> 编写一个函数，求一个给定的整型数组是否可以四等分，如果可以，返回一个布尔类型的true，如果不可以返回一个布尔类型的false。</p>
<p> 限制条件： 数组A最多有1,000,000项，数组中的整数取值范围介于-1,000,000到1,000,000之间。</p>
<p> 要求： 函数的计算复杂度为O(N)，使用的额外存储空间（除了输入的数组之外）最多为O(N)。</p>
<p> 例子：</p>
<p> 对于数组A=[2, 5, 1, 1, 1, 1, 4, 1, 7, 3, 7] 存在下标 2, 7, 9使得数组分成四个分片[2, 5], [1, 1, 1, 4], [7], [7]，这三个分片内整数之和相等，所以对于这个数组，函数应该返回true。</p>
<p> 对于数组 A=[10, 2, 11, 13, 1, 1, 1, 1, 1]， 找不到能把数组四等分的下标，所以函数应该返回false。</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>binux<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/** 请完成下面这个函数，实现题目要求的功能 **/</span>
    <span class="token comment" spellcheck="true">/** 当然，你也可以不按照这个模板来作答，完全按照自己的想法来 ^-^  **/</span>
    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> null <span class="token operator">||</span> A<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> indexl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> indexr <span class="token operator">=</span> A<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> suml <span class="token operator">=</span> A<span class="token punctuation">[</span>indexl<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sumr <span class="token operator">=</span> A<span class="token punctuation">[</span>indexr<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>indexl <span class="token operator">&lt;</span> indexr<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>suml <span class="token operator">&lt;</span> sumr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                indexl<span class="token operator">++</span><span class="token punctuation">;</span>
                suml <span class="token operator">+=</span> A<span class="token punctuation">[</span>indexl<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suml <span class="token operator">></span> sumr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                indexr<span class="token operator">--</span><span class="token punctuation">;</span>
                sumr <span class="token operator">+=</span> A<span class="token punctuation">[</span>indexr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>indexl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> indexr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> suml<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> check<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    indexl<span class="token operator">++</span><span class="token punctuation">;</span>
                    suml <span class="token operator">+=</span> A<span class="token punctuation">[</span>indexl<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> indexl <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> indexr <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> suml <span class="token operator">=</span> A<span class="token punctuation">[</span>indexl<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sumr <span class="token operator">=</span> A<span class="token punctuation">[</span>indexr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>indexr <span class="token operator">></span> indexl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>suml <span class="token operator">&lt;</span> sumr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                indexl<span class="token operator">++</span><span class="token punctuation">;</span>
                suml <span class="token operator">+=</span> A<span class="token punctuation">[</span>indexl<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suml <span class="token operator">></span> sumr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                indexr<span class="token operator">--</span><span class="token punctuation">;</span>
                sumr <span class="token operator">+=</span> A<span class="token punctuation">[</span>indexr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suml <span class="token operator">==</span> sumr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>indexr <span class="token operator">-</span> indexl <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> suml <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//ArrayList&lt;Integer> inputs = new ArrayList&lt;Integer>();</span>
        <span class="token comment" spellcheck="true">//Scanner in = new Scanner(System.in);</span>
        <span class="token comment" spellcheck="true">//String line = in.nextLine();</span>
        <span class="token comment" spellcheck="true">//while(line != null &amp;&amp; !line.isEmpty()) {</span>
        <span class="token comment" spellcheck="true">//    int value = Integer.parseInt(line.trim());</span>
        <span class="token comment" spellcheck="true">//    if(value == 0) break;</span>
        <span class="token comment" spellcheck="true">//    inputs.add(value);</span>
        <span class="token comment" spellcheck="true">//    line = in.nextLine();</span>
        <span class="token comment" spellcheck="true">//}</span>
        <span class="token comment" spellcheck="true">//int[] A = new int[inputs.size()];</span>
        <span class="token comment" spellcheck="true">//for(int i=0; i&lt;inputs.size(); i++) {</span>
        <span class="token comment" spellcheck="true">//    A[i] = inputs.get(i).intValue();</span>
        <span class="token comment" spellcheck="true">//}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
        Boolean res <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>A1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道算法题 不是太难 毕竟是招实习生</p>
<p>并且阿里还说了 这道题目并不会影响最后的录用 只是作为一个参考</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Alibaba </tag>
            
            <tag> Arithmetic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK底层实现源码分析系列(二) Vector源码分析]]></title>
      <url>http://binux.cn/2017/03/09/Vector-Source-Code/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“合抱之木 生于毫末 九层之台 起于累土 千里之行 始于足下”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK 版本1.7</p>
</blockquote>
<h3 id="Collection-大家族"><a href="#Collection-大家族" class="headerlink" title="Collection 大家族"></a>Collection 大家族</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Java-Collections.png" alt="Collection"></center>

<blockquote>
<p>来源<a href="https://infinitescript.com/2014/10/java-collections-framework/" target="_blank" rel="external">Java Collections Framework</a></p>
</blockquote>
<h3 id="Vector-继承树"><a href="#Vector-继承树" class="headerlink" title="Vector 继承树"></a>Vector 继承树</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Vector.png" alt="Vector"></center><br><center>Vector</center>

<hr>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 序列化ID
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>2767605614048989439L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 容量增加时的数量
     * @serial
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 存放数据的数组
     *
     * @serial
     */</span>
    <span class="token keyword">protected</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 元素的个数 == size
     *
     * @serial
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> elementCount<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 数组分配的最大大小
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p><strong>transient</strong>为Java关键字 作用是序列化时 忽略修饰的对象</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 默认构造方法 构造一个容量为10的Vector
     */</span>
    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 构造一个指定容量的Vector 增长速度为默认2倍
     *
     * @param   initialCapacity   the initial capacity of the vector
     * @throws IllegalArgumentException if the specified initial capacity
     *         is negative
     */</span>
    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 构造一个指定数组、增长容量的Vector
     *
     * @param   initialCapacity     初始化容量
     * @param   capacityIncrement   增长大小
     * @throws IllegalArgumentException
     */</span>
    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>
                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 将提供的集合转成数组返回给elementData（返回若不是Object[]将调用Arrays.copyOf方法将其转为Object[]）。
     *
     * @param c 提供的集合
     * @throws NullPointerException 如果指定的collection 为 null
     */</span>
    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementCount <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> elementCount<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>只选取了ArrayList中没有的一些方法<br><br>Vector其余方法除了加了synchronized关键字 其他都差不多 就不贴出来了</p>
</blockquote>
<h4 id="lt-增-gt"><a href="#lt-增-gt" class="headerlink" title="&lt;增&gt;"></a>&lt;增&gt;</h4><h5 id="void-insertElementAt-E-obj-int-index"><a href="#void-insertElementAt-E-obj-int-index" class="headerlink" title="void insertElementAt(E obj, int index)"></a>void insertElementAt(E obj, int index)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 在指定index插入一个元素
     *
     * @param      obj     the component to insert
     * @param      index   where to insert the new component
     * @throws ArrayIndexOutOfBoundsException if the index is out of range
     *         ({@code index &lt; 0 || index > size()})
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">insertElementAt</span><span class="token punctuation">(</span>E obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index
                                                     <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 确保数组容量够</span>
        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementCount <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        elementCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h5 id="boolean-addAll-int-index-Collection-lt-extends-E-gt-c"><a href="#boolean-addAll-int-index-Collection-lt-extends-E-gt-c" class="headerlink" title="boolean addAll(int index, Collection&lt;? extends E&gt; c)"></a>boolean addAll(int index, Collection&lt;? extends E&gt; c)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 从index的位置插入c集合中的全部元素
     *
     * @param index 指定index
     * @param c 元素集合
     * @return boolean
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> elementCount<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> elementCount <span class="token operator">-</span> index<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> numNew<span class="token punctuation">,</span>
                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementCount <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>
        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-删-gt"><a href="#lt-删-gt" class="headerlink" title="&lt;删&gt;"></a>&lt;删&gt;</h4><h5 id="boolean-removeElement-Object-obj"><a href="#boolean-removeElement-Object-obj" class="headerlink" title="boolean removeElement(Object obj)"></a>boolean removeElement(Object obj)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 删除指定元素
     *
     * @param   obj   元素对象
     * @return  boolean
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">removeElementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h5 id="void-removeElementAt-int-index"><a href="#void-removeElementAt-int-index" class="headerlink" title="void removeElementAt(int index)"></a>void removeElementAt(int index)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 删除指定index的元素
     *
     * @param      index   指定index
     * @throws ArrayIndexOutOfBoundsException
     *         ({@code index &lt; 0 || index >= size()})
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">removeElementAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">" >= "</span> <span class="token operator">+</span>
                                                     elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> elementCount <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        elementCount<span class="token operator">--</span><span class="token punctuation">;</span>
        elementData<span class="token punctuation">[</span>elementCount<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* to let gc do its work */</span>
    <span class="token punctuation">}</span>
</code></pre>
<h5 id="void-removeAllElements"><a href="#void-removeAllElements" class="headerlink" title="void removeAllElements()"></a>void removeAllElements()</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 删除全部元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">removeAllElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Let gc do its work</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elementCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>

        elementCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-改-gt"><a href="#lt-改-gt" class="headerlink" title="&lt;改&gt;"></a>&lt;改&gt;</h4><h5 id="E-set-int-index-E-element"><a href="#E-set-int-index-E-element" class="headerlink" title="E set(int index, E element)"></a>E set(int index, E element)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 修改指定index的元素
     *
     * @param index 指定index
     * @param element 需要替换的元素
     * @return 被替换的元素
     * @throws ArrayIndexOutOfBoundsException
     *         ({@code index &lt; 0 || index >= size()})
     * @since 1.2
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> elementCount<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h5 id="void-setElementAt-E-obj-int-index"><a href="#void-setElementAt-E-obj-int-index" class="headerlink" title="void setElementAt(E obj, int index)"></a>void setElementAt(E obj, int index)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 修改指定index的元素
     * @param      obj     需要替换的对象
     * @param      index   index
     * @throws ArrayIndexOutOfBoundsException
     *         ({@code index &lt; 0 || index >= size()})
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setElementAt</span><span class="token punctuation">(</span>E obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">" >= "</span> <span class="token operator">+</span>
                                                     elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h5 id="void-setSize-int-newSize"><a href="#void-setSize-int-newSize" class="headerlink" title="void setSize(int newSize)"></a>void setSize(int newSize)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 如果新的Size大于当前size 调整数组的容量
     *
     * @param  newSize   the new size of this vector
     * @throws ArrayIndexOutOfBoundsException if the new size is negative
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newSize <span class="token operator">></span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> newSize <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elementCount <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        elementCount <span class="token operator">=</span> newSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-查-gt"><a href="#lt-查-gt" class="headerlink" title="&lt;查&gt;"></a>&lt;查&gt;</h4><h5 id="int-indexOf-Object-o-int-index"><a href="#int-indexOf-Object-o-int-index" class="headerlink" title="int indexOf(Object o, int index)"></a>int indexOf(Object o, int index)</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回从index位置的出现的第一个指定的元素index
     *
     * @param o 需要查询的元素
     * @param index index
     * @return
     *          -1 表示无
     * @throws IndexOutOfBoundsException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elementCount <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elementCount <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h5 id="int-capacity"><a href="#int-capacity" class="headerlink" title="int capacity()"></a>int capacity()</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 返回当前数组长度
     *
     * @return  the current capacity (the length of its internal
     *          data array, kept in the field {@code elementData}
     *          of this vector)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="lt-其他-gt"><a href="#lt-其他-gt" class="headerlink" title="&lt;其他&gt;"></a>&lt;其他&gt;</h4><h5 id="List-subList-int-fromIndex-int-toIndex"><a href="#List-subList-int-fromIndex-int-toIndex" class="headerlink" title="List subList(int fromIndex, int toIndex)"></a>List<e> subList(int fromIndex, int toIndex)</e></h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 同ArrayList 只不过返回的是一个线程安全的list
     *
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                            <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="list扩容-和ArrayList一样"><a href="#list扩容-和ArrayList一样" class="headerlink" title="list扩容(和ArrayList一样)"></a>list扩容(和ArrayList一样)</h3><hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vector和ArrayList的实现上很类似 说白了就是每个会产生线程安全问题的方法上加synchronized的ArrayList</p>
<p>由于加了synchronized 导致Vector比ArrayList的性能低很多</p>
<p>而且Vector的默认扩容是2倍 ArrayList为1.5倍</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Source Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 RocketMQ集群安装(七)]]></title>
      <url>http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Solr集群,如何对Solr集群集群进行操作,以及使用Java客户端进行操作!”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><strong><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></strong></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="所用虚拟机"><a href="#所用虚拟机" class="headerlink" title="所用虚拟机"></a>所用虚拟机</h3><p>CentOS 6.5 * 4</p>
<p>RocketMQ 版本3.2.6</p>
<p>模式: 多Master多Slave模式，异步复制</p>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">用户名</th>
<th style="text-align:center">密码</th>
<th style="text-align:center">角色</th>
<th style="text-align:center">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">192.168.1.1</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer1,broker-a</td>
<td style="text-align:center">Master1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">192.168.1.2</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer2,broker-b</td>
<td style="text-align:center">Master2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">192.168.1.3</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer3,broker-a-s</td>
<td style="text-align:center">Slave1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">192.168.1.4</td>
<td style="text-align:center">root</td>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:center">nameServer4,broker-b-s</td>
<td style="text-align:center">Slave2</td>
</tr>
</tbody>
</table>
<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><ul>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9773419" target="_blank" rel="external">alibaba-rocketmq-3.2.6.tar.gz</a></li>
<li><a href="https://github.com/JoeyFan/rocketmq-console" target="_blank" rel="external">rocketmq-console</a></li>
</ul>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装-4台同时"><a href="#安装-4台同时" class="headerlink" title="安装(4台同时)"></a>安装(4台同时)</h3><h4 id="安装JDK-略"><a href="#安装JDK-略" class="headerlink" title="安装JDK 略"></a>安装JDK 略</h4><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf alibaba-rocketmq-3.2.6.tar.gz -C /usr/local
<span class="token function">cd</span> /usr/local
<span class="token function">ln</span> -s alibaba-rocketmq rocketmq
</code></pre>
<h4 id="创建存储路径"><a href="#创建存储路径" class="headerlink" title="创建存储路径"></a>创建存储路径</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/local/rocketmq/store
<span class="token function">mkdir</span> /usr/local/rocketmq/store/commitlog
<span class="token function">mkdir</span> /usr/local/rocketmq/store/consumequeue
<span class="token function">mkdir</span> /usr/local/rocketmq/store/index
</code></pre>
<h4 id="配置RocketMQ配置文件"><a href="#配置RocketMQ配置文件" class="headerlink" title="配置RocketMQ配置文件"></a>配置RocketMQ配置文件</h4><pre class=" language-bash"><code class="language-bash">vim /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties
vim /usr/local/rocketmq/conf/2m-2s-async/broker-b.properties
vim /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties
vim /usr/local/rocketmq/conf/2m-2s-async/broker-b-s.properties
</code></pre>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#所属集群名字 （注意不要有空格）</span>
brokerClusterName<span class="token operator">=</span>rocketmq-cluster
<span class="token comment" spellcheck="true">#broker名字，注意此处不同的配置文件填写的不一样 192.168.1.1/192.168.1.3 填broker-a 192.168.1.2/192.168.1.4 填broker-b</span>
brokerName<span class="token operator">=</span><span class="token punctuation">(</span>broker-a<span class="token operator">|</span>broker-b<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#0 表示 Master，>0 表示 Slave  192.168.1.1/192.168.1.2 填0 192.168.1.3/192.168.1.4 填1</span>
brokerId<span class="token operator">=</span>0
<span class="token comment" spellcheck="true">#本机IP 默认识别 多块网卡会导致识别错误</span>
brokerIP1<span class="token operator">=</span>本机IP
<span class="token comment" spellcheck="true">#nameServer地址，分号分割</span>
namesrvAddr<span class="token operator">=</span>192.168.1.1:9876<span class="token punctuation">;</span>192.168.1.2:9876<span class="token punctuation">;</span>192.168.1.3:9876<span class="token punctuation">;</span>192.168.1.4:9876
<span class="token comment" spellcheck="true">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span>
defaultTopicQueueNums<span class="token operator">=</span>4
<span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span>
autoCreateTopicEnable<span class="token operator">=</span>true
<span class="token comment" spellcheck="true">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span>
autoCreateSubscriptionGroup<span class="token operator">=</span>true
<span class="token comment" spellcheck="true">#Broker 对外服务的监听端口</span>
listenPort<span class="token operator">=</span>10911
<span class="token comment" spellcheck="true">#删除文件时间点，默认凌晨 4点</span>
deleteWhen<span class="token operator">=</span>04
<span class="token comment" spellcheck="true">#文件保留时间，默认 48 小时</span>
fileReservedTime<span class="token operator">=</span>120
<span class="token comment" spellcheck="true">#commitLog每个文件的大小默认1G</span>
mapedFileSizeCommitLog<span class="token operator">=</span>1073741824
<span class="token comment" spellcheck="true">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span>
mapedFileSizeConsumeQueue<span class="token operator">=</span>300000
<span class="token comment" spellcheck="true">#destroyMapedFileIntervalForcibly=120000</span>
<span class="token comment" spellcheck="true">#redeleteHangedFileInterval=120000</span>
<span class="token comment" spellcheck="true">#检测物理文件磁盘空间</span>
diskMaxUsedSpaceRatio<span class="token operator">=</span>88

<span class="token comment" spellcheck="true">#存储路径</span>
storePathRootDir<span class="token operator">=</span>/usr/local/rocketmq/store
<span class="token comment" spellcheck="true">#commitLog 存储路径</span>
storePathCommitLog<span class="token operator">=</span>/usr/local/rocketmq/store/commitlog
<span class="token comment" spellcheck="true">#消费队列存储路径存储路径</span>
storePathConsumeQueue<span class="token operator">=</span>/usr/local/rocketmq/store/consumequeue
<span class="token comment" spellcheck="true">#消息索引存储路径</span>
storePathIndex<span class="token operator">=</span>/usr/local/rocketmq/store/index
<span class="token comment" spellcheck="true">#checkpoint 文件存储路径</span>
storeCheckpoint<span class="token operator">=</span>/usr/local/rocketmq/store/checkpoint
<span class="token comment" spellcheck="true">#abort 文件存储路径</span>
abortFile<span class="token operator">=</span>/usr/local/rocketmq/store/abort
<span class="token comment" spellcheck="true">#限制的消息大小</span>
maxMessageSize<span class="token operator">=</span>65536

<span class="token comment" spellcheck="true">#flushCommitLogLeastPages=4</span>
<span class="token comment" spellcheck="true">#flushConsumeQueueLeastPages=2</span>
<span class="token comment" spellcheck="true">#flushCommitLogThoroughInterval=10000</span>
<span class="token comment" spellcheck="true">#flushConsumeQueueThoroughInterval=60000</span>

<span class="token comment" spellcheck="true">#Broker 的角色  192.168.1.1/192.168.1.2 填ASYNC_MASTER 192.168.1.3/192.168.1.4 填SLAVE</span>
<span class="token comment" spellcheck="true">#- ASYNC_MASTER 异步复制Master</span>
<span class="token comment" spellcheck="true">#- SYNC_MASTER 同步双写Master</span>
<span class="token comment" spellcheck="true">#- SLAVE</span>
brokerRole<span class="token operator">=</span>ASYNC_MASTER

<span class="token comment" spellcheck="true">#刷盘方式</span>
<span class="token comment" spellcheck="true">#- ASYNC_FLUSH 异步刷盘</span>
<span class="token comment" spellcheck="true">#- SYNC_FLUSH 同步刷盘</span>
flushDiskType<span class="token operator">=</span>ASYNC_FLUSH

<span class="token comment" spellcheck="true">#checkTransactionMessageEnable=false</span>
<span class="token comment" spellcheck="true">#发消息线程池数量</span>
<span class="token comment" spellcheck="true">#sendMessageThreadPoolNums=128</span>
<span class="token comment" spellcheck="true">#拉消息线程池数量</span>
<span class="token comment" spellcheck="true">#pullMessageThreadPoolNums=128</span>
<span class="token comment" spellcheck="true">#filterNums</span>
<span class="token comment" spellcheck="true">#filterServerNums=1</span>
</code></pre>
<h4 id="修改日志配置文件"><a href="#修改日志配置文件" class="headerlink" title="修改日志配置文件"></a>修改日志配置文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/rocketmq/logs
<span class="token function">cd</span> /usr/local/rocketmq/conf <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> -i <span class="token string">'s#<span class="token variable">${user.home}</span>#/usr/local/rocketmq#g'</span> *.xml
</code></pre>
<h4 id="修改启动脚本参数（测试时虚拟机内存不够修改）"><a href="#修改启动脚本参数（测试时虚拟机内存不够修改）" class="headerlink" title="修改启动脚本参数（测试时虚拟机内存不够修改）"></a>修改启动脚本参数（测试时虚拟机内存不够修改）</h4><pre class=" language-bash"><code class="language-bash">vim /usr/local/rocketmq/bin/runbroker.sh
JAVA_OPT<span class="token operator">=</span><span class="token string">"<span class="token variable">${JAVA_OPT}</span> -server -Xms1g -Xmx1g -Xmn512m - XX:PermSize=128m -XX:MaxPermSize=320m"</span>

vim /usr/local/rocketmq/bin/runserver.sh
JAVA_OPT<span class="token operator">=</span><span class="token string">"<span class="token variable">${JAVA_OPT}</span> -server -Xms1g -Xmx1g -Xmn512m - XX:PermSize=128m -XX:MaxPermSize=320m"</span>
</code></pre>
<h4 id="启动NameServer"><a href="#启动NameServer" class="headerlink" title="启动NameServer"></a>启动NameServer</h4><p>nohup sh /usr/local/rocketmq/bin/mqnamesrv &amp;</p>
<h5 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h5><p>tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log</p>
<h4 id="启动BrokerServer-多Master多Slave模式，异步复制"><a href="#启动BrokerServer-多Master多Slave模式，异步复制" class="headerlink" title="启动BrokerServer 多Master多Slave模式，异步复制"></a>启动BrokerServer 多Master多Slave模式，异步复制</h4><blockquote>
<p>A -192.168.1.1|B-192.168.1.2|C-192.168.1.3|B-192.168.1.4</p>
</blockquote>
<p>启动命令:</p>
<pre class=" language-bash"><code class="language-bash">A:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log

B:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-b.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log

C:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-a-s.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log

D:
<span class="token function">cd</span> /usr/local/rocketmq/bin
<span class="token function">nohup</span> sh /usr/local/rocketmq/bin/mqbroker -c /usr/local/rocketmq/conf/2m-2s-async/broker-b-s.properties <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>
//查看是否启动成功
<span class="token function">netstat</span> -ntlp
jps
// 查看日志
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log
<span class="token function">tail</span> -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log
</code></pre>
<h4 id="安装Tomcat配置RocketMQ-Console"><a href="#安装Tomcat配置RocketMQ-Console" class="headerlink" title="安装Tomcat配置RocketMQ Console"></a>安装Tomcat配置RocketMQ Console</h4><p>复制rocketmq-console.war到192.168.1.1机器的/usr/local/tomcat/webapps/下</p>
<p>vim /usr/local/tomcat/webapps/rocketmq-console/WEB-INF/classes/config.properties</p>
<p>rocketmq.namesrv.addr=192.168.1.1:9876;192.168.1.2:9876;192.168.1.3:9876;192.168.1.4:9876</p>
<h5 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h5><p>/usr/local/tomcat/bin/startup.sh</p>
<h4 id="防火墙配置："><a href="#防火墙配置：" class="headerlink" title="防火墙配置："></a>防火墙配置：</h4><p>vim /etc/sysconfig/iptables</p>
<pre class=" language-bash"><code class="language-bash">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 9876 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 10911 -j ACCEPT
</code></pre>
<p>重启防火墙</p>
<p>service iptables restart</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然RocketMQ开源的是被阉割版 但是现在项目已经捐献给Apache了 现在已经发布了4.0 相信这款消息中间件以后一定会大放光彩</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Linux </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Solr集群安装(六)]]></title>
      <url>http://binux.cn/2017/03/06/Solr-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Solr集群,如何对Solr集群集群进行操作,以及使用Java客户端进行操作!”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><strong><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></strong></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="所用虚拟机"><a href="#所用虚拟机" class="headerlink" title="所用虚拟机"></a>所用虚拟机</h3><p>CentOS 6.5</p>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><center><img src="http://on2bs9q7q.bkt.clouddn.com/Linux-Solr-img1.png" alt="IP"></center><br><center>IP</center>

<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><ul>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9772212" target="_blank" rel="external">apache-tomcat-7.0.47.tar.gz</a></li>
<li><a href="http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">zookeeper-3.4.6</a></li>
<li><a href="https://archive.apache.org/dist/lucene/solr/4.10.3/solr-4.10.3.tgz" target="_blank" rel="external">solr-4.10.3.tgz</a></li>
<li><a href="http://download.csdn.net/detail/zhuzhenlong/9733932" target="_blank" rel="external">IK Analyzer 2012FF_hf1.zip</a></li>
</ul>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装JDK-略"><a href="#安装JDK-略" class="headerlink" title="安装JDK 略"></a>安装JDK 略</h4><h4 id="Zookeeper集群安装"><a href="#Zookeeper集群安装" class="headerlink" title="Zookeeper集群安装"></a>Zookeeper集群安装</h4><p><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></p>
<h4 id="Tomcat安装-四台同时"><a href="#Tomcat安装-四台同时" class="headerlink" title="Tomcat安装(四台同时)"></a>Tomcat安装(四台同时)</h4><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p>tar -zxvf apache-tomcat-7.0.47.tar.gz</p>
<h5 id="把解压后的Tomcat复制"><a href="#把解压后的Tomcat复制" class="headerlink" title="把解压后的Tomcat复制"></a>把解压后的Tomcat复制</h5><p>/usr/local/solr/tomcat</p>
<h5 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h5><p>vim /usr/local/solr/tomcat/conf/server/server.xml</p>
<p>改为80端口</p>
<pre class=" language-xml"><code class="language-xml">71行
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>
               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>
               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<h5 id="把solr的压缩包上传到服务器。并解压。"><a href="#把solr的压缩包上传到服务器。并解压。" class="headerlink" title="把solr的压缩包上传到服务器。并解压。"></a>把solr的压缩包上传到服务器。并解压。</h5><h4 id="Solr安装"><a href="#Solr安装" class="headerlink" title="Solr安装"></a>Solr安装</h4><h5 id="复制war包"><a href="#复制war包" class="headerlink" title="复制war包"></a>复制war包</h5><p>把/root/solr-4.10.3/dist/solr-4.10.3.war包部署到tomcat/webapps/下。并改名为ROOT.war</p>
<p>rm -rf /usr/local/solr/tomcat/webapps/ROOT</p>
<p>启动tomcat自动解压。关闭tomcat。删除ROOT.war.</p>
<h5 id="复制Jar包"><a href="#复制Jar包" class="headerlink" title="复制Jar包"></a>复制Jar包</h5><p>把/root/solr-4.10.3/example/lib/ext 目录下所有的jar包复制到solr工程中。</p>
<p>cp /root/solr-4.10.3/example/lib/ext/* /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/lib/</p>
<h5 id="创建solrhome"><a href="#创建solrhome" class="headerlink" title="创建solrhome"></a>创建solrhome</h5><blockquote>
<p>Solrhome是存放solr服务器所有配置文件的目录。</p>
</blockquote>
<p>cp -r /root/solr-4.10.3/example/solr /usr/local/solr/solrhome</p>
<h5 id="修改Solr配置文件"><a href="#修改Solr配置文件" class="headerlink" title="修改Solr配置文件"></a>修改Solr配置文件</h5><p>vim /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/web.xml</p>
<pre class=" language-bash"><code class="language-bash">第41行
<span class="token operator">&lt;</span>env-entry<span class="token operator">></span>
   <span class="token operator">&lt;</span>env-entry-name<span class="token operator">></span>solr/home<span class="token operator">&lt;</span>/env-entry-name<span class="token operator">></span>
   <span class="token operator">&lt;</span>env-entry-value<span class="token operator">></span>/usr/local/solr/solrhome<span class="token operator">&lt;</span>/env-entry-value<span class="token operator">></span>
   <span class="token operator">&lt;</span>env-entry-type<span class="token operator">></span>java.lang.String<span class="token operator">&lt;</span>/env-entry-type<span class="token operator">></span>
<span class="token operator">&lt;</span>/env-entry<span class="token operator">></span>
</code></pre>
<h4 id="配置中文分词"><a href="#配置中文分词" class="headerlink" title="配置中文分词"></a>配置中文分词</h4><h5 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h5><p>IK Analyzer 2012FF_hf1.zip</p>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><p>cp IKAnalyzer2012FF_u1.jar /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/lib/</p>
<p>cp IKAnalyzer.cfg.xml ext_stopword.dic mydict.dic /usr/local/solr/tomcat/webapps/ROOT/WEB-INF/classes</p>
<blockquote>
<p>扩展词典及停用词词典的字符集必须是utf-8。不能使用windows记事本编辑。</p>
</blockquote>
<h5 id="配置fieldType"><a href="#配置fieldType" class="headerlink" title="配置fieldType"></a>配置fieldType</h5><p>vim /usr/local/solr/solrhome/collection1/conf/schema.xml</p>
<blockquote>
<p>跳转到文档末尾：G</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text_ik<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>solr.TextField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>analyzer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wltea.analyzer.lucene.IKAnalyzer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldType</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="业务字段配置"><a href="#业务字段配置" class="headerlink" title="业务字段配置"></a>业务字段配置</h5><blockquote>
<p>业务字段判断标准：</p>
<ul>
<li>在搜索时是否需要在此字段上进行搜索。例如：商品名称、商品的卖点、商品的描述</li>
<li>后续的业务是否需要用到此字段。例如：商品id。</li>
</ul>
</blockquote>
<p>如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_title<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text_ik<span class="token punctuation">"</span></span> <span class="token attr-name">indexed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">stored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_price<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span> <span class="token attr-name">indexed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">stored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_image<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">indexed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">stored</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
等......
</code></pre>
<h4 id="配置Solr集群"><a href="#配置Solr集群" class="headerlink" title="配置Solr集群"></a>配置Solr集群</h4><h5 id="上传配置文件"><a href="#上传配置文件" class="headerlink" title="上传配置文件"></a>上传配置文件</h5><p>cd solr-4.10.3/example/scripts/cloud-scripts/</p>
<p>./zkcli.sh -zkhost 192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181 -cmd upconfig -confdir /usr/local/solr/solrhome/collection1/conf -confname myconf</p>
<h5 id="登陆zookeeper服务器查询配置文件："><a href="#登陆zookeeper服务器查询配置文件：" class="headerlink" title="登陆zookeeper服务器查询配置文件："></a>登陆zookeeper服务器查询配置文件：</h5><p>./zkCli.sh</p>
<h5 id="修改solr-xml监控端口为80端口"><a href="#修改solr-xml监控端口为80端口" class="headerlink" title="修改solr.xml监控端口为80端口"></a>修改solr.xml监控端口为80端口</h5><p>vim /usr/local/solr/solrhome/solr.xml</p>
<pre class=" language-xml"><code class="language-xml">31行:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solrcloud</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>str</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${host:}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>str</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostPort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${jetty.port:80}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>int</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>str</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostContext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${hostContext:solr}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>str</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zkClientTimeout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${zkClientTimeout:30000}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>int</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>genericCoreNodeNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${genericCoreNodeNames:true}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>solrcloud</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="和zookeeper关联"><a href="#和zookeeper关联" class="headerlink" title="和zookeeper关联"></a>和zookeeper关联</h5><p>修改每一台solr的tomcat 的 bin目录下catalina.sh文件中加入DzkHost指定zookeeper服务器地址：<br>JAVA_OPTS=”-DzkHost=192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181”</p>
<blockquote>
<p>可以使用vim的查找功能查找到JAVA_OPTS的定义的位置</p>
</blockquote>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动每一台solr的tomcat服务</p>
<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>访问：<a href="http://192.168.1.11/admin/collections?action=CREATE&amp;name=collection2&amp;numShards=2&amp;replicationFactor=2" target="_blank" rel="external">http://192.168.1.11/admin/collections?action=CREATE&amp;name=collection2&amp;numShards=2&amp;replicationFactor=2</a></p>
<blockquote>
<p>新建collection2将集群分为两片，每片两个副本。</p>
</blockquote>
<p>访问：<a href="http://192.168.1.11/admin/collections?action=DELETE&amp;name=collection1" target="_blank" rel="external">http://192.168.1.11/admin/collections?action=DELETE&amp;name=collection1</a></p>
<blockquote>
<p>删除 collection1</p>
</blockquote>
<h2 id="solrJ访问solrCloud"><a href="#solrJ访问solrCloud" class="headerlink" title="solrJ访问solrCloud"></a>solrJ访问solrCloud</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolrCloudTest</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// zookeeper地址</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String zkHostString <span class="token operator">=</span> <span class="token string">"192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// collection默认名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String defaultCollection <span class="token operator">=</span> <span class="token string">"collection2"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// cloudSolrServer对象</span>
    <span class="token keyword">private</span> CloudSolrServer cloudSolrServer<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>
    <span class="token comment" spellcheck="true">// 测试方法之前构造 CloudSolrServer</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cloudSolrServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloudSolrServer</span><span class="token punctuation">(</span>zkHostString<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">setDefaultCollection</span><span class="token punctuation">(</span>defaultCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 向solrCloud上创建索引</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateIndexToSolrCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SolrServerException<span class="token punctuation">,</span>
             IOException <span class="token punctuation">{</span>

        SolrInputDocument document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SolrInputDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"100001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token comment" spellcheck="true">// 搜索索引</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSearchIndexFromSolrCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        SolrQuery query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SolrQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        query<span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token string">"*:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
             QueryResponse response <span class="token operator">=</span> cloudSolrServer<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
             SolrDocumentList docs <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文档个数："</span> <span class="token operator">+</span> docs<span class="token punctuation">.</span><span class="token function">getNumFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询时间："</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getQTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token keyword">for</span> <span class="token punctuation">(</span>SolrDocument doc <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 ArrayList title <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">)</span> doc<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 String id <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> doc<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id: "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"title: "</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SolrServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknowned Exception!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token comment" spellcheck="true">// 删除索引</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteIndexFromSolrCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SolrServerException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 根据id删除</span>
        UpdateResponse response <span class="token operator">=</span> cloudSolrServer<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 根据多个id删除</span>
        <span class="token comment" spellcheck="true">// cloudSolrServer.deleteById(ids);</span>
        <span class="token comment" spellcheck="true">// 自动查询条件删除</span>
        <span class="token comment" spellcheck="true">// cloudSolrServer.deleteByQuery("product_keywords:教程");</span>
        <span class="token comment" spellcheck="true">// 提交</span>
        cloudSolrServer<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>solr 主要是用来搜索的 不需要自己在另外写 集群的安装也不算太麻烦 就是机器用的多了点 要7台虚拟机 实在没有这么多虚拟机的可以在一台机器搭伪分布式</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Linux </tag>
            
            <tag> Solr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)]]></title>
      <url>http://binux.cn/2017/03/05/FastDFS-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装FastDFS,集群有点麻烦 可能以后会写篇 毕竟我个人开发是足够的”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><strong><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></strong></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基于CentOS6.5安装</p>
<h3 id="FastDFS方案"><a href="#FastDFS方案" class="headerlink" title="FastDFS方案"></a>FastDFS方案</h3><table>
<thead>
<tr>
<th style="text-align:center">主机IP</th>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">192.168.1.1</td>
<td style="text-align:center">trackerd</td>
</tr>
<tr>
<td style="text-align:center">192.168.1.2</td>
<td style="text-align:center">storaged</td>
</tr>
</tbody>
</table>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="下载软件："><a href="#下载软件：" class="headerlink" title="下载软件："></a>下载软件：</h4><ul>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771164" target="_blank" rel="external">libfastcommon-master.zip</a></li>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771173" target="_blank" rel="external">FastDFS_v5.05.tar</a></li>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771174" target="_blank" rel="external">fastdfs-nginx-module_v1.16.tar</a></li>
<li><a href="http://download.csdn.net/detail/cynicismsrs/9771212" target="_blank" rel="external">fastdfs_client_v1.24.jar</a></li>
</ul>
<h4 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h4><p>命令：yum install make cmake gcc gcc-c++</p>
<h3 id="解压libfastcommon"><a href="#解压libfastcommon" class="headerlink" title="解压libfastcommon"></a>解压libfastcommon</h3><p>命令：unzip libfastcommon-master.zip -d /usr/local/fast/</p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote>
<p>在学习时可以不用考虑防火墙的问题</p>
</blockquote>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装libfastcommon"><a href="#安装libfastcommon" class="headerlink" title="安装libfastcommon"></a>安装libfastcommon</h3><pre><code>./make.sh 
./make.sh install
mkdir -p /usr/lib64
install -m 755 libfastcommon.so /usr/lib64
mkdir -p /usr/include/fastcommon
</code></pre><p>打印：</p>
<pre><code>install -m 644 common_define.h hash.h chain.h logger.h base64.h shared_func.h pthread_func.h ini_file_reader.h _os_bits.h sockopt.h sched_thread.h http_func.h md5.h local_ip_func.h avl_tree.h ioevent.h ioevent_loop.h fast_task_queue.h fast_timer.h process_ctrl.h fast_mblock.h connection_pool.h /usr/include/fastcommon
</code></pre><blockquote>
<p>注意安装的路径：libfastcommon默认安装到了/usr/lib64/这个位置。</p>
</blockquote>
<h3 id="进行软链接创建"><a href="#进行软链接创建" class="headerlink" title="进行软链接创建"></a>进行软链接创建</h3><pre><code>ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so
ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so
ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so
</code></pre><h3 id="安装FastDFS（同时进行）"><a href="#安装FastDFS（同时进行）" class="headerlink" title="安装FastDFS（同时进行）"></a>安装FastDFS（同时进行）</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>tar -zxvf FastDFS_v5.05.tar.gz -C /usr/local/fast/</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>cd /usr/local/fast/FastDFS
./make.sh
./make.sh install
</code></pre><p>打印：</p>
<pre><code>mkdir -p /usr/bin
mkdir -p /etc/fdfs
cp -f fdfs_trackerd /usr/bin
if [ ! -f /etc/fdfs/tracker.conf.sample ]; then cp -f ../conf/tracker.conf /etc/fdfs/tracker.conf.sample; fi
mkdir -p /usr/bin
mkdir -p /etc/fdfs
cp -f fdfs_storaged  /usr/bin
if [ ! -f /etc/fdfs/storage.conf.sample ]; then cp -f ../conf/storage.conf /etc/fdfs/storage.conf.sample; fi
mkdir -p /usr/bin
mkdir -p /etc/fdfs
mkdir -p /usr/lib64
cp -f fdfs_monitor fdfs_test fdfs_test1 fdfs_crc32 fdfs_upload_file fdfs_download_file fdfs_delete_file fdfs_file_info fdfs_appender_test fdfs_appender_test1 fdfs_append_file fdfs_upload_appender /usr/bin
if [ 0 -eq 1 ]; then cp -f libfdfsclient.a /usr/lib64; fi
if [ 1 -eq 1 ]; then cp -f libfdfsclient.so /usr/lib64; fi
mkdir -p /usr/include/fastdfs
cp -f ../common/fdfs_define.h ../common/fdfs_global.h ../common/mime_file_parser.h ../common/fdfs_http_shared.h ../tracker/tracker_types.h ../tracker/tracker_proto.h ../tracker/fdfs_shared_func.h ../storage/trunk_mgr/trunk_shared.h tracker_client.h storage_client.h storage_client1.h client_func.h client_global.h fdfs_client.h /usr/include/fastdfs
if [ ! -f /etc/fdfs/client.conf.sample ]; then cp -f ../conf/client.conf /etc/fdfs/client.conf.sample; fi
</code></pre><h4 id="服务脚本在："><a href="#服务脚本在：" class="headerlink" title="服务脚本在："></a>服务脚本在：</h4><pre><code>ls /etc/init.d/ | grep fdfs
fdfs_storaged
fdfs_trackerd
</code></pre><h4 id="配置文件在："><a href="#配置文件在：" class="headerlink" title="配置文件在："></a>配置文件在：</h4><pre><code>ls /etc/fdfs/
client.conf.sample  storage.conf.sample  tracker.conf.sample
</code></pre><h4 id="命令行工具在-usr-bin-目录下"><a href="#命令行工具在-usr-bin-目录下" class="headerlink" title="命令行工具在/usr/bin/目录下"></a>命令行工具在/usr/bin/目录下</h4><pre><code>ls /usr/bin/ | grep fdfs
fdfs_appender_test
fdfs_appender_test1
fdfs_append_file
fdfs_crc32
fdfs_delete_file
fdfs_download_file
fdfs_file_info
fdfs_monitor
fdfs_storaged
fdfs_test
fdfs_test1
fdfs_trackerd
fdfs_upload_appender
fdfs_upload_file
</code></pre><blockquote>
<p>因为FastDFS服务脚本设置的bin目录为/usr/local/bin/下,但是实际我们安装在了/usr/bin/下面。所以我们需要修改FastDFS配置文件中的路径，也就是需要修改俩 个配置文件：</p>
<ul>
<li>命令：vim /etc/init.d/fdfs_storaged</li>
<li>进行全局替换命令：%s+/usr/local/bin+/usr/bin</li>
<li>命令：vim /etc/init.d/fdfs_trackerd</li>
<li>进行全局替换命令：%s+/usr/local/bin+/usr/bin</li>
</ul>
</blockquote>
<h2 id="配置跟踪器（trackerd）"><a href="#配置跟踪器（trackerd）" class="headerlink" title="配置跟踪器（trackerd）"></a>配置跟踪器（trackerd）</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre><code>cd /etc/fdfs/
cp tracker.conf.sample tracker.conf
vim /etc/fdfs/tracker.conf
</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre><code># the base path to store data and log files
base_path=/fastdfs/tracker
</code></pre><p> mkdir -p /fastdfs/tracker</p>
<blockquote>
<ul>
<li>目录命令：cd /fastdfs/tracker/ &amp;&amp; ll</li>
<li>启动tracker命令：/etc/init.d/fdfs_trackerd start</li>
<li>查看进程命令：ps -el | grep fdfs</li>
<li>停止tracker命令：/etc/init.d/fdfs_trackerd stop</li>
</ul>
</blockquote>
<h4 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h4><h5 id="启动前："><a href="#启动前：" class="headerlink" title="启动前："></a>启动前：</h5><pre><code>cd /fastdfs/tracker/ &amp;&amp; ll
total 0
</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>/etc/init.d/fdfs_trackerd start</p>
<h5 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h5><pre><code>cd /fastdfs/tracker/ &amp;&amp; ll
total 8
drwxr-xr-x. 2 root root 4096 Dec 14 20:48 data
drwxr-xr-x. 2 root root 4096 Dec 14 20:48 logs
</code></pre><blockquote>
<p>可以设置开机启动跟踪器：（一般生产环境需要开机启动一些服务，如keepalived、Nginx、tomcat等等）</p>
<ul>
<li>命令：vim /etc/rc.d/rc.local</li>
<li>加入配置：/etc/init.d/fdfs_trackerd start</li>
</ul>
</blockquote>
<h2 id="配置FastDFS存储（storaged）"><a href="#配置FastDFS存储（storaged）" class="headerlink" title="配置FastDFS存储（storaged）"></a>配置FastDFS存储（storaged）</h2><h3 id="修改配置文件storage-conf"><a href="#修改配置文件storage-conf" class="headerlink" title="修改配置文件storage.conf"></a>修改配置文件storage.conf</h3><blockquote>
<ul>
<li>进入文件目录：cd /etc/fdfs/，进行copy storage文件一份</li>
<li>命令：cd /etc/fdfs/</li>
<li>命令：cp storage.conf.sample storage.conf</li>
<li>命令：vim /etc/fdfs/storage.conf</li>
</ul>
</blockquote>
<h3 id="修改内容："><a href="#修改内容：" class="headerlink" title="修改内容："></a>修改内容：</h3><pre><code>base_path=/fastdfs/storage
store_path0=/fastdfs/storage
tracker_server=192.168.1.1:22122
http.server_port=80
</code></pre><h3 id="创建存储目录："><a href="#创建存储目录：" class="headerlink" title="创建存储目录："></a>创建存储目录：</h3><p>mkdir -p /fastdfs/storage</p>
<h3 id="启动存储（storage）"><a href="#启动存储（storage）" class="headerlink" title="启动存储（storage）"></a>启动存储（storage）</h3><p>命令：/etc/init.d/fdfs_storaged start</p>
<h3 id="查看是否启动成功-1"><a href="#查看是否启动成功-1" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3><p>ps -ef | grep fdfs</p>
<blockquote>
<p>可以设置开机启动跟踪器：（一般生产环境需要开机启动一些服务，如keepaliv ed、linux、tomcat等等）</p>
<ul>
<li>命令：vim /etc/rc.d/rc.local</li>
<li>加入配置：/etc/init.d/fdfs_storaged start</li>
</ul>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="首先我们在跟踪器（tracker）里copy一份client-conf文件。"><a href="#首先我们在跟踪器（tracker）里copy一份client-conf文件。" class="headerlink" title="首先我们在跟踪器（tracker）里copy一份client.conf文件。"></a>首先我们在跟踪器（tracker）里copy一份client.conf文件。</h3><p>命令：cd /etc/fdfs/</p>
<p>命令：cp client.conf.sample client.conf</p>
<h3 id="编辑client-conf文件"><a href="#编辑client-conf文件" class="headerlink" title="编辑client.conf文件"></a>编辑client.conf文件</h3><p>vim /etc/fdfs/client.conf</p>
<h3 id="修改内容：-1"><a href="#修改内容：-1" class="headerlink" title="修改内容："></a>修改内容：</h3><pre><code>base_path=/fastdfs/tracker
tracker_server=**192.168.1.1**:22122
</code></pre><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><pre><code>/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/FastDFS/libfastcommon-master.zip
</code></pre><p>打印：</p>
<p>group1/M00/00/00/2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip</p>
<h3 id="存储器查看文件"><a href="#存储器查看文件" class="headerlink" title="存储器查看文件"></a>存储器查看文件</h3><pre><code>cd /fastdfs/storage/data/00/00/ &amp;&amp; ll
total 1
-rw-r--r--. 1 root root 102378 Dec 14 21:00 2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip
</code></pre><h2 id="FastDFS与Nginx整合（Storage）"><a href="#FastDFS与Nginx整合（Storage）" class="headerlink" title="FastDFS与Nginx整合（Storage）"></a>FastDFS与Nginx整合（Storage）</h2><h3 id="解压Nginx"><a href="#解压Nginx" class="headerlink" title="解压Nginx"></a>解压Nginx</h3><p>tar -zxvf nginx-1.6.2.tar.gz</p>
<h3 id="安装fastdfs-nginx-module-v1-16-tar-gz"><a href="#安装fastdfs-nginx-module-v1-16-tar-gz" class="headerlink" title="安装fastdfs-nginx-module_v1.16.tar.gz"></a>安装fastdfs-nginx-module_v1.16.tar.gz</h3><pre><code>tar -zxvf FastDFS/fastdfs-nginx-module_v1.16.tar.gz -C /usr/local/fast/
cd /usr/local/fast/fastdfs-nginx-module/src/
</code></pre><h3 id="编辑配置文件config"><a href="#编辑配置文件config" class="headerlink" title="编辑配置文件config"></a>编辑配置文件config</h3><p>vim /usr/local/fast/fastdfs-nginx-module/src/config</p>
<pre><code>修改前：
CORE_INCS=&quot;$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/&quot;
修改后：
CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;
</code></pre><h3 id="FastDFS与Nginx进行集成"><a href="#FastDFS与Nginx进行集成" class="headerlink" title="FastDFS与Nginx进行集成"></a>FastDFS与Nginx进行集成</h3><p>cd nginx-1.6.2/</p>
<p>./configure –add-module=/usr/local/fast/fastdfs-nginx-module/src/</p>
<p>make &amp;&amp; make install</p>
<blockquote>
<p>如报错 自行安装<strong>pcre</strong></p>
</blockquote>
<h3 id="复制、修改配置文件"><a href="#复制、修改配置文件" class="headerlink" title="复制、修改配置文件"></a>复制、修改配置文件</h3><p>cp /usr/local/fast/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</p>
<p>vim /etc/fdfs/mod_fastdfs.conf</p>
<pre><code>connect_timeout=10
tracker_server=192.168.1.1:22122
url_have_group_name = true
store_path0=/fastdfs/storage
</code></pre><h3 id="复制FastDFS里的2个文件"><a href="#复制FastDFS里的2个文件" class="headerlink" title="复制FastDFS里的2个文件"></a>复制FastDFS里的2个文件</h3><p>cd /usr/local/fast/FastDFS/conf/</p>
<p>cp http.conf mime.types /etc/fdfs/</p>
<h3 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h3><p>ln -s /fastdfs/storage/data/ /fastdfs/storage/data/M00</p>
<h3 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h3><p>vim nginx.conf</p>
<pre><code>listen 80;
server_name localhost;
location ~/group([0-9])/M00 {
    ngx_fastdfs_module;
}
</code></pre><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p> /usr/local/nginx/sbin/nginx</p>
<blockquote>
<p>报错:  error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory</p>
</blockquote>
<ul>
<li>32位系统 ln -s /usr/local/lib/libpcre.so.1 /lib</li>
<li>64位系统ln -s /usr/local/lib/libpcre.so.1 /lib64</li>
</ul>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>访问 <a href="http://192.168.1.2/group1/M00/00/00/2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip" target="_blank" rel="external">http://192.168.1.2/group1/M00/00/00/2-YyVlhRQlaAZLlgAAGP6hUWM6I411.zip</a></p>
<ul>
<li>启动停止命令</li>
<li>启动命令： 启动tracker命令：/etc/init.d/fdfs_trackerd start</li>
<li>查看进程命令：ps -el | grep fdfs</li>
<li>启动storage命令：/etc/init.d/fdfs_storaged start</li>
<li>查看进程命令：ps -el | grep fdfs</li>
<li>启动nginx命令：/usr/local/nginx/sbin/nginx</li>
<li>停止命令： 停止tracker命令：/etc/init.d/fdfs_trackerd stop</li>
<li>关闭storage命令：/etc/init.d/fdfs_storaged stop</li>
<li>关闭nginx命令：/usr/local/nginx/sbin/nginx -s stop</li>
</ul>
<h2 id="使用Java客户端操作"><a href="#使用Java客户端操作" class="headerlink" title="使用Java客户端操作"></a>使用Java客户端操作</h2><h3 id="classpath下建立文件fastdfs-client-conf"><a href="#classpath下建立文件fastdfs-client-conf" class="headerlink" title="classpath下建立文件fastdfs_client.conf"></a>classpath下建立文件fastdfs_client.conf</h3><h4 id="输入以下内容"><a href="#输入以下内容" class="headerlink" title="输入以下内容"></a>输入以下内容</h4><p>tracker_server = 192.168.125.129:22122</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>xubin<span class="token punctuation">.</span>utils<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>common<span class="token punctuation">.</span>NameValuePair<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">/**
 * FastDFS 工具类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDFSClientUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONF_FILENAME <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"fastdfs_client.conf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FastDFSClientUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> TrackerClient trackerClient<span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">//加载文件</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ClientGlobal<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>CONF_FILENAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
            TrackerGroup trackerGroup <span class="token operator">=</span> ClientGlobal<span class="token punctuation">.</span>g_tracker_group<span class="token punctuation">;</span>
            trackerClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackerClient</span><span class="token punctuation">(</span>trackerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 上传
     * @param file 文件
     * @param path 路径
     * @return
     *          上传成功返回id，失败返回null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">upload</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            NameValuePair<span class="token punctuation">[</span><span class="token punctuation">]</span> meta_list <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new NameValuePair[0];</span>
            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> file_buff <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                file_buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
                fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file_buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String fileid <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">upload_file1</span><span class="token punctuation">(</span>file_buff<span class="token punctuation">,</span> <span class="token function">getFileExt</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> meta_list<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> fileid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 上传
     * @param data 数据
     * @param extName 路径
     * @return
     *          上传成功返回id，失败返回null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> String extName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            NameValuePair<span class="token punctuation">[</span><span class="token punctuation">]</span> meta_list <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new NameValuePair[0];</span>

            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String fileid <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">upload_file1</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> extName<span class="token punctuation">,</span> meta_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> fileid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 下载
     * @param fileId 文件id
     * @return
     *          返回InputStream
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> InputStream <span class="token function">download</span><span class="token punctuation">(</span>String groupName<span class="token punctuation">,</span> String fileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">download_file1</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> inputStream<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 删除
     * @param fileId 文件id
     * @return
     *          删除成功返回0，非0则操作失败，返回错误代码
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>String groupName<span class="token punctuation">,</span> String fileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TrackerServer trackerServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        StorageClient1 storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getConnection return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storageClient1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> storageClient1<span class="token punctuation">.</span><span class="token function">delete_file1</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>storageServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    storageServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trackerServer <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    trackerServer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            storageClient1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 更新文件
     * @param oldFileId 旧文件id
     * @param file 新文件
     * @param path 新文件路径
     * @return
     *          上传成功返回id，失败返回null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">modify</span><span class="token punctuation">(</span>String oldGroupName<span class="token punctuation">,</span> String oldFileId<span class="token punctuation">,</span> File file<span class="token punctuation">,</span> String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String fileid <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 先上传</span>
            fileid <span class="token operator">=</span> <span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileid <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 再删除</span>
            <span class="token keyword">int</span> delResult <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>oldGroupName<span class="token punctuation">,</span> oldFileId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>delResult <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> fileid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取文件后缀名
     * @param fileName
     * @return
     *          如："jpg"、"txt"、"zip" 等
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getFileExt</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>FastDFS的安装算是比较麻烦的 不过按照本篇 一步一步来 是绝对可以安装成功的 集群的安装就更麻烦了 个人暂时用不到 就不安装了</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> FastDFS </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)]]></title>
      <url>http://binux.cn/2017/03/04/Nginx-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Nginx。”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><strong><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></strong></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇Nginx安装基于CentOS6.5 将会介绍Nginx的安装</p>
<p>Nginx的负载均衡和高可用 这篇将不会涉及</p>
<blockquote>
<p>机器IP 192.168.1.1</p>
</blockquote>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="wget下载"><a href="#wget下载" class="headerlink" title="wget下载:"></a>wget下载:</h3><p><a href="http://nginx.org/download/nginx-1.4.2.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.4.2.tar.gz</a></p>
<h3 id="安装：-tar-zxvf-nginx-1-6-2-tar-gz"><a href="#安装：-tar-zxvf-nginx-1-6-2-tar-gz" class="headerlink" title="安装： tar -zxvf nginx-1.6.2.tar.gz"></a>安装： tar -zxvf nginx-1.6.2.tar.gz</h3><h3 id="下载需要的依赖库文件："><a href="#下载需要的依赖库文件：" class="headerlink" title="下载需要的依赖库文件："></a>下载需要的依赖库文件：</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> pcre
yum <span class="token function">install</span> pcre-devel
yum <span class="token function">install</span> zlib
yum <span class="token function">install</span> zlib-devel
</code></pre>
<h3 id="进行configure配置："><a href="#进行configure配置：" class="headerlink" title="进行configure配置："></a>进行configure配置：</h3><p>cd nginx-1.6.2 &amp;&amp; ./configure –prefix=/usr/local/nginx  查看是否报错</p>
<h3 id="编译安装-make-amp-amp-make-install"><a href="#编译安装-make-amp-amp-make-install" class="headerlink" title="编译安装 make &amp;&amp; make install"></a>编译安装 make &amp;&amp; make install</h3><h3 id="启动Nginx："><a href="#启动Nginx：" class="headerlink" title="启动Nginx："></a>启动Nginx：</h3><h3 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h3><p>/usr/local/nginx/sbin/nginx -s start 关闭（stop）重启（reload）</p>
<h4 id="成功："><a href="#成功：" class="headerlink" title="成功："></a>成功：</h4><p>查看是否启动（netstat -ano | grep 80）</p>
<h4 id="失败："><a href="#失败：" class="headerlink" title="失败："></a>失败：</h4><p>可能为80端口被占用等。</p>
<h3 id="访问页面："><a href="#访问页面：" class="headerlink" title="访问页面："></a>访问页面：</h3><p>浏览器访问地址：<a href="http://192.168.1.1:80" target="_blank" rel="external">http://192.168.1.1:80</a> （看到欢迎页面即可）</p>
<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#user  nobody;</span>

<span class="token comment" spellcheck="true">#开启进程数 &lt;=CPU数</span>
worker_processes  1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#错误日志保存位置</span>
<span class="token comment" spellcheck="true">#error_log  logs/error.log;</span>
<span class="token comment" spellcheck="true">#error_log  logs/error.log  notice;</span>
<span class="token comment" spellcheck="true">#error_log  logs/error.log  info;</span>

<span class="token comment" spellcheck="true">#进程号保存文件</span>
<span class="token comment" spellcheck="true">#pid        logs/nginx.pid;</span>

<span class="token comment" spellcheck="true">#每个进程最大连接数（最大连接=连接数x进程数）每个worker允许同时产生多少个链接，默认1024</span>
events <span class="token punctuation">{</span>
    worker_connections  1024<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


http <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">#文件扩展名与文件类型映射表</span>
    include       mime.types<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#默认文件类型</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">#日志文件输出格式 这个位置相于全局设置</span>
    log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">#请求日志保存位置</span>
    <span class="token comment" spellcheck="true">#access_log  logs/access.log  main;</span>

    <span class="token comment" spellcheck="true">#打开发送文件</span>
    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#tcp_nopush     on;</span>

    <span class="token comment" spellcheck="true">#keepalive_timeout  0;</span>
    <span class="token comment" spellcheck="true">#连接超时时间</span>
    keepalive_timeout  65<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">#打开gzip压缩</span>
    <span class="token comment" spellcheck="true">#gzip  on;</span>

    <span class="token comment" spellcheck="true">#设定请求缓冲</span>
    <span class="token comment" spellcheck="true">#client_header_buffer_size 1k;</span>
    <span class="token comment" spellcheck="true">#large_client_header_buffers 4 4k;</span>

    <span class="token comment" spellcheck="true">#设定负载均衡的服务器列表</span>
    <span class="token comment" spellcheck="true">#upstream myproject {</span>
        <span class="token comment" spellcheck="true">#weigth参数表示权值，权值越高被分配到的几率越大</span>
        <span class="token comment" spellcheck="true">#max_fails 当有#max_fails个请求失败，就表示后端的服务器不可用，默认为1，将其设置为0可以关闭检查</span>
        <span class="token comment" spellcheck="true">#fail_timeout 在以后的#fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器</span>
    <span class="token comment" spellcheck="true">#}</span>

    <span class="token comment" spellcheck="true">#webapp</span>
    <span class="token comment" spellcheck="true">#upstream myapp {</span>
      <span class="token comment" spellcheck="true"># server 192.168.1.1:8080 weight=1 max_fails=2 fail_timeout=30s;</span>
    <span class="token comment" spellcheck="true"># server 192.168.1.1:8080 weight=1 max_fails=2 fail_timeout=30s;</span>
    <span class="token comment" spellcheck="true">#}</span>

    <span class="token comment" spellcheck="true">#配置虚拟主机，基于域名、ip和端口</span>
    server <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">#监听端口</span>
        listen       80<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">#监听域名</span>
        server_name  localhost<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">#charset koi8-r;</span>

        <span class="token comment" spellcheck="true">#nginx访问日志放在logs/host.access.log下，并且使用main格式（还可以自定义格式）</span>
        <span class="token comment" spellcheck="true">#access_log  logs/host.access.log  main;</span>

        <span class="token comment" spellcheck="true">#返回的相应文件地址</span>
        location / <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">#设置客户端真实ip地址</span>
            <span class="token comment" spellcheck="true">#proxy_set_header X-real-ip $remote_addr;</span>
            <span class="token comment" spellcheck="true">#负载均衡反向代理</span>
            <span class="token comment" spellcheck="true">#proxy_pass http://myapp;</span>

            <span class="token comment" spellcheck="true">#返回根路径地址（相对路径:相对于/usr/local/nginx/）</span>
            root   html<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">#默认访问文件</span>
            index  index.html index.htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">#配置反向代理tomcat服务器：拦截.jsp结尾的请求转向到tomcat</span>
        <span class="token comment" spellcheck="true">#location ~ \.jsp$ {</span>
        <span class="token comment" spellcheck="true">#    proxy_pass http://192.168.1.1:8080;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true">#error_page  404              /404.html;</span>
        <span class="token comment" spellcheck="true"># redirect server error pages to the static page /50x.html</span>
        <span class="token comment" spellcheck="true">#</span>

        <span class="token comment" spellcheck="true">#错误页面及其返回地址</span>
        error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
            root   html<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
        <span class="token comment" spellcheck="true">#</span>
        <span class="token comment" spellcheck="true">#location ~ \.php$ {</span>
        <span class="token comment" spellcheck="true">#    proxy_pass   http://127.0.0.1;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="token comment" spellcheck="true">#</span>
        <span class="token comment" spellcheck="true">#location ~ \.php$ {</span>
        <span class="token comment" spellcheck="true">#    root           html;</span>
        <span class="token comment" spellcheck="true">#    fastcgi_pass   127.0.0.1:9000;</span>
        <span class="token comment" spellcheck="true">#    fastcgi_index  index.php;</span>
        <span class="token comment" spellcheck="true">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
        <span class="token comment" spellcheck="true">#    include        fastcgi_params;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true"># deny access to .htaccess files, if Apache's document root</span>
        <span class="token comment" spellcheck="true"># concurs with nginx's one</span>
        <span class="token comment" spellcheck="true">#</span>
        <span class="token comment" spellcheck="true">#location ~ /\.ht {</span>
        <span class="token comment" spellcheck="true">#    deny  all;</span>
        <span class="token comment" spellcheck="true">#}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">#虚拟主机配置：</span>
    server <span class="token punctuation">{</span>
        listen 1234<span class="token punctuation">;</span>
        server_name bhz.com<span class="token punctuation">;</span>
        location / <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">#正则表达式匹配uri方式：在/usr/local/nginx/bhz.com下 建立一个test123.html 然后使用正则匹配</span>
        <span class="token comment" spellcheck="true">#location ~ test {</span>
            <span class="token comment" spellcheck="true">## 重写语法：if return （条件 = ~ ~*）</span>
            <span class="token comment" spellcheck="true">#if ($remote_addr = 192.168.1.200) {</span>
            <span class="token comment" spellcheck="true">#       return 401;</span>
            <span class="token comment" spellcheck="true">#}</span>

            <span class="token comment" spellcheck="true">#if ($http_user_agent ~* firefox) {</span>
            <span class="token comment" spellcheck="true">#       rewrite ^.*$ /firefox.html;</span>
            <span class="token comment" spellcheck="true">#       break;</span>
            <span class="token comment" spellcheck="true">#}</span>

            root bhz.com<span class="token punctuation">;</span>
            index index.html<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">#location /goods {</span>
        <span class="token comment" spellcheck="true">#        rewrite "goods-(\d{1,5})\.html" /goods-ctrl.html;</span>
        <span class="token comment" spellcheck="true">#        root bhz.com;</span>
        <span class="token comment" spellcheck="true">#        index index.html;</span>
        <span class="token comment" spellcheck="true">#}</span>

        <span class="token comment" spellcheck="true">#配置访问日志</span>
        access_log logs/bhz.com.access.log main<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token comment" spellcheck="true"># another virtual host using mix of IP-, name-, and port-based configuration</span>
    <span class="token comment" spellcheck="true">#</span>
    <span class="token comment" spellcheck="true">#server {</span>
    <span class="token comment" spellcheck="true">#    listen       8000;</span>
    <span class="token comment" spellcheck="true">#    listen       somename:8080;</span>
    <span class="token comment" spellcheck="true">#    server_name  somename  alias  another.alias;</span>

    <span class="token comment" spellcheck="true">#    location / {</span>
    <span class="token comment" spellcheck="true">#        root   html;</span>
    <span class="token comment" spellcheck="true">#        index  index.html index.htm;</span>
    <span class="token comment" spellcheck="true">#    }</span>
    <span class="token comment" spellcheck="true">#}</span>


    <span class="token comment" spellcheck="true"># HTTPS server</span>
    <span class="token comment" spellcheck="true">#</span>
    <span class="token comment" spellcheck="true">#server {</span>
    <span class="token comment" spellcheck="true">#    listen       443 ssl;</span>
    <span class="token comment" spellcheck="true">#    server_name  localhost;</span>

    <span class="token comment" spellcheck="true">#    ssl_certificate      cert.pem;</span>
    <span class="token comment" spellcheck="true">#    ssl_certificate_key  cert.key;</span>

    <span class="token comment" spellcheck="true">#    ssl_session_cache    shared:SSL:1m;</span>
    <span class="token comment" spellcheck="true">#    ssl_session_timeout  5m;</span>

    <span class="token comment" spellcheck="true">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>
    <span class="token comment" spellcheck="true">#    ssl_prefer_server_ciphers  on;</span>

    <span class="token comment" spellcheck="true">#    location / {</span>
    <span class="token comment" spellcheck="true">#        root   html;</span>
    <span class="token comment" spellcheck="true">#        index  index.html index.htm;</span>
    <span class="token comment" spellcheck="true">#    }</span>
    <span class="token comment" spellcheck="true">#}</span>

<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇介绍了Nginx的安装 非常简单 下面会写篇介绍Nginx负载均衡和高可用的博客</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)]]></title>
      <url>http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Zookeeper集群”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><strong><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></strong></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Zookeeper集群方案"><a href="#Zookeeper集群方案" class="headerlink" title="Zookeeper集群方案"></a>Zookeeper集群方案</h3><table>
<thead>
<tr>
<th style="text-align:center">主机IP</th>
<th style="text-align:center">消息端口</th>
<th style="text-align:center">通信端口</th>
<th style="text-align:center">节点目录/usr/local/下</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">192.168.1.1</td>
<td style="text-align:center">2181</td>
<td style="text-align:center">2888:3888</td>
<td style="text-align:center">zookeeper</td>
</tr>
<tr>
<td style="text-align:center">192.168.1.2</td>
<td style="text-align:center">2181</td>
<td style="text-align:center">2888:3888</td>
<td style="text-align:center">zookeeper</td>
</tr>
<tr>
<td style="text-align:center">192.168.1.3</td>
<td style="text-align:center">2181</td>
<td style="text-align:center">2888:3888</td>
<td style="text-align:center">zookeeper</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装JDK-略"><a href="#安装JDK-略" class="headerlink" title="安装JDK 略"></a>安装JDK 略</h4><blockquote>
<p>以下操作3台机器同时操作</p>
</blockquote>
<h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><p>useradd zookeeper</p>
<p>passwd zookeeper</p>
<p>设置密码</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>官网下载<a href="http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">zookeeper-3.4.6</a><br>Linux wget <a href="http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</a></p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>tar -zxvf zookeeper-3.4.6.tar.gz —C /usr/local</p>
<h4 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h4><p>cd /usr/local</p>
<p>mv zookeeper-3.4.6 zookeeper</p>
<h4 id="建立以下文件夹"><a href="#建立以下文件夹" class="headerlink" title="建立以下文件夹"></a>建立以下文件夹</h4><p>cd /usr/local/zookeeper</p>
<p>mkdir data</p>
<p>mkdir logs</p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将/conf目录下的zoo_sample.cfg文件拷贝一份， 命名为为zoo.cfg</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># The number of milliseconds of each tick</span>
tickTime<span class="token operator">=</span>2000
<span class="token comment" spellcheck="true"># The number of ticks that the initial</span>
<span class="token comment" spellcheck="true"># synchronization phase can take</span>
initLimit<span class="token operator">=</span>10
<span class="token comment" spellcheck="true"># The number of ticks that can pass between</span>
<span class="token comment" spellcheck="true"># sending a request and getting an acknowledgement</span>
syncLimit<span class="token operator">=</span>5
<span class="token comment" spellcheck="true"># the directory where the snapshot is stored.</span>
<span class="token comment" spellcheck="true"># do not use /tmp for storage, /tmp here is just</span>
<span class="token comment" spellcheck="true"># example sakes.</span>
dataDir<span class="token operator">=</span>/usr/local/zookeeper/data
dataLogDir<span class="token operator">=</span>/usr/local/zookeeper/logs
<span class="token comment" spellcheck="true"># the port at which the clients will connect</span>
clientPort<span class="token operator">=</span>2181
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Be sure to read the maintenance section of the</span>
<span class="token comment" spellcheck="true"># administrator guide before turning on autopurge.</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># The number of snapshots to retain in dataDir</span>
<span class="token comment" spellcheck="true">#autopurge.snapRetainCount=3</span>
<span class="token comment" spellcheck="true"># Purge task interval in hours</span>
<span class="token comment" spellcheck="true"># Set to "0" to disable auto purge feature</span>
<span class="token comment" spellcheck="true">#autopurge.purgeInterval=1</span>
<span class="token comment" spellcheck="true"># 2888 端口号是 zookeeper 服务之间通信的端口。</span>
<span class="token comment" spellcheck="true"># 3888 是 zookeeper 与其他应用程序通信的端口。</span>
server.0<span class="token operator">=</span>192.168.1.1:2888:3888
server.1<span class="token operator">=</span>192.168.1.2:2888:3888
server.2<span class="token operator">=</span>192.168.1.3:2888:3888
</code></pre>
<h4 id="解释配置文件"><a href="#解释配置文件" class="headerlink" title="解释配置文件"></a>解释配置文件</h4><pre><code>initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不
是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到
Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。
当已经超过 10 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没
有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是
5*2000=10 秒。

syncLimit：这个配置项标识 Leader 与 Follower 之间发送消息，请求和应答时
间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2*2000=4
秒。

server.A=B:C:D：其中 A 是一个数字，表示这个是第几号服务器；B 是这个服务
器的 IP 地址或/etc/hosts 文件中映射了 IP 的主机名；C 表示的是这个服务器与
集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务
器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是
用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是
一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同
的端口号。
</code></pre><h4 id="新建myid文件"><a href="#新建myid文件" class="headerlink" title="新建myid文件"></a>新建myid文件</h4><p>cd /usr/local/zookeeper/data</p>
<ul>
<li>192.168.1.1机器:  echo 0 &gt;&gt; myid</li>
<li>192.168.1.2机器:  echo 1 &gt;&gt; myid</li>
<li>192.168.1.3机器:  echo 2 &gt;&gt; myid</li>
</ul>
<h4 id="编辑-bash-profile文件"><a href="#编辑-bash-profile文件" class="headerlink" title="编辑.bash_profile文件"></a>编辑.bash_profile文件</h4><p>添加</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> ZOOKEEPER_HOME<span class="token operator">=</span>/usr/local/zookeeper
<span class="token comment" spellcheck="true"># zookeeper env</span>
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token variable">$PATH</span>
</code></pre>
<p>使配置文件生效<br>$ source /home/zookeeper/.bash_profile</p>
<h4 id="添加防火墙规则"><a href="#添加防火墙规则" class="headerlink" title="添加防火墙规则"></a>添加防火墙规则</h4><p>在防火墙中打开要用到的端口2181、2888、3888</p>
<h5 id="切换到-root-用户权限，执行以下命令："><a href="#切换到-root-用户权限，执行以下命令：" class="headerlink" title="切换到 root 用户权限，执行以下命令："></a>切换到 root 用户权限，执行以下命令：</h5><pre><code>chkconfig iptables on
service iptables start
vim /etc/sysconfig/iptables
</code></pre><h5 id="增加以下-3-行："><a href="#增加以下-3-行：" class="headerlink" title="增加以下 3 行："></a>增加以下 3 行：</h5><pre><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 2181 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 2888 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3888 -j ACCEPT
</code></pre><h5 id="重启防火墙："><a href="#重启防火墙：" class="headerlink" title="重启防火墙："></a>重启防火墙：</h5><p>service iptables restart</p>
<h3 id="zk操作"><a href="#zk操作" class="headerlink" title="zk操作"></a>zk操作</h3><h4 id="启动zk"><a href="#启动zk" class="headerlink" title="启动zk"></a>启动zk</h4><p>zkServer.sh start</p>
<h5 id="查看有无启动成功"><a href="#查看有无启动成功" class="headerlink" title="查看有无启动成功"></a>查看有无启动成功</h5><p>jps</p>
<pre><code>1456 QuorumPeerMain
1475 Jps
</code></pre><blockquote>
<p>启动成功</p>
</blockquote>
<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p>zkServer.shstatus</p>
<h4 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h4><p>$ tail -500f /usr/local/zookeeper/logs/zookeeper.out</p>
<h4 id="停止zookeeper进程："><a href="#停止zookeeper进程：" class="headerlink" title="停止zookeeper进程："></a>停止zookeeper进程：</h4><p>zkServer.sh stop</p>
<h4 id="配置zookeeper开机使用xubin用户启动："><a href="#配置zookeeper开机使用xubin用户启动：" class="headerlink" title="配置zookeeper开机使用xubin用户启动："></a>配置zookeeper开机使用xubin用户启动：</h4><p>编辑/etc/rc.local 文件，加入：</p>
<p>su - zookeeper -c ‘/usr/local/zookeeper/bin/zkServer.sh start’</p>
<h3 id="zookeeper查看插件"><a href="#zookeeper查看插件" class="headerlink" title="zookeeper查看插件"></a>zookeeper查看插件</h3><h4 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h4><ul>
<li>Help -&gt; Install New Software</li>
<li>添加 url <a href="http://www.massedynamic.org/eclipse/updates/" target="_blank" rel="external">http://www.massedynamic.org/eclipse/updates/</a></li>
<li>选择zookeeper插件安装</li>
<li>Eclipse 菜单打开Window -&gt; Show View -&gt; Other… -&gt; ZooKeeper 3.2.2</li>
<li>输入zookeeper的地址 连接</li>
</ul>
<h4 id="idea插件"><a href="#idea插件" class="headerlink" title="idea插件"></a>idea插件</h4><p>直接插件库中搜索zookeeper</p>
<blockquote>
<p>不过我不推荐使用<br>插件开发成那样还上线…(不过是免费的 想用就用吧)</p>
</blockquote>
<h4 id="Java开发的客户端"><a href="#Java开发的客户端" class="headerlink" title="Java开发的客户端"></a>Java开发的客户端</h4><p><a href="http://download.csdn.net/detail/nihaoadam/9427620" target="_blank" rel="external">点我下载</a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装集群的时候一定要把防火墙配置好 不然就会出现各种问题 或者直接把防火墙关了吧 学习技术的时候可以不用考虑防火墙</p>
<p>后面会写一篇关于使用ZkClient、Curator操作Zookeeper的博客</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Linux </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)]]></title>
      <url>http://binux.cn/2017/03/03/Redis-Cluster-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何安装Redis集群(6节点 3主3从),并且如何对Redis集群进行操作,以及Jedis进行操作!”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></li>
<li><strong><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></strong></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇安装的Redis版本为3.0 目前官方最新稳定版3.2</p>
<p>需要安装gcc：yum install gcc-c++</p>
<p>需要安装ruby的环境。</p>
<p>yum -y install ruby ruby-devel rubygems rpm-build</p>
<p>需要使用到官方提供的ruby脚本<a href="https://rubygems.org/downloads/redis-3.0.0.gem" target="_blank" rel="external">redis-3.0.0.gem</a>。</p>
<p>gem install redis-3.0.0.gem</p>
<blockquote>
<p>本机IP为192.168.1.1</p>
</blockquote>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载源码点我下载"><a href="#下载源码点我下载" class="headerlink" title="下载源码点我下载"></a>下载源码<a href="http://download.redis.io/releases/redis-3.0.0.tar.gz" target="_blank" rel="external">点我下载</a></h3><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>tar -zxvf redis-3.0.0.tar.gz</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>cd /usr/local/redis-3.0.0</p>
<p>make</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>make PREFIX=/usr/local/redis1 install</p>
<h3 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h3><p>进入源码目录，里面有一份配置文件 redis.conf，然后将其拷贝到安装路径下</p>
<p>cd /usr/local/redis</p>
<p>mkdir etc</p>
<p>cp redis-3.0.0/redis.conf  /usr/local/redis-cluster/redis1/etc</p>
<p>编辑redis.conf 打开第632行# cluster-enabled yes 的注释</p>
<h3 id="复制6个Redis"><a href="#复制6个Redis" class="headerlink" title="复制6个Redis"></a>复制6个Redis</h3><p>分别命名为redis1-6</p>
<p>分别修改redis.conf配置文件中的第45行端口号为7001-7006</p>
<h3 id="复制redis-trib-rb集群管理工具"><a href="#复制redis-trib-rb集群管理工具" class="headerlink" title="复制redis-trib.rb集群管理工具"></a>复制redis-trib.rb集群管理工具</h3><p>cp redis-3.0.0/src/redis-trib.rb  /usr/local/redis-cluster</p>
<h3 id="启动-后端启动"><a href="#启动-后端启动" class="headerlink" title="启动(后端启动)"></a>启动(后端启动)</h3><p> /usr/local/redis-cluster/redis1/bin/redis-server /usr/local/redis-cluster/redis1/etc/redis.conf<br> /usr/local/redis-cluster/redis2/bin/redis-server /usr/local/redis-cluster/redis2/etc/redis.conf<br> /usr/local/redis-cluster/redis3/bin/redis-server /usr/local/redis-cluster/redis3/etc/redis.conf<br> /usr/local/redis-cluster/redis4/bin/redis-server /usr/local/redis-cluster/redis4/etc/redis.conf<br> /usr/local/redis-cluster/redis5/bin/redis-server /usr/local/redis-cluster/redis5/etc/redis.conf<br> /usr/local/redis-cluster/redis6/bin/redis-server /usr/local/redis-cluster/redis6/etc/redis.conf</p>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>cd /usr/local/redis-cluster<br>./redis-trib.rb create –replicas 1 <strong>192.168.1.1</strong>:<strong>7001</strong> <strong>192.168.1.1</strong>:<strong>7002</strong> <strong>192.168.1.1</strong>:<strong>7003</strong> <strong>192.168.1.1</strong>:<strong>7004</strong> <strong>192.168.1.1</strong>:<strong>7005</strong>  <strong>192.168.1.1</strong>:<strong>7006</strong></p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Creating cluster
Connecting to node 192.168.1.1:7001: OK
Connecting to node 192.168.1.1:7002: OK
Connecting to node 192.168.1.1:7003: OK
Connecting to node 192.168.1.1:7004: OK
Connecting to node 192.168.1.1:7005: OK
Connecting to node 192.168.1.1:7006: OK
&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.1.1:7001
192.168.1.1:7002
192.168.1.1:7003
Adding replica 192.168.1.1:7004 to 192.168.1.1:7001
Adding replica 192.168.1.1:7005 to 192.168.1.1:7002
Adding replica 192.168.1.1:7006 to 192.168.1.1:7003
M: 5a8523db7e12ca600dc82901ced06741b3010076 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
M: bf6f0929044db485dea9b565bb51e0c917d20a53 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
M: c5e334dc4a53f655cb98fa3c3bdef8a808a693ca 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
S: 2a61b87b49e5b1c84092918fa2467dd70fec115f 192.168.1.1:7004
   replicates 5a8523db7e12ca600dc82901ced06741b3010076
S: 14848b8c813766387cfd77229bd2d1ffd6ac8d65 192.168.1.1:7005
   replicates bf6f0929044db485dea9b565bb51e0c917d20a53
S: 3192cbe437fe67bbde9062f59d5a77dabcd0d632 192.168.1.1:7006
   replicates c5e334dc4a53f655cb98fa3c3bdef8a808a693ca
Can I set the above configuration? (type &#39;yes&#39; to accept): yes
&gt;&gt;&gt; Nodes configuration updated
&gt;&gt;&gt; Assign a different config epoch to each node
&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join.....
&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7001)
M: 5a8523db7e12ca600dc82901ced06741b3010076 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
M: bf6f0929044db485dea9b565bb51e0c917d20a53 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
M: c5e334dc4a53f655cb98fa3c3bdef8a808a693ca 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
M: 2a61b87b49e5b1c84092918fa2467dd70fec115f 192.168.1.1:7004
   slots: (0 slots) master
   replicates 5a8523db7e12ca600dc82901ced06741b3010076
M: 14848b8c813766387cfd77229bd2d1ffd6ac8d65 192.168.1.1:7005
   slots: (0 slots) master
   replicates bf6f0929044db485dea9b565bb51e0c917d20a53
M: 3192cbe437fe67bbde9062f59d5a77dabcd0d632 192.168.1.1:7006
   slots: (0 slots) master
   replicates c5e334dc4a53f655cb98fa3c3bdef8a808a693ca
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
</code></pre><h3 id="查看Redis运行状态"><a href="#查看Redis运行状态" class="headerlink" title="查看Redis运行状态"></a>查看Redis运行状态</h3><pre><code>ps -el | grep redis
5 S     0  1999     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2003     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2007     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2011     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2017     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
5 S     0  2023     1  0  80   0 - 34359 ep_pol ?        00:00:00 redis-server
</code></pre><h2 id="Redis集群操作"><a href="#Redis集群操作" class="headerlink" title="Redis集群操作"></a>Redis集群操作</h2><h3 id="新增一个Master节点"><a href="#新增一个Master节点" class="headerlink" title="新增一个Master节点"></a>新增一个Master节点</h3><p>/usr/local/redis-cluster/redis-trib.rb add-node <strong>新增节点192.168.1.1:端口</strong> <strong>已知节点192.168.1.1:端口</strong></p>
<blockquote>
<p>如192.168.1.1:6385 192.168.1.1:6379</p>
</blockquote>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Adding node 新增192.168.1.1:端口 to cluster 192.168.1.1:7001
Connecting to node 192.168.1.1:7001: OK
Connecting to node 192.168.1.1:7006: OK
Connecting to node 192.168.1.1:7005: OK
Connecting to node 192.168.1.1:7004: OK
Connecting to node 192.168.1.1:7002: OK
Connecting to node 192.168.1.1:7003: OK
&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7001)
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: fa299e41c173fa807ba04684c2f5e5e185d5f7d0 192.168.1.1:7006
   slots: (0 slots) slave
   replicates 83df08875c7707878756364039df0a4c8658f272
S: adb99506ddccad332e09258565f2e5f4f456a150 192.168.1.1:7005
   slots: (0 slots) slave
   replicates 8aac82b63d42a1989528cd3906579863a5774e77
S: a69b98937844c6050ee5885266ccccb185a3f36a 192.168.1.1:7004
   slots: (0 slots) slave
   replicates 614d0def75663f2620b6402a017014b57c912dad
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
Connecting to node 新增192.168.1.1:端口: OK
&gt;&gt;&gt; Send CLUSTER MEET to node 新增192.168.1.1:端口 to make it join the cluster.
[OK] New node added correctly.
</code></pre><blockquote>
<p>注意：当添加节点成功以后，新增的节点不会有任何数据，因为它没有分配任何的slot（hash槽）。我们需要为新节点手工分配slot。</p>
</blockquote>
<h4 id="为新节点分配slot"><a href="#为新节点分配slot" class="headerlink" title="为新节点分配slot"></a>为新节点分配slot</h4><p>/usr/local/redis-cluster/redis-trib.rb add-node <strong>192.168.1.1:端口</strong>(已知节点)</p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7001)
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: fa299e41c173fa807ba04684c2f5e5e185d5f7d0 192.168.1.1:7006
   slots: (0 slots) slave
   replicates 83df08875c7707878756364039df0a4c8658f272
S: adb99506ddccad332e09258565f2e5f4f456a150 192.168.1.1:7005
   slots: (0 slots) slave
   replicates 8aac82b63d42a1989528cd3906579863a5774e77
M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
   slots: (0 slots) master
   0 additional replica(s)
S: a69b98937844c6050ee5885266ccccb185a3f36a 192.168.1.1:7004
   slots: (0 slots) slave
   replicates 614d0def75663f2620b6402a017014b57c912dad
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
// 提示一
How many slots do you want to move (from 1 to 16384)? 输入需要分配的slot数量如：200
// 提示二 是你需要把这200个slot槽移动到那个节点上去（需要指定节点id）
What is the receiving node ID? 382634a4025778c040b7213453fd42a709f79e28//节点ID
Please enter all the source node IDs.
  Type &#39;all&#39; to use all the nodes as source nodes for the hash slots.
  Type &#39;done&#39; once you entered all the source nodes IDs.
// 提示三 输入all为从所有主节点3个中分别抽取响应的槽数（一共为200个槽到指定的新节点中！，并且会打印执行分片的计划。）
Source node #1:all
Ready to move 200 slots.
Source nodes:
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
slots:0-5460 (5461 slots) master
1 additional replica(s)
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
slots:5461-10922 (5462 slots) master
1 additional replica(s)
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
slots:10923-16383 (5461 slots) master
1 additional replica(s)
Destination node:
M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
slots: (0 slots) master
0 additional replica(s)
Resharding plan:（分片执行计划日志）
......
//提示四 输入yes执行
Do you want to proceed with the proposed reshard plan (yes/no)? yes
</code></pre><h4 id="完成-查看新增节点-slot数量"><a href="#完成-查看新增节点-slot数量" class="headerlink" title="完成 查看新增节点 slot数量"></a>完成 查看新增节点 slot数量</h4><p>/usr/local/redis/bin/redis-cli -c -h 192.168.1.1 -p 7001</p>
<p>192.168.1.1:7001&gt; cluster  nodes</p>
<h3 id="给7007添加一个Slave节点"><a href="#给7007添加一个Slave节点" class="headerlink" title="给7007添加一个Slave节点"></a>给7007添加一个Slave节点</h3><p>/usr/local/redis-cluster/redis-trib.rb add-node 192.168.1.1:7008 <strong>192.168.1.1:7007</strong>(Master节点)</p>
<p>需要执行replicate命令来指定当前节点（从节点）的主节点id为哪个。</p>
<p>/usr/local/redis-cluster/redis1/bin/redis-cli -c -h 192.168.1.1 -p 7008<br>192.168.1.1:7008&gt; cluster replicate 382634a4025778c040b7213453fd42a709f79e28(7007的id)</p>
<p>192.168.1.1:7008&gt; OK（提示OK则操作成功）</p>
<h3 id="删除一个Slave节点-7008-Slave"><a href="#删除一个Slave节点-7008-Slave" class="headerlink" title="删除一个Slave节点(7008 Slave)"></a>删除一个Slave节点(7008 Slave)</h3><p>删除从节点7008，输入del-node命令，指定删除节点ip和端口，以及节点id</p>
<p>/usr/local/redis-cluster/redis-trib.rb del-node 192.168.1.1:7008 97b0e0115326833724eb0ffe1d0574ee34618e9f(节点id)</p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Removing node 97b0e0115326833724eb0ffe1d0574ee34618e9f from cluster 192.168.1.1:7008
Connecting to node 192.168.1.1:7008: OK
Connecting to node 192.168.1.1:7003: OK
Connecting to node 192.168.1.1:7006: OK
Connecting to node 192.168.1.1:7002: OK
Connecting to node 192.168.1.1:7005: OK
Connecting to node 192.168.1.1:7001: OK
Connecting to node 192.168.1.1:7004: OK
Connecting to node 192.168.1.1:7007: OK
&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...
&gt;&gt;&gt; SHUTDOWN the node.
</code></pre><blockquote>
<p>删除成功</p>
</blockquote>
<h3 id="删除一个Master节点-7007-Master"><a href="#删除一个Master节点-7007-Master" class="headerlink" title="删除一个Master节点(7007 Master)"></a>删除一个Master节点(7007 Master)</h3><p>这个步骤会相对比较麻烦一些，因为主节点的里面是有分配了slot槽的，所以我们这里必须先把7007里的slot槽放入到其他的可用主节点中去，然后再进行移除节点操作才行，不然会出现数据丢失问题。</p>
<p>需要先把其全部的数据（Slot槽）移动到其他节点上去（目前只能把Master的数据迁移到一个节点上，暂时做不了平均分配功能）。</p>
<blockquote>
<p>暂不知在后续版本有无增加此功能</p>
</blockquote>
<p>/usr/local/redis-cluster/redis-trib.rb reshard 192.168.1.1:7007</p>
<p>打印：</p>
<pre><code>&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.1:7007)
M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
   slots:0-65,5461-5527,10923-10988 (199 slots) master
   0 additional replica(s)
S: fa299e41c173fa807ba04684c2f5e5e185d5f7d0 192.168.1.1:7006
   slots: (0 slots) slave
   replicates 83df08875c7707878756364039df0a4c8658f272
S: a69b98937844c6050ee5885266ccccb185a3f36a 192.168.1.1:7004
   slots: (0 slots) slave
   replicates 614d0def75663f2620b6402a017014b57c912dad
M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:66-5460 (5395 slots) master
   1 additional replica(s)
M: 8aac82b63d42a1989528cd3906579863a5774e77 192.168.1.1:7002
   slots:5528-10922 (5395 slots) master
   1 additional replica(s)
S: adb99506ddccad332e09258565f2e5f4f456a150 192.168.1.1:7005
   slots: (0 slots) slave
   replicates 8aac82b63d42a1989528cd3906579863a5774e77
M: 83df08875c7707878756364039df0a4c8658f272 192.168.1.1:7003
   slots:10989-16383 (5395 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 199// 这里不一定正好200个槽
What is the receiving node ID? 614d0def75663f2620b6402a017014b57c912dad
Please enter all the source node IDs.
  Type &#39;all&#39; to use all the nodes as source nodes for the hash slots.
  Type &#39;done&#39; once you entered all the source nodes IDs.
Source node #1:382634a4025778c040b7213453fd42a709f79e28// 这里是需要把数据移动到哪？这里输入7001的主节点id
Source node #2:done// 这里直接输入done 开始生成迁移计划
Ready to move 199 slots.
  Source nodes:
    M: 382634a4025778c040b7213453fd42a709f79e28 192.168.1.1:7007
   slots:0-65,5461-5527,10923-10988 (199 slots) master
   0 additional replica(s)
  Destination node:
    M: 614d0def75663f2620b6402a017014b57c912dad 192.168.1.1:7001
   slots:66-5460 (5395 slots) master
   1 additional replica(s)
  Resharding plan:
Moving slot 0 from 382634a4025778c040b7213453fd42a709f79e28
...
Do you want to proceed with the proposed reshard plan (yes/no)? Yes// 这里输入yes开始迁移
Moving slot 0 from 192.168.1.1:7007 to 192.168.1.1:7001:
</code></pre><p>使用del-node命令删除7007主节点即可</p>
<p>/usr/local/redis-cluster/redis-trib.rb del-node 192.168.1.1:7007 382634a4025778c040b7213453fd42a709f79e28(7007ID)<br>输出如下：</p>
<pre><code>&gt;&gt;&gt; Removing node 382634a4025778c040b7213453fd42a709f79e28 from cluster 192.168.1.171:7007
Connecting to node 192.168.1.171:7007: OK
Connecting to node 192.168.1.171:7006: OK
Connecting to node 192.168.1.171:7004: OK
Connecting to node 192.168.1.171:7001: OK
Connecting to node 192.168.1.171:7002: OK
Connecting to node 192.168.1.171:7005: OK
Connecting to node 192.168.1.171:7003: OK
&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...
&gt;&gt;&gt; SHUTDOWN the node。
</code></pre><h4 id="删除成功-查看集群状态"><a href="#删除成功-查看集群状态" class="headerlink" title="删除成功 查看集群状态"></a>删除成功 查看集群状态</h4><p>/usr/local/redis/bin/redis-cli -c -h 192.168.1.1 -p 7001</p>
<p>192.168.1.1:7001&gt; cluster  nodes</p>
<h2 id="jedis连接"><a href="#jedis连接" class="headerlink" title="jedis连接"></a>jedis连接</h2><h3 id="pom坐标："><a href="#pom坐标：" class="headerlink" title="pom坐标："></a>pom坐标：</h3><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="单实例连接"><a href="#单实例连接" class="headerlink" title="单实例连接"></a>单实例连接</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 单实例连接redis</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedisSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span> <span class="token number">7001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="使用连接池连接"><a href="#使用连接池连接" class="headerlink" title="使用连接池连接"></a>使用连接池连接</h4><p>   通过单实例连接redis不能对redis连接进行共享，可以使用连接池对redis连接进行共享，提高资源利用率，使用jedisPool连接redis服务，如下代码：</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token comment" spellcheck="true">// 连接池连接redis</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//最大连接数</span>
        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//最大连接空闲数</span>
        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        JedisPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span> <span class="token number">7001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token keyword">try</span>  <span class="token punctuation">{</span>
             jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                 <span class="token comment" spellcheck="true">//关闭连接</span>
                 jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="jedis与spring整合"><a href="#jedis与spring整合" class="headerlink" title="jedis与spring整合"></a>jedis与spring整合</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 连接池配置 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 最大连接数 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxTotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 最大空闲连接数 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 每次释放连接的最大数目 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numTestsPerEvictionRun<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 释放连接的扫描间隔（毫秒） --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接最小空闲时间 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>softMinEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWaitMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1500<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 在获取连接的时候检查有效性, 默认false --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 在空闲时检查有效性, 默认false --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blockWhenExhausted<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- redis单机 通过连接池 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPool<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.1.1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring-redis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedisPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    JedisPool pool <span class="token operator">=</span> <span class="token punctuation">(</span>JedisPool<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"jedisPool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">try</span>  <span class="token punctuation">{</span>
             jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                     <span class="token comment" spellcheck="true">//关闭连接</span>
                     jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="多实例连接"><a href="#多实例连接" class="headerlink" title="多实例连接"></a>多实例连接</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jedisClient"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.JedisCluster"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"nodes"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>set<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.1}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.1}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.2}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.2}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.3}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.3}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.4}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.4}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.5}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.5}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redis.clients.jedis.HostAndPort"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"host"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.6}"</span><span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"port"</span> value<span class="token operator">=</span><span class="token string">"${redis.server.cluster.port.6}"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
</code></pre>
<h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring-redis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedisPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    JedisCluster jedisCluster <span class="token operator">=</span> <span class="token punctuation">(</span>JedisCluster<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"jedisClient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">try</span>  <span class="token punctuation">{</span>

             jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"binux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                     <span class="token comment" spellcheck="true">//关闭连接</span>
                     jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇只是讲了Redis集群的搭建和集群的基本操作 想深入了解的 建议自己买本书来看看 比如<a href="https://www.amazon.cn/Redis/dp/B00L4XHH0S/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;qid=1488619617&amp;sr=8-2" target="_blank" rel="external">Redis设计与实现</a>、<a href="https://www.amazon.cn/图书/dp/B016YLS2LM/ref=sr_1_1?ie=UTF8&amp;qid=1488619617&amp;sr=8-1&amp;keywords=redis" target="_blank" rel="external">Redis实战</a>等</p>
<p>安装如有问题 可以在下方评论 我会尽我所能的帮你解决一些问题。</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Java程序连接不上MySQL 但是Navicat可以连接的问题!]]></title>
      <url>http://binux.cn/2017/03/02/Mac-MySQL-Error/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将讲一个困扰了我3天的问题 Java连接不上MySQL”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇讲的Mac上MySQL就突然没用了 但是Navicat、IDEA都可以连接上MySQL 使用Java就是连接不上 <strong>重装也没有用</strong></p>
<h4 id="具体情况是这样的"><a href="#具体情况是这样的" class="headerlink" title="具体情况是这样的"></a>具体情况是这样的</h4><ul>
<li><p>第一天晚上在写订单模块 代码写完了 准备测试时 突然整个控制台狂打印错误 具体的错误就是下面的错误 当时就想着反正就order模块报错 明天再改吧 就回宿舍了</p>
</li>
<li><p>第二天早上过来 我启动其他服务 发现全部都报错 Google了一上午 重装MySQL 依然没解决 下午不甘的去上课</p>
</li>
<li><p>第二天晚上继续找错 试遍了各种情况 打算在虚拟机装MySQL 直接用虚拟机的 但是 依然报错 但是我发现我把网线一拔就可以正常使用 哎 谁能体会我现在的心情 再次不甘的回宿舍了</p>
</li>
<li><p>第三天早上 带着万分的无奈 继续找错 8点找到11点半 还是找不到啊</p>
</li>
<li><p>第三天下午我终于找到了 还是得感谢Google 感谢www.stackoverflow.com上的@BalusC</p>
</li>
</ul>
<h4 id="下面我会讲一下这个问题的原因-不限于我出现的这个问题-帮大家分析下这个问题-希望大家不要出现我这种问题了-为什么我老是碰到这种蛋疼问题-浪费时间还让人心烦-3天时间干什么不好啊"><a href="#下面我会讲一下这个问题的原因-不限于我出现的这个问题-帮大家分析下这个问题-希望大家不要出现我这种问题了-为什么我老是碰到这种蛋疼问题-浪费时间还让人心烦-3天时间干什么不好啊" class="headerlink" title="下面我会讲一下这个问题的原因 不限于我出现的这个问题 帮大家分析下这个问题 希望大家不要出现我这种问题了 为什么我老是碰到这种蛋疼问题 浪费时间还让人心烦 (3天时间干什么不好啊)"></a>下面我会讲一下这个问题的原因 不限于我出现的这个问题 帮大家分析下这个问题 希望大家不要出现我这种问题了 为什么我老是碰到这种蛋疼问题 <strong>浪费时间还让人心烦</strong> (3天时间干什么不好啊)</h4><hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="BalusC解答截图-再次感谢"><a href="#BalusC解答截图-再次感谢" class="headerlink" title="@BalusC解答截图 再次感谢"></a>@BalusC解答截图 再次感谢</h4><p><center><img src="http://on2bs9q7q.bkt.clouddn.com/MySQL-ERROR-img1.png" alt="@BalusC解答截图"></center><br><center>@BalusC解答截图</center></p>
<h4 id="具体报错–MySQL服务没启动同样报此错"><a href="#具体报错–MySQL服务没启动同样报此错" class="headerlink" title="具体报错–MySQL服务没启动同样报此错"></a>具体报错–MySQL服务没启动同样报此错</h4><pre><code>com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
    at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
    at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
    at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
    at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
    at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
    at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
    at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:795)
    at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:44)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
    at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
    at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
    at org.mybatis.generator.internal.db.ConnectionFactory.getConnection(ConnectionFactory.java:68)
    at org.mybatis.generator.config.Context.getConnection(Context.java:526)
    at org.mybatis.generator.config.Context.introspectTables(Context.java:436)
    at org.mybatis.generator.api.MyBatisGenerator.generate(MyBatisGenerator.java:222)
    at org.mybatis.generator.api.MyBatisGenerator.generate(MyBatisGenerator.java:133)
    at GeneratorSqlmap.generator(GeneratorSqlmap.java:27)
    at GeneratorSqlmap.main(GeneratorSqlmap.java:33)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
    at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
    at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
    ... 25 more
</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><h5 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h5><p>The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</p>
<p>最后一个发送成功的数据包在0秒前 没有收到任何来自服务器的数据包。</p>
<p>简单来说就是连不上MySQL服务器了</p>
<h5 id="检查MySQL连接是否有错"><a href="#检查MySQL连接是否有错" class="headerlink" title="检查MySQL连接是否有错"></a>检查MySQL连接是否有错</h5><p>这时候你就得检查下你的msyql连接url有没有写错了</p>
<pre><code>driverClass=&quot;**com.mysql.jdbc.Driver**&quot;
connectionURL=&quot;jdbc:mysql://**IP**:**3306**/**库名**&quot;
userId=&quot;root&quot;
password=&quot;**密码**&quot;
</code></pre><blockquote>
<p>ip 端口 库名 仔细检查下</p>
</blockquote>
<p>如果到这还没有解决问题 那么继续往下看</p>
<h4 id="检查Hosts文件"><a href="#检查Hosts文件" class="headerlink" title="检查Hosts文件"></a>检查Hosts文件</h4><p>查看jdbc中的IP是否在hosts文件中有解析</p>
<h4 id="检查MySQL配置文件"><a href="#检查MySQL配置文件" class="headerlink" title="检查MySQL配置文件"></a>检查MySQL配置文件</h4><p>查看是否绑定ip地址</p>
<p>如果有这行 注释bind-address=xxx.xxx.xxx.xxx</p>
<h4 id="检查MySQL运行在哪个端口"><a href="#检查MySQL运行在哪个端口" class="headerlink" title="检查MySQL运行在哪个端口"></a>检查MySQL运行在哪个端口</h4><pre><code>mysql&gt; show global variables like &#39;port&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| port          | 3306  |
+---------------+-------+
1 row in set (0.10 sec)
</code></pre><h4 id="检查MySQL服务是否真正启动"><a href="#检查MySQL服务是否真正启动" class="headerlink" title="检查MySQL服务是否真正启动"></a>检查MySQL服务是否真正启动</h4><p>telnet <strong>Ip</strong> 3306</p>
<h4 id="检查MySQL是否不接受远程连接"><a href="#检查MySQL是否不接受远程连接" class="headerlink" title="检查MySQL是否不接受远程连接"></a>检查MySQL是否不接受远程连接</h4><pre><code>SELECT USER,HOST FROM user;
//正确
+-----------+-----------+
| USER      | HOST      |
+-----------+-----------+
| root      | %         |
| mysql.sys | localhost |
| root      | localhost |
+-----------+-----------+
</code></pre><p>如果没有授权的话</p>
<p>mysql&gt; grant all privileges on <em>.</em> to root@’%’ identified by ‘<strong>我是密码</strong>‘;</p>
<h4 id="检查MySQL是否已经用完了所有连接"><a href="#检查MySQL是否已经用完了所有连接" class="headerlink" title="检查MySQL是否已经用完了所有连接"></a>检查MySQL是否已经用完了所有连接</h4><p>重启MySQL 出现运行程序 如果不报错就是此问题</p>
<h4 id="检查有没有什么东西在阻止Java程序和MySQL连接"><a href="#检查有没有什么东西在阻止Java程序和MySQL连接" class="headerlink" title="检查有没有什么东西在阻止Java程序和MySQL连接"></a>检查有没有什么东西在阻止Java程序和MySQL连接</h4><p>比如关闭<strong>防火墙</strong> 或者设置防火墙规则</p>
<p>比如有没有开什么<strong>代理</strong></p>
<p>比如拔网线 再连接MySQL试试</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><center><img src="http://on2bs9q7q.bkt.clouddn.com/MySQL-ERROR-img2.png" alt="Shadowsocks"></center><br><center>Shadowsocks</center>

<p>我是栽在最后一条Proxy 想到了Firewall 却忘记他了 程序员翻个墙看看外面的世界 这是一件很正常的事 个人感觉Google甩Baidu一个地球到月球的距离 我就是由于开着小飞机(Shadowsocks) 嫌网速卡 切换到全局模式 然后就让我郁闷了3天。</p>
<p>改成自动模式 解决问题..</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> Bug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Bug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)]]></title>
      <url>http://binux.cn/2017/03/01/Linux-MySQL-Install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“这篇文章将介绍如何Linux下如何安装MySQL 只适合Linux小白看 大神勿喷”</p>
</blockquote>
<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><ul>
<li><strong><a href="http://binux.cn/2017/03/01/Linux-MySQL-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 MySQL安装(一)</a></strong></li>
<li><a href="http://binux.cn/2017/03/03/Redis-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Redis集群安装(二)</a></li>
<li><a href="http://binux.cn/2017/03/04/Zookeeper-Cluster-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Zookeeper集群安装(三)</a></li>
<li><a href="http://binux.cn/2017/03/04/Nginx-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 Nginx安装(四)</a></li>
<li><a href="http://binux.cn/2017/03/05/FastDFS-Install/">Xbin-Store(分布式商城)项目所用Linux服务系列 FastDFS安装(五)</a></li>
<li><a href="http://binux.cn/2017/03/06/Solr-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 Solr集群安装(六)</a></li>
<li><a href="http://binux.cn/2017/03/07/RocketMQ-Cluster-Install/">Xbin-Store(分布式商城)项目所依赖的Linux服务系列 RocketMQ集群安装(七)</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mac上MySQL就突然没用了 但是Navicat、IDEA都可以连接上MySQL 使用Java就是连接不上 <strong>重装也没有用</strong></p>
<p> Google、Baidu了一上午都没解决 不想在浪费时间了 就在Linux中装个MySQL用吧！ (虽然很想把问题找出来)</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="第一步-安装CentOS-略"><a href="#第一步-安装CentOS-略" class="headerlink" title="第一步 安装CentOS 略"></a>第一步 安装CentOS 略</h3><h3 id="第二步-下载MySQL"><a href="#第二步-下载MySQL" class="headerlink" title="第二步 下载MySQL"></a>第二步 下载MySQL</h3><ul>
<li>1、Linux下载 wget <a href="http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz" target="_blank" rel="external">http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz</a></li>
<li>2、<a href="http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz" target="_blank" rel="external">右键我迅雷下载</a></li>
</ul>
<h3 id="第三步-解压tar文件"><a href="#第三步-解压tar文件" class="headerlink" title="第三步 解压tar文件"></a>第三步 解压tar文件</h3><p>[root@mysql ~]# tar -zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz</p>
<h3 id="第四步-改名"><a href="#第四步-改名" class="headerlink" title="第四步 改名"></a>第四步 改名</h3><p>[root@mysql ~]# mv mysql-5.7.17-linux-glibc2.5-x86_64 /usr/local/mysql</p>
<h3 id="第五步-复制修改配置文件"><a href="#第五步-复制修改配置文件" class="headerlink" title="第五步 复制修改配置文件"></a>第五步 复制修改配置文件</h3><p>[root@mysql ~]# cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</p>
<p>[root@mysql ~]# vim /etc/my.cnf</p>
<h4 id="添加以下配置：-解决中文乱码"><a href="#添加以下配置：-解决中文乱码" class="headerlink" title="添加以下配置：(解决中文乱码)"></a>添加以下配置：(解决中文乱码)</h4><pre><code>[mysql]
default-character-set=utf8

[mysqld]
character_set_server=utf8
</code></pre><h3 id="第六步-复制、配置mysql服务"><a href="#第六步-复制、配置mysql服务" class="headerlink" title="第六步 复制、配置mysql服务"></a>第六步 复制、配置mysql服务</h3><p>[root@mysql ~]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</p>
<h4 id="第46行做如下修改"><a href="#第46行做如下修改" class="headerlink" title="第46行做如下修改"></a>第46行做如下修改</h4><pre><code>basedir=/usr/local/mysql
datadir=/usr/local/mysql/data
</code></pre><h3 id="第七步-启动mysql服务"><a href="#第七步-启动mysql服务" class="headerlink" title="第七步 启动mysql服务"></a>第七步 启动mysql服务</h3><p>[root@mysql ~]# cd /usr/local/mysql/bin/</p>
<p>[root@mysql bin]# ./mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p>
<h4 id="屏幕打印："><a href="#屏幕打印：" class="headerlink" title="屏幕打印："></a>屏幕打印：</h4><pre><code>2017-01-27T03:14:04.598579Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2017-01-27T03:14:04.598645Z 0 [Warning] &#39;NO_ZERO_DATE&#39;, &#39;NO_ZERO_IN_DATE&#39; and &#39;ERROR_FOR_DIVISION_BY_ZERO&#39; sql modes should be used with strict mode. They will be merged with strict mode in a future release.
2017-01-27T03:14:04.598648Z 0 [Warning] &#39;NO_AUTO_CREATE_USER&#39; sql mode was not set.
2017-01-27T03:14:05.002057Z 0 [Warning] InnoDB: New log files created, LSN=45790
2017-01-27T03:14:05.079640Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.
2017-01-27T03:14:05.214710Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: a8c7be60-e43e-11e6-b470-000c299fe1ef.
2017-01-27T03:14:05.216074Z 0 [Warning] Gtid table is not ready to be used. Table &#39;mysql.gtid_executed&#39; cannot be opened.
2017-01-27T03:14:05.221297Z 1 [Note] A temporary password is generated for root@localhost: ME#SiCHkw4zS
</code></pre><blockquote>
<p>ME#SiCHkw4zS 这个是初始化密码</p>
</blockquote>
<h3 id="第八步-加密mysql数据"><a href="#第八步-加密mysql数据" class="headerlink" title="第八步 加密mysql数据"></a>第八步 加密mysql数据</h3><p>[root@mysql mysql]# ./bin/mysql_ssl_rsa_setup –datadir=/usr/local/mysql/data</p>
<h4 id="屏幕打印：-1"><a href="#屏幕打印：-1" class="headerlink" title="屏幕打印："></a>屏幕打印：</h4><pre><code>Generating a 2048 bit RSA private key
....................................................+++
..................+++
writing new private key to &#39;ca-key.pem&#39;
-----
Generating a 2048 bit RSA private key
......+++
.............+++
writing new private key to &#39;server-key.pem&#39;
-----
Generating a 2048 bit RSA private key
..........................................................................................................................................+++
.....+++
writing new private key to &#39;client-key.pem&#39;
-----
</code></pre><h3 id="第九步-启动mysql"><a href="#第九步-启动mysql" class="headerlink" title="第九步 启动mysql"></a>第九步 启动mysql</h3><p>[root@mysql mysql]# ./mysqld_safe –user=mysql &amp;</p>
<h4 id="查看启动是否成功-打印如下-启动成功"><a href="#查看启动是否成功-打印如下-启动成功" class="headerlink" title="查看启动是否成功(打印如下 启动成功)"></a>查看启动是否成功(打印如下 启动成功)</h4><p>[root@mysql mysql]# ps -ef|grep mysql</p>
<h4 id="屏幕打印：-2"><a href="#屏幕打印：-2" class="headerlink" title="屏幕打印："></a>屏幕打印：</h4><pre><code>root      2286  1573  0 11:30 pts/1    00:00:00 /bin/sh ./mysqld_safe --user=mysql
mysql     2407  2286  5 11:30 pts/1    00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/storm3.err --pid-file=/usr/local/mysql/data/mysql.pid
root      2438  1573  0 11:30 pts/1    00:00:00 grep mysql
</code></pre><h4 id="启动-输入初始密码"><a href="#启动-输入初始密码" class="headerlink" title="启动 输入初始密码"></a>启动 输入初始密码</h4><p>[root@mysql mysql]# ./mysql -uroot -p</p>
<h3 id="第十步-重新设置密码、授权"><a href="#第十步-重新设置密码、授权" class="headerlink" title="第十步 重新设置密码、授权"></a>第十步 重新设置密码、授权</h3><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>mysql&gt; grant all privileges on <em>.</em> to root@’%’ identified by ‘<strong>我是密码</strong>‘;</p>
<h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p>mysql&gt;grant all privileges on <em>.</em> to root@’%’ identified by ‘<strong>我是密码</strong>‘;</p>
<h4 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h4><p>mysql&gt;flush privileges;</p>
<h3 id="第十一步-设置防火墙规则"><a href="#第十一步-设置防火墙规则" class="headerlink" title="第十一步 设置防火墙规则"></a>第十一步 设置防火墙规则</h3><p>[root@mysql mysql]# vim /etc/sysconfig/iptables</p>
<h4 id="添加以下规则："><a href="#添加以下规则：" class="headerlink" title="添加以下规则："></a>添加以下规则：</h4><pre><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT
</code></pre><h4 id="重启防火墙："><a href="#重启防火墙：" class="headerlink" title="重启防火墙："></a>重启防火墙：</h4><p>[root@mysql mysql]# service iptables restart</p>
<h3 id="第十二步-开机自启"><a href="#第十二步-开机自启" class="headerlink" title="第十二步 开机自启"></a>第十二步 开机自启</h3><p>chkconfig –add mysql</p>
<p>chkconfig mysql on</p>
<h3 id="第十三步-配置环境变量"><a href="#第十三步-配置环境变量" class="headerlink" title="第十三步 配置环境变量"></a>第十三步 配置环境变量</h3><p>[root@mysql mysql]# vim /etc/profile</p>
<h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>export PATH=$JAVA_HOME/bin:/usr/local/mysql/bin:$PATH</p>
<h3 id="第十四步-Linux新建mysql用户"><a href="#第十四步-Linux新建mysql用户" class="headerlink" title="第十四步 Linux新建mysql用户"></a>第十四步 Linux新建mysql用户</h3><p>[root@mysql mysql]# groupadd mysql</p>
<p>[root@mysql mysql]# useradd -r -g mysql mysql</p>
<p>[root@mysql mysql]# passwd mysql</p>
<p>[root@mysql mysql]#chown -R mysql:mysql /usr/local/mysql/</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MySQL安装还是很简单的。</p>
<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> 安装教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完美解决Mac下Navicat Premium连接MySQL5.7中文乱码！！！]]></title>
      <url>http://binux.cn/2017/02/27/Mac-MySQL-Garbled/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“记录下 毕竟也是当初困扰自己好久的问题！”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学生自己买不起Mac只能自己装的黑苹果 自己不想研究 还找人花钱装的 (其实自己装也可以 就是有点麻烦) 初用Mac OS 感觉 系统好炫酷 简直就是为我而生的</p>
<p>没用多久就感觉 以后绝对不会用 win10了 下部电脑绝对自己赚钱买Mac 自己慢慢摸索把一些自己常用的软件都装好了 也包括一些全新的软件 <strong>Alfred、1Password、PopClip等</strong> 有时间可以记录下我使用的一些 软件<br>绝对用过了就回不去的 </p>
<p>好了 回到正题 在使用Navicat Premium 连接MySQL时出现了乱码 查了些资料 </p>
<p>我总结出来的只需要改2处 <strong>有一处还是自己多此一举</strong> 出现的！</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先我们来改MySQL的字符集</p>
<p>登录MySQL SHOW VARIABLES LIKE “character%”;</p>
<pre><code>mysql&gt; SHOW VARIABLES LIKE &quot;character%&quot;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | latin1                                                    |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | latin1                                                    |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.17-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.00 sec)
</code></pre><p>character_set_database和character_set_server的默认字符集还是latin1。</p>
<p>需要改成</p>
<pre><code>mysql&gt; SHOW VARIABLES LIKE &quot;character%&quot;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | utf8                                                      |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | utf8                                                      |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.17-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.00 sec)
</code></pre><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>停止MySQL服务</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img1.png" alt="MySQL设置"></center><br><center>MySQL设置</center><br>打开终端 执行 sudo vim /etc/my.cnf 输入密码 新建一个MySQL配置文件 因为5.7 安装的时候默认没有配置文件<br><br>加入2条配置<br><code>[client]
default-character-set=utf8
[mysqld]
character-set-server=utf8</code><br>重新启动MySQL服务<br><br>打开Navicat Premium 连接<br><center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img2.png" alt="Navicat Premium连接"></center><br>发现还是乱码<br><center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img3.png" alt="中文乱码"></center><br><center>中文乱码</center><br>其实到这边 MySQL乱码就配置完成了 问题就出在 新建连接的时候Encoding这边选择了utf-8<br><br>把它改成Auto 问题解决<br><center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img4.png" alt="问题解决"></center>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>出现这个问题不怪别人 都是自己手残 干嘛自己去改连接属性里面的Encoding 其实默认就是Auto 其实这个问题困扰我挺久的 </p>
<p>不过在改过MySQL配置后 使用MyBatis 也就是JDBC操作数据库是没问题的 所以也没在意</p>
<p>最后怎么看自己配置的有没有问题呢！</p>
<p>Navicat Premium右键Edit DataBase 如果是下图 就绝对没问题了</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/Mac-MySQL-img5.png" alt="Edit DataBase"></center>

<hr>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> Bug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[List.remove()无效!!!]]></title>
      <url>http://binux.cn/2017/02/26/List.remove()/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“还是接触Java太少了，以前根本没碰到过，记录下这个小问题”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天做到购物车功能 写JS写到想吐 还是感觉Java简单点 前端对于我来说还是个弱点 我就用笨办法实现 用JQuery一个一个选择 终于完成了基本的功能</p>
<p>在做购物车商品加减时 网页用JS加减同时向服务器发送AJax加减数量 由于使用的分布式架构 购物车商品不能存在Session中 就选择存储在Redis中 每次都去数据遍历 购物车东西少还可以 一旦商品多了 感觉太浪费性能了</p>
<p>然后就想着有没有办法可以不用每次遍历整个购物车List集合 然后就想到从页面传入一个索引值 直接定位List中需要加减的商品 于是就引发了这个问题</p>
<p><a href="#build">不想看我BB的 直接跳到最后看总结 </a></p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><center><img src="http://on2bs9q7q.bkt.clouddn.com/List.remove()-cart.png"></center><br><center>购物车截图</center>

<p>服务端代码：</p>
<pre class=" language-Java"><code class="language-Java">/**
 *
 * 根据商品id和数量对购物车增加商品或减少商品
 *
 * @param pid       商品id
 * @param pcount    增加数量
 * @param type      1 增加 2 减少
 * @param index     商品位置   ps:用于直接定位商品 不用遍历整个购物车
 * @return
 */
@Override
public XbinResult decreOrIncre(Long pid, Integer pcount, Integer type, Integer index, String cookieUUID) {

    String key = CART_INFO_PROFIX + cookieUUID;

    List<CartInfo> cartInfoList = getCartInfoListByCookiesId(cookieUUID);
    if (cartInfoList == null || cartInfoList.size() == 0) {
        return XbinResult.build(400, "购物车没有商品 请不要非法操作!");
    }

    CartInfo cartInfo = cartInfoList.get(index);

    if (type == 1) {
        cartInfo.setNum(cartInfo.getNum() + pcount);
    } else {
        cartInfo.setNum(cartInfo.getNum() - pcount);
    }
    cartInfoList.remove(index);
    cartInfoList.add(index, cartInfo);
    jedisClient.set(key, FastJsonConvert.convertObjectToJSON(cartInfoList));
    jedisClient.expire(key,REDIS_CART_EXPIRE_TIME);

    return XbinResult.ok();
}
</code></pre>
<blockquote>
<p>代码就不解释了 太简单了。</p>
</blockquote>
<p>点击➕一件商品 然后就出现了一个非常奇怪的现象 商品确实加1了 但是出现了2个相同的商品</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/List.remove()-Bug.png"></center><br><center>点击➕号后刷新出现</center>

<p>查询Redis中数据是这样的</p>
<pre class=" language-Json"><code class="language-Json">[
  {
    "colour": "黑色",
    "id": 148630831972863,
    "imageUrl": "http://192.168.125.132/group1/M00/00/00/wKh9hFiM0l-AQuvEAABmx7u5QSA128.jpg",
    "name": "Apple MacBook Pro 15.4英寸笔记本电脑 深空灰色（Multi-Touch Bar/Core i7/16GB/512GB MLH42CH/A）",
    "num": 3,
    "price": 2148800,
    "size": "32GB",
    "sum": 6446400
  },
  {
    "$ref": "$[0]"
  },
  {
    "colour": "黑色",
    "id": 148630639229938,
    "imageUrl": "http://192.168.125.132/group1/M00/00/00/wKh9hFiMy4eAV5lwAAB25IS6WjM274.jpg",
    "name": "Apple iPhone 7 (A1660) 32G 黑色 移动联通电信4G手机",
    "num": 2,
    "price": 519900,
    "size": "32GB",
    "sum": 1039800
  }
]
</code></pre>
<blockquote>
<p>“$ref”: “$[0]” 表示数据引用索引0位置的数据</p>
</blockquote>
<p>List.remove()无效 无效第一时间想到的是查查看API是不是我用错了</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/List.remove()-api.png"></center>

<p>API并没有用错 但为什么就是remove不掉呢！ 然后就DEBUG查看了下整个流程</p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/List.remove()-DEBUG1.png"></center>

<p>发现问题了 <strong>内存地址竟然一样一样！！！</strong></p>
<center><img src="http://on2bs9q7q.bkt.clouddn.com/List.remove()-DEBUG2.png"></center>



<p>这才想起来 我把CartInfo类给序列化了 <strong>脑中万**马奔腾</strong> 不是我没事去实现Serializable接口 而是Dubbox传输的对象 不实现Serializable就报错</p>
<p>但是也说不通啊 为什么我Remove不掉呢 我只想保留一个</p>
<p>在次查询API 发现问题了 remove()有重载方法</p>
<center><img class="shadow" src="http://on2bs9q7q.bkt.clouddn.com/List.remove()-Bug2.png"></center>

<p>……</p>
<p>我定义的Integer index ，他竟然没有自动拆箱 当成对象去比较了 这两个对象当然不会相同 返回false 自然不会删除 </p>
<p>应该是默认调用的boolean remove(Object o) 方法才没有拆箱</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><p id="build"></p></h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>List Remove对象时不要传Integer对象的index值 要传也只能是传index.intValue()；</p>
<pre class=" language-Java"><code class="language-Java">//cartInfoList.remove(index);
//cartInfoList.add(index, cartInfo);
</code></pre>
<p>最后我直接把这两句全注释了 解决了问题。</p>
<h2 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h2><p>本文首次发布于 <a href="http://binux.cn">Binux Blog</a>，转载请保留以上链接</p>
]]></content>
      
        <categories>
            
            <category> Bug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XBin-Store </tag>
            
            <tag> Bug </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Blog]]></title>
      <url>http://binux.cn/2017/02/23/hello-Blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“加油！！！ ”</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Binux Blog 开通了。</p>
<p>以后会多多写些Blog 以前都是自己随便记录些笔记。</p>
<p>无意了解到 <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a><br>通过<a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> 可以快速 Building Blog</p>
]]></content>
      
        <categories>
            
            <category> 随记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
